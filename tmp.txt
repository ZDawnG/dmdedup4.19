
dm-dedup.ko:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <alloc_data_block_xremap>:
/********************************************************
 *		Space Management Functions		*
 ********************************************************/

static int alloc_data_block_xremap(struct metadata *md, uint64_t *blockn)
{
       0:	e8 00 00 00 00       	callq  5 <alloc_data_block_xremap+0x5>
       5:	55                   	push   %rbp
	return 0;
	//return dm_sm_new_block(md->data_sm, blockn);
}
       6:	31 c0                	xor    %eax,%eax
{
       8:	48 89 e5             	mov    %rsp,%rbp
}
       b:	5d                   	pop    %rbp
       c:	c3                   	retq   
       d:	0f 1f 00             	nopl   (%rax)

0000000000000010 <inc_refcount_xremap>:

static int inc_refcount_xremap(struct metadata *md, uint64_t blockn)
{
      10:	e8 00 00 00 00       	callq  15 <inc_refcount_xremap+0x5>
	if (blockn >= md->smax)
      15:	48 39 77 08          	cmp    %rsi,0x8(%rdi)
{
      19:	55                   	push   %rbp
      1a:	48 89 e5             	mov    %rsp,%rbp
	if (blockn >= md->smax)
      1d:	76 17                	jbe    36 <inc_refcount_xremap+0x26>
		return -ERANGE;

	if (md->smap[blockn] != UINT32_MAX)
      1f:	48 8b 07             	mov    (%rdi),%rax
      22:	48 8d 14 b0          	lea    (%rax,%rsi,4),%rdx
      26:	8b 02                	mov    (%rdx),%eax
      28:	83 f8 ff             	cmp    $0xffffffff,%eax
      2b:	74 10                	je     3d <inc_refcount_xremap+0x2d>
		md->smap[blockn]++;
      2d:	83 c0 01             	add    $0x1,%eax
      30:	89 02                	mov    %eax,(%rdx)
	else
		return -E2BIG;

	return 0;
      32:	31 c0                	xor    %eax,%eax
	//return dm_sm_inc_block(md->data_sm, blockn);
}
      34:	5d                   	pop    %rbp
      35:	c3                   	retq   
		return -ERANGE;
      36:	b8 de ff ff ff       	mov    $0xffffffde,%eax
}
      3b:	5d                   	pop    %rbp
      3c:	c3                   	retq   
		return -E2BIG;
      3d:	b8 f9 ff ff ff       	mov    $0xfffffff9,%eax
}
      42:	5d                   	pop    %rbp
      43:	c3                   	retq   
      44:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
      4b:	00 00 00 00 
      4f:	90                   	nop

0000000000000050 <dec_refcount_xremap>:

static int dec_refcount_xremap(struct metadata *md, uint64_t blockn)
{
      50:	e8 00 00 00 00       	callq  55 <dec_refcount_xremap+0x5>
	if (blockn >= md->smax)
      55:	48 39 77 08          	cmp    %rsi,0x8(%rdi)
{
      59:	55                   	push   %rbp
      5a:	48 89 e5             	mov    %rsp,%rbp
	if (blockn >= md->smax)
      5d:	76 16                	jbe    75 <dec_refcount_xremap+0x25>
		return -ERANGE;

	if (md->smap[blockn])
      5f:	48 8b 07             	mov    (%rdi),%rax
      62:	48 8d 14 b0          	lea    (%rax,%rsi,4),%rdx
      66:	8b 02                	mov    (%rdx),%eax
      68:	85 c0                	test   %eax,%eax
      6a:	74 10                	je     7c <dec_refcount_xremap+0x2c>
		md->smap[blockn]--;
      6c:	83 e8 01             	sub    $0x1,%eax
      6f:	89 02                	mov    %eax,(%rdx)
	else
		return -EFAULT;

	return 0;
      71:	31 c0                	xor    %eax,%eax
	//return dm_sm_dec_block(md->data_sm, blockn);
}
      73:	5d                   	pop    %rbp
      74:	c3                   	retq   
		return -ERANGE;
      75:	b8 de ff ff ff       	mov    $0xffffffde,%eax
}
      7a:	5d                   	pop    %rbp
      7b:	c3                   	retq   
		return -EFAULT;
      7c:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
}
      81:	5d                   	pop    %rbp
      82:	c3                   	retq   
      83:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
      8a:	00 00 00 00 
      8e:	66 90                	xchg   %ax,%ax

0000000000000090 <get_refcount_xremap>:

static int get_refcount_xremap(struct metadata *md, uint64_t blockn)
{
      90:	e8 00 00 00 00       	callq  95 <get_refcount_xremap+0x5>
	if (blockn >= md->smax)
      95:	48 39 77 08          	cmp    %rsi,0x8(%rdi)
{
      99:	55                   	push   %rbp
      9a:	48 89 e5             	mov    %rsp,%rbp
	if (blockn >= md->smax)
      9d:	76 08                	jbe    a7 <get_refcount_xremap+0x17>
		return -ERANGE;

	return md->smap[blockn];
      9f:	48 8b 07             	mov    (%rdi),%rax
}
      a2:	5d                   	pop    %rbp
	return md->smap[blockn];
      a3:	8b 04 b0             	mov    (%rax,%rsi,4),%eax
}
      a6:	c3                   	retq   
		return -ERANGE;
      a7:	b8 de ff ff ff       	mov    $0xffffffde,%eax
}
      ac:	5d                   	pop    %rbp
      ad:	c3                   	retq   
      ae:	66 90                	xchg   %ax,%ax

00000000000000b0 <set_refcount_xremap>:

static int set_refcount_xremap(struct metadata *md, uint64_t blockn, uint32_t val)
{
      b0:	e8 00 00 00 00       	callq  b5 <set_refcount_xremap+0x5>
	if (blockn >= md->smax)
      b5:	48 39 77 08          	cmp    %rsi,0x8(%rdi)
{
      b9:	55                   	push   %rbp
      ba:	48 89 e5             	mov    %rsp,%rbp
	if (blockn >= md->smax)
      bd:	76 0a                	jbe    c9 <set_refcount_xremap+0x19>
		return -ERANGE;
	md->smap[blockn] = val;
      bf:	48 8b 07             	mov    (%rdi),%rax
      c2:	89 14 b0             	mov    %edx,(%rax,%rsi,4)
	return 0;
      c5:	31 c0                	xor    %eax,%eax
}
      c7:	5d                   	pop    %rbp
      c8:	c3                   	retq   
		return -ERANGE;
      c9:	b8 de ff ff ff       	mov    $0xffffffde,%eax
}
      ce:	5d                   	pop    %rbp
      cf:	c3                   	retq   

00000000000000d0 <kvs_iterate_linear_xremap>:
static int kvs_iterate_linear_xremap(struct kvstore *kvs,
				    int (*iteration_action)
				    (void *key, int32_t ksize,
				     void *value, int32_t vsize,
				     void *data), void *data)
{
      d0:	e8 00 00 00 00       	callq  d5 <kvs_iterate_linear_xremap+0x5>
      d5:	55                   	push   %rbp
      d6:	48 89 e5             	mov    %rsp,%rbp
      d9:	41 55                	push   %r13
      db:	41 54                	push   %r12
      dd:	53                   	push   %rbx
      de:	48 83 ec 10          	sub    $0x10,%rsp
	int ret = 0;
	u64 i = 0;
      e2:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
      e9:	00 
{
      ea:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
      f1:	00 00 
      f3:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
      f7:	31 c0                	xor    %eax,%eax
	struct kvstore_xremap_linear *kvxremap = NULL;
	bool ret_empty;

	kvxremap = container_of(kvs, struct kvstore_xremap_linear, ckvs);

	for (i = 0; i < kvxremap->kmax; i++) {
      f9:	8b 47 28             	mov    0x28(%rdi),%eax
      fc:	85 c0                	test   %eax,%eax
      fe:	74 50                	je     150 <kvs_iterate_linear_xremap+0x80>
     100:	48 89 f3             	mov    %rsi,%rbx
     103:	49 89 fd             	mov    %rdi,%r13
     106:	49 89 d4             	mov    %rdx,%r12
     109:	31 f6                	xor    %esi,%esi
     10b:	eb 29                	jmp    136 <kvs_iterate_linear_xremap+0x66>

		ret_empty = is_empty(ptr, kvs->vsize);

		if (!ret_empty) {
			ret = 0;
			ret = iteration_action((void *)&i, kvs->ksize,
     10d:	41 8b 75 04          	mov    0x4(%r13),%esi
     111:	4d 89 e0             	mov    %r12,%r8
     114:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
     118:	e8 00 00 00 00       	callq  11d <kvs_iterate_linear_xremap+0x4d>
					       (void *)ptr, kvs->vsize, data);
			if (ret < 0)
     11d:	85 c0                	test   %eax,%eax
     11f:	78 31                	js     152 <kvs_iterate_linear_xremap+0x82>
	for (i = 0; i < kvxremap->kmax; i++) {
     121:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
     125:	41 8b 55 28          	mov    0x28(%r13),%edx
     129:	48 8d 77 01          	lea    0x1(%rdi),%rsi
     12d:	48 39 d6             	cmp    %rdx,%rsi
     130:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
     134:	73 1c                	jae    152 <kvs_iterate_linear_xremap+0x82>
		ptr = kvxremap->store + (i * kvs->vsize);
     136:	41 8b 55 00          	mov    0x0(%r13),%edx
     13a:	48 89 d1             	mov    %rdx,%rcx
     13d:	48 0f af d6          	imul   %rsi,%rdx
     141:	49 03 55 30          	add    0x30(%r13),%rdx
		if (!ret_empty) {
     145:	85 c9                	test   %ecx,%ecx
     147:	75 c4                	jne    10d <kvs_iterate_linear_xremap+0x3d>
				goto out;
		} else {
			ret = 1;
     149:	b8 01 00 00 00       	mov    $0x1,%eax
     14e:	eb d1                	jmp    121 <kvs_iterate_linear_xremap+0x51>
	int ret = 0;
     150:	31 c0                	xor    %eax,%eax
		}
	}

out:
	return ret;
}
     152:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
     156:	65 48 33 1c 25 28 00 	xor    %gs:0x28,%rbx
     15d:	00 00 
     15f:	75 0b                	jne    16c <kvs_iterate_linear_xremap+0x9c>
     161:	48 83 c4 10          	add    $0x10,%rsp
     165:	5b                   	pop    %rbx
     166:	41 5c                	pop    %r12
     168:	41 5d                	pop    %r13
     16a:	5d                   	pop    %rbp
     16b:	c3                   	retq   
     16c:	e8 00 00 00 00       	callq  171 <kvs_iterate_linear_xremap+0xa1>
     171:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
     178:	00 00 00 00 
     17c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000000180 <get_bufio_client_xremap>:
	struct dm_bufio_client *bufio;
	bool read_only:1;
};

void* get_bufio_client_xremap(struct metadata *md)
{
     180:	e8 00 00 00 00       	callq  185 <get_bufio_client_xremap+0x5>
	struct dm_block_manager* bm = md->meta_bm;
	return (void*)(bm->bufio);
     185:	48 8b 47 10          	mov    0x10(%rdi),%rax
{
     189:	55                   	push   %rbp
     18a:	48 89 e5             	mov    %rsp,%rbp
	return (void*)(bm->bufio);
     18d:	48 8b 00             	mov    (%rax),%rax
};
     190:	5d                   	pop    %rbp
     191:	c3                   	retq   
     192:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
     199:	00 00 00 00 
     19d:	0f 1f 00             	nopl   (%rax)

00000000000001a0 <change_hash_pbn_root_xremmap>:

void change_hash_pbn_root_xremmap(struct metadata *md) {
     1a0:	e8 00 00 00 00       	callq  1a5 <change_hash_pbn_root_xremmap+0x5>
     1a5:	55                   	push   %rbp
     1a6:	48 89 e5             	mov    %rsp,%rbp
	// struct kvstore_xremap_sparse *kvxremap_tmp = md->kvs_sparse_tmp;
	
	// dm_btree_del(&(kvxremap->info), kvxremap->root);
	// md->kvs_sparse = kvxremap_tmp;
	// md->kvs_sparse_tmp = NULL;
}
     1a9:	5d                   	pop    %rbp
     1aa:	c3                   	retq   
     1ab:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

00000000000001b0 <get_private_data_xremap>:
{
     1b0:	e8 00 00 00 00       	callq  1b5 <get_private_data_xremap+0x5>
     1b5:	55                   	push   %rbp
	if (size > sizeof(md->private_data))
     1b6:	83 fa 10             	cmp    $0x10,%edx
{
     1b9:	48 89 e5             	mov    %rsp,%rbp
	if (size > sizeof(md->private_data))
     1bc:	0f 87 88 00 00 00    	ja     24a <get_private_data_xremap+0x9a>
		if (q_size < size)
			__read_overflow2();
	}
	if (p_size < size || q_size < size)
		fortify_panic(__func__);
	return __builtin_memcpy(p, q, size);
     1c2:	83 fa 08             	cmp    $0x8,%edx
     1c5:	48 8b 0e             	mov    (%rsi),%rcx
     1c8:	48 8d 77 40          	lea    0x40(%rdi),%rsi
     1cc:	72 45                	jb     213 <get_private_data_xremap+0x63>
     1ce:	48 8b 47 40          	mov    0x40(%rdi),%rax
     1d2:	48 89 01             	mov    %rax,(%rcx)
     1d5:	89 d0                	mov    %edx,%eax
     1d7:	48 8b 7c 06 f8       	mov    -0x8(%rsi,%rax,1),%rdi
     1dc:	48 89 7c 01 f8       	mov    %rdi,-0x8(%rcx,%rax,1)
     1e1:	48 8d 41 08          	lea    0x8(%rcx),%rax
     1e5:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
     1e9:	48 29 c1             	sub    %rax,%rcx
     1ec:	01 ca                	add    %ecx,%edx
     1ee:	48 29 ce             	sub    %rcx,%rsi
     1f1:	83 e2 f8             	and    $0xfffffff8,%edx
     1f4:	83 fa 08             	cmp    $0x8,%edx
     1f7:	72 16                	jb     20f <get_private_data_xremap+0x5f>
     1f9:	83 e2 f8             	and    $0xfffffff8,%edx
     1fc:	31 c9                	xor    %ecx,%ecx
     1fe:	89 cf                	mov    %ecx,%edi
     200:	83 c1 08             	add    $0x8,%ecx
     203:	4c 8b 04 3e          	mov    (%rsi,%rdi,1),%r8
     207:	39 d1                	cmp    %edx,%ecx
     209:	4c 89 04 38          	mov    %r8,(%rax,%rdi,1)
     20d:	72 ef                	jb     1fe <get_private_data_xremap+0x4e>
	return 0;
     20f:	31 c0                	xor    %eax,%eax
}
     211:	5d                   	pop    %rbp
     212:	c3                   	retq   
     213:	f6 c2 04             	test   $0x4,%dl
     216:	75 1f                	jne    237 <get_private_data_xremap+0x87>
     218:	85 d2                	test   %edx,%edx
     21a:	74 f3                	je     20f <get_private_data_xremap+0x5f>
     21c:	0f b6 47 40          	movzbl 0x40(%rdi),%eax
     220:	f6 c2 02             	test   $0x2,%dl
     223:	88 01                	mov    %al,(%rcx)
     225:	74 e8                	je     20f <get_private_data_xremap+0x5f>
     227:	89 d0                	mov    %edx,%eax
     229:	0f b7 54 06 fe       	movzwl -0x2(%rsi,%rax,1),%edx
     22e:	66 89 54 01 fe       	mov    %dx,-0x2(%rcx,%rax,1)
	return 0;
     233:	31 c0                	xor    %eax,%eax
     235:	eb da                	jmp    211 <get_private_data_xremap+0x61>
     237:	8b 47 40             	mov    0x40(%rdi),%eax
     23a:	89 01                	mov    %eax,(%rcx)
     23c:	89 d0                	mov    %edx,%eax
     23e:	8b 54 06 fc          	mov    -0x4(%rsi,%rax,1),%edx
     242:	89 54 01 fc          	mov    %edx,-0x4(%rcx,%rax,1)
     246:	31 c0                	xor    %eax,%eax
     248:	eb c7                	jmp    211 <get_private_data_xremap+0x61>
		return -1;
     24a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
     24f:	5d                   	pop    %rbp
     250:	c3                   	retq   
     251:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
     258:	00 00 00 00 
     25c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000000260 <set_private_data_xremap>:
{
     260:	e8 00 00 00 00       	callq  265 <set_private_data_xremap+0x5>
     265:	55                   	push   %rbp
	if (size > sizeof(md->private_data))
     266:	83 fa 10             	cmp    $0x10,%edx
{
     269:	48 89 e5             	mov    %rsp,%rbp
	if (size > sizeof(md->private_data))
     26c:	0f 87 85 00 00 00    	ja     2f7 <set_private_data_xremap+0x97>
     272:	83 fa 08             	cmp    $0x8,%edx
     275:	48 8d 4f 40          	lea    0x40(%rdi),%rcx
     279:	72 45                	jb     2c0 <set_private_data_xremap+0x60>
     27b:	48 8b 06             	mov    (%rsi),%rax
     27e:	48 83 c7 48          	add    $0x48,%rdi
     282:	48 89 47 f8          	mov    %rax,-0x8(%rdi)
     286:	89 d0                	mov    %edx,%eax
     288:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
     28c:	4c 8b 44 06 f8       	mov    -0x8(%rsi,%rax,1),%r8
     291:	4c 89 44 01 f8       	mov    %r8,-0x8(%rcx,%rax,1)
     296:	48 29 f9             	sub    %rdi,%rcx
     299:	01 ca                	add    %ecx,%edx
     29b:	48 29 ce             	sub    %rcx,%rsi
     29e:	83 e2 f8             	and    $0xfffffff8,%edx
     2a1:	83 fa 08             	cmp    $0x8,%edx
     2a4:	72 16                	jb     2bc <set_private_data_xremap+0x5c>
     2a6:	83 e2 f8             	and    $0xfffffff8,%edx
     2a9:	31 c0                	xor    %eax,%eax
     2ab:	89 c1                	mov    %eax,%ecx
     2ad:	83 c0 08             	add    $0x8,%eax
     2b0:	4c 8b 04 0e          	mov    (%rsi,%rcx,1),%r8
     2b4:	39 d0                	cmp    %edx,%eax
     2b6:	4c 89 04 0f          	mov    %r8,(%rdi,%rcx,1)
     2ba:	72 ef                	jb     2ab <set_private_data_xremap+0x4b>
	return 0;
     2bc:	31 c0                	xor    %eax,%eax
}
     2be:	5d                   	pop    %rbp
     2bf:	c3                   	retq   
     2c0:	f6 c2 04             	test   $0x4,%dl
     2c3:	75 1f                	jne    2e4 <set_private_data_xremap+0x84>
     2c5:	85 d2                	test   %edx,%edx
     2c7:	74 f3                	je     2bc <set_private_data_xremap+0x5c>
     2c9:	0f b6 06             	movzbl (%rsi),%eax
     2cc:	f6 c2 02             	test   $0x2,%dl
     2cf:	88 47 40             	mov    %al,0x40(%rdi)
     2d2:	74 e8                	je     2bc <set_private_data_xremap+0x5c>
     2d4:	89 d0                	mov    %edx,%eax
     2d6:	0f b7 54 06 fe       	movzwl -0x2(%rsi,%rax,1),%edx
     2db:	66 89 54 01 fe       	mov    %dx,-0x2(%rcx,%rax,1)
	return 0;
     2e0:	31 c0                	xor    %eax,%eax
     2e2:	eb da                	jmp    2be <set_private_data_xremap+0x5e>
     2e4:	8b 06                	mov    (%rsi),%eax
     2e6:	89 47 40             	mov    %eax,0x40(%rdi)
     2e9:	89 d0                	mov    %edx,%eax
     2eb:	8b 54 06 fc          	mov    -0x4(%rsi,%rax,1),%edx
     2ef:	89 54 01 fc          	mov    %edx,-0x4(%rcx,%rax,1)
     2f3:	31 c0                	xor    %eax,%eax
     2f5:	eb c7                	jmp    2be <set_private_data_xremap+0x5e>
		return -1;
     2f7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
     2fc:	5d                   	pop    %rbp
     2fd:	c3                   	retq   
     2fe:	66 90                	xchg   %ax,%ax

0000000000000300 <kvs_lookup_linear_xremap>:
{
     300:	e8 00 00 00 00       	callq  305 <kvs_lookup_linear_xremap+0x5>
	if (ksize != kvs->ksize)
     305:	39 57 04             	cmp    %edx,0x4(%rdi)
     308:	75 3b                	jne    345 <kvs_lookup_linear_xremap+0x45>
{
     30a:	55                   	push   %rbp
     30b:	48 89 e5             	mov    %rsp,%rbp
     30e:	41 54                	push   %r12
     310:	53                   	push   %rbx
	if (idx > kvxremap->kmax)
     311:	8b 57 28             	mov    0x28(%rdi),%edx
	idx = *((uint64_t *)key);
     314:	48 8b 36             	mov    (%rsi),%rsi
     317:	48 89 fb             	mov    %rdi,%rbx
	if (idx > kvxremap->kmax)
     31a:	48 39 f2             	cmp    %rsi,%rdx
     31d:	72 2c                	jb     34b <kvs_lookup_linear_xremap+0x4b>
	ptr = kvxremap->store + kvs->vsize * idx;
     31f:	8b 17                	mov    (%rdi),%edx
     321:	48 0f af f2          	imul   %rdx,%rsi
     325:	48 03 73 30          	add    0x30(%rbx),%rsi
	if (is_empty(ptr, kvs->vsize))
     329:	85 d2                	test   %edx,%edx
     32b:	74 25                	je     352 <kvs_lookup_linear_xremap+0x52>
     32d:	48 89 cf             	mov    %rcx,%rdi
     330:	4d 89 c4             	mov    %r8,%r12
     333:	e8 00 00 00 00       	callq  338 <kvs_lookup_linear_xremap+0x38>
	*vsize = kvs->vsize;
     338:	8b 03                	mov    (%rbx),%eax
     33a:	41 89 04 24          	mov    %eax,(%r12)
	return 0;
     33e:	31 c0                	xor    %eax,%eax
}
     340:	5b                   	pop    %rbx
     341:	41 5c                	pop    %r12
     343:	5d                   	pop    %rbp
     344:	c3                   	retq   
		return -EINVAL;
     345:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
}
     34a:	c3                   	retq   
		return -ERANGE;
     34b:	b8 de ff ff ff       	mov    $0xffffffde,%eax
     350:	eb ee                	jmp    340 <kvs_lookup_linear_xremap+0x40>
		return r;
     352:	b8 c3 ff ff ff       	mov    $0xffffffc3,%eax
     357:	eb e7                	jmp    340 <kvs_lookup_linear_xremap+0x40>
     359:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000000360 <kvs_insert_linear_xremap>:
{
     360:	e8 00 00 00 00       	callq  365 <kvs_insert_linear_xremap+0x5>
	if (ksize != kvs->ksize)
     365:	39 57 04             	cmp    %edx,0x4(%rdi)
     368:	75 2d                	jne    397 <kvs_insert_linear_xremap+0x37>
	if (vsize != kvs->vsize)
     36a:	8b 17                	mov    (%rdi),%edx
     36c:	44 39 c2             	cmp    %r8d,%edx
     36f:	75 26                	jne    397 <kvs_insert_linear_xremap+0x37>
	idx = *((uint64_t *)key);
     371:	48 8b 06             	mov    (%rsi),%rax
	if (idx > kvxremap->kmax)
     374:	8b 77 28             	mov    0x28(%rdi),%esi
     377:	48 39 c6             	cmp    %rax,%rsi
     37a:	72 21                	jb     39d <kvs_insert_linear_xremap+0x3d>
	ptr = kvxremap->store + kvs->vsize * idx;
     37c:	48 0f af c2          	imul   %rdx,%rax
{
     380:	55                   	push   %rbp
     381:	48 89 ce             	mov    %rcx,%rsi
	ptr = kvxremap->store + kvs->vsize * idx;
     384:	48 03 47 30          	add    0x30(%rdi),%rax
{
     388:	48 89 e5             	mov    %rsp,%rbp
	ptr = kvxremap->store + kvs->vsize * idx;
     38b:	48 89 c7             	mov    %rax,%rdi
     38e:	e8 00 00 00 00       	callq  393 <kvs_insert_linear_xremap+0x33>
	return 0;
     393:	31 c0                	xor    %eax,%eax
}
     395:	5d                   	pop    %rbp
     396:	c3                   	retq   
		return -EINVAL;
     397:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
     39c:	c3                   	retq   
		return -ERANGE;
     39d:	b8 de ff ff ff       	mov    $0xffffffde,%eax
}
     3a2:	c3                   	retq   
     3a3:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
     3aa:	00 00 00 00 
     3ae:	66 90                	xchg   %ax,%ax

00000000000003b0 <__begin_transaction>:
{
     3b0:	e8 00 00 00 00       	callq  3b5 <__begin_transaction+0x5>
     3b5:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
     3ba:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
	r = dm_bm_read_lock(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
     3be:	31 d2                	xor    %edx,%edx
     3c0:	31 f6                	xor    %esi,%esi
{
     3c2:	41 ff 72 f8          	pushq  -0x8(%r10)
     3c6:	55                   	push   %rbp
     3c7:	48 89 e5             	mov    %rsp,%rbp
     3ca:	41 54                	push   %r12
     3cc:	41 52                	push   %r10
     3ce:	53                   	push   %rbx
     3cf:	49 89 fc             	mov    %rdi,%r12
	r = dm_bm_read_lock(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
     3d2:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
{
     3d6:	48 83 ec 18          	sub    $0x18,%rsp
	r = dm_bm_read_lock(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
     3da:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
{
     3de:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
     3e5:	00 00 
     3e7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
     3eb:	31 c0                	xor    %eax,%eax
	r = dm_bm_read_lock(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
     3ed:	e8 00 00 00 00       	callq  3f2 <__begin_transaction+0x42>
	if (r)
     3f2:	85 c0                	test   %eax,%eax
	r = dm_bm_read_lock(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
     3f4:	89 c3                	mov    %eax,%ebx
	if (r)
     3f6:	74 20                	je     418 <__begin_transaction+0x68>
}
     3f8:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
     3fc:	65 48 33 34 25 28 00 	xor    %gs:0x28,%rsi
     403:	00 00 
     405:	89 d8                	mov    %ebx,%eax
     407:	75 5c                	jne    465 <__begin_transaction+0xb5>
     409:	48 83 c4 18          	add    $0x18,%rsp
     40d:	5b                   	pop    %rbx
     40e:	41 5a                	pop    %r10
     410:	41 5c                	pop    %r12
     412:	5d                   	pop    %rbp
     413:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
     417:	c3                   	retq   
	disk_super = dm_block_data(sblock);
     418:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
     41c:	e8 00 00 00 00       	callq  421 <__begin_transaction+0x71>
	if (md->kvs_sparse) {
     421:	49 8b 54 24 38       	mov    0x38(%r12),%rdx
     426:	48 85 d2             	test   %rdx,%rdx
     429:	74 17                	je     442 <__begin_transaction+0x92>
		md->kvs_sparse->root = le64_to_cpu(disk_super->hash_pbn_root);
     42b:	48 8b 88 2d 01 00 00 	mov    0x12d(%rax),%rcx
     432:	48 89 4a 68          	mov    %rcx,0x68(%rdx)
		md->kvs_sparse->lpc_cur = disk_super->lpc_last;
     436:	0f b6 48 2c          	movzbl 0x2c(%rax),%ecx
     43a:	49 8b 54 24 38       	mov    0x38(%r12),%rdx
     43f:	89 4a 70             	mov    %ecx,0x70(%rdx)
     442:	48 8b 90 45 01 00 00 	mov    0x145(%rax),%rdx
     449:	48 8b 80 3d 01 00 00 	mov    0x13d(%rax),%rax
	dm_bm_unlock(sblock);
     450:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
     454:	49 89 44 24 40       	mov    %rax,0x40(%r12)
     459:	49 89 54 24 48       	mov    %rdx,0x48(%r12)
     45e:	e8 00 00 00 00       	callq  463 <__begin_transaction+0xb3>
	return r;
     463:	eb 93                	jmp    3f8 <__begin_transaction+0x48>
}
     465:	e8 00 00 00 00       	callq  46a <__begin_transaction+0xba>
     46a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000000470 <kvs_delete_linear_xremap>:
{
     470:	e8 00 00 00 00       	callq  475 <kvs_delete_linear_xremap+0x5>
	if (ksize != kvs->ksize)
     475:	39 57 04             	cmp    %edx,0x4(%rdi)
     478:	75 2e                	jne    4a8 <kvs_delete_linear_xremap+0x38>
	if (idx > kvxremap->kmax)
     47a:	8b 57 28             	mov    0x28(%rdi),%edx
	idx = *((uint64_t *)key);
     47d:	48 8b 06             	mov    (%rsi),%rax
	if (idx > kvxremap->kmax)
     480:	48 39 c2             	cmp    %rax,%rdx
     483:	72 29                	jb     4ae <kvs_delete_linear_xremap+0x3e>
	ptr = kvxremap->store + kvs->vsize * idx;
     485:	8b 17                	mov    (%rdi),%edx
     487:	48 0f af c2          	imul   %rdx,%rax
     48b:	48 03 47 30          	add    0x30(%rdi),%rax
	if (is_empty(ptr, kvs->vsize))
     48f:	85 d2                	test   %edx,%edx
	ptr = kvxremap->store + kvs->vsize * idx;
     491:	48 89 c7             	mov    %rax,%rdi
	if (is_empty(ptr, kvs->vsize))
     494:	74 1e                	je     4b4 <kvs_delete_linear_xremap+0x44>
{
     496:	55                   	push   %rbp
	return __builtin_memset(p, c, size);
     497:	be ff 00 00 00       	mov    $0xff,%esi
     49c:	48 89 e5             	mov    %rsp,%rbp
     49f:	e8 00 00 00 00       	callq  4a4 <kvs_delete_linear_xremap+0x34>
	return 0;
     4a4:	31 c0                	xor    %eax,%eax
}
     4a6:	5d                   	pop    %rbp
     4a7:	c3                   	retq   
		return -EINVAL;
     4a8:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
     4ad:	c3                   	retq   
		return -ERANGE;
     4ae:	b8 de ff ff ff       	mov    $0xffffffde,%eax
     4b3:	c3                   	retq   
		return -ENODEV;
     4b4:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
}
     4b9:	c3                   	retq   
     4ba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000004c0 <kvs_delete_sparse_xremap>:
{
     4c0:	e8 00 00 00 00       	callq  4c5 <kvs_delete_sparse_xremap+0x5>
     4c5:	55                   	push   %rbp
     4c6:	48 89 e5             	mov    %rsp,%rbp
     4c9:	41 57                	push   %r15
     4cb:	41 56                	push   %r14
     4cd:	41 55                	push   %r13
     4cf:	41 54                	push   %r12
     4d1:	53                   	push   %rbx
     4d2:	48 83 ec 30          	sub    $0x30,%rsp
     4d6:	48 89 75 b8          	mov    %rsi,-0x48(%rbp)
     4da:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
     4e1:	00 00 
     4e3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
     4e7:	31 c0                	xor    %eax,%eax
	if (ksize != kvs->ksize)
     4e9:	39 57 04             	cmp    %edx,0x4(%rdi)
     4ec:	0f 85 4d 01 00 00    	jne    63f <kvs_delete_sparse_xremap+0x17f>
     4f2:	48 89 fb             	mov    %rdi,%rbx
	cur_entry = kmalloc(kvxremap->entry_size, GFP_NOIO);
     4f5:	8b 7f 28             	mov    0x28(%rdi),%edi
			return kmem_cache_alloc_trace(kmalloc_caches[index],
					flags, size);
		}
#endif
	}
	return __kmalloc(size, flags);
     4f8:	be 00 00 60 00       	mov    $0x600000,%esi
     4fd:	41 89 d5             	mov    %edx,%r13d
     500:	e8 00 00 00 00       	callq  505 <kvs_delete_sparse_xremap+0x45>
	if (!cur_entry)
     505:	48 85 c0             	test   %rax,%rax
     508:	49 89 c4             	mov    %rax,%r12
     50b:	0f 84 97 00 00 00    	je     5a8 <kvs_delete_sparse_xremap+0xe8>
	key_val = (*(uint64_t *)key);
     511:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
	r = dm_btree_lookup(&(kvxremap->info), kvxremap->root, &key_val, cur_entry);
     515:	48 8b 73 68          	mov    0x68(%rbx),%rsi
     519:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
     51d:	4c 89 e1             	mov    %r12,%rcx
	key_val = (*(uint64_t *)key);
     520:	48 8b 00             	mov    (%rax),%rax
     523:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	r = dm_btree_lookup(&(kvxremap->info), kvxremap->root, &key_val, cur_entry);
     527:	48 8d 43 30          	lea    0x30(%rbx),%rax
     52b:	48 89 c7             	mov    %rax,%rdi
     52e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
     532:	e8 00 00 00 00       	callq  537 <kvs_delete_sparse_xremap+0x77>
	if (r == -ENODATA) {
     537:	83 f8 c3             	cmp    $0xffffffc3,%eax
	r = dm_btree_lookup(&(kvxremap->info), kvxremap->root, &key_val, cur_entry);
     53a:	41 89 c6             	mov    %eax,%r14d
	if (r == -ENODATA) {
     53d:	0f 84 04 01 00 00    	je     647 <kvs_delete_sparse_xremap+0x187>
		if (!memcmp(cur_entry, key, ksize)) {
     543:	49 63 c5             	movslq %r13d,%rax
	while (r == 0) {
     546:	45 85 f6             	test   %r14d,%r14d
		if (!memcmp(cur_entry, key, ksize)) {
     549:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	while (r == 0) {
     54d:	74 38                	je     587 <kvs_delete_sparse_xremap+0xc7>
out:
     54f:	e9 e6 00 00 00       	jmpq   63a <kvs_delete_sparse_xremap+0x17a>
		r = dm_btree_lookup(&(kvxremap->info),
     554:	48 8b 73 68          	mov    0x68(%rbx),%rsi
     558:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
     55c:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
     560:	48 89 c1             	mov    %rax,%rcx
     563:	e8 00 00 00 00       	callq  568 <kvs_delete_sparse_xremap+0xa8>
		if (q_size < size)
			__read_overflow2();
	}
	if (p_size < size || q_size < size)
		fortify_panic(__func__);
	return __builtin_memcmp(p, q, size);
     568:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
     56c:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
     570:	4c 89 e7             	mov    %r12,%rdi
     573:	41 89 c6             	mov    %eax,%r14d
     576:	e8 00 00 00 00       	callq  57b <kvs_delete_sparse_xremap+0xbb>
		if (!memcmp(cur_entry, key, ksize)) {
     57b:	85 c0                	test   %eax,%eax
     57d:	74 31                	je     5b0 <kvs_delete_sparse_xremap+0xf0>
		} else if (r == 0) {
     57f:	45 85 f6             	test   %r14d,%r14d
     582:	75 6c                	jne    5f0 <kvs_delete_sparse_xremap+0x130>
     584:	4d 89 fc             	mov    %r15,%r12
		cur_key_val = key_val;
     587:	4c 8b 6d c0          	mov    -0x40(%rbp),%r13
		next_entry = kmalloc(kvxremap->entry_size, GFP_NOIO);
     58b:	8b 7b 28             	mov    0x28(%rbx),%edi
     58e:	be 00 00 60 00       	mov    $0x600000,%esi
		key_val++;
     593:	49 8d 45 01          	lea    0x1(%r13),%rax
     597:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
     59b:	e8 00 00 00 00       	callq  5a0 <kvs_delete_sparse_xremap+0xe0>
		if (!next_entry)
     5a0:	48 85 c0             	test   %rax,%rax
     5a3:	49 89 c7             	mov    %rax,%r15
     5a6:	75 ac                	jne    554 <kvs_delete_sparse_xremap+0x94>
		return -ENOMEM;
     5a8:	41 be f4 ff ff ff    	mov    $0xfffffff4,%r14d
     5ae:	eb 50                	jmp    600 <kvs_delete_sparse_xremap+0x140>
	if (ret_next == 0 &&
     5b0:	45 85 f6             	test   %r14d,%r14d
     5b3:	4c 89 6d c8          	mov    %r13,-0x38(%rbp)
     5b7:	4c 8d 6b 68          	lea    0x68(%rbx),%r13
     5bb:	75 64                	jne    621 <kvs_delete_sparse_xremap+0x161>
     5bd:	49 8b 07             	mov    (%r15),%rax
     5c0:	49 39 04 24          	cmp    %rax,(%r12)
     5c4:	75 5b                	jne    621 <kvs_delete_sparse_xremap+0x161>
		memset(cur_entry, DELETED_ENTRY, kvxremap->entry_size);
     5c6:	8b 53 28             	mov    0x28(%rbx),%edx
	return __builtin_memset(p, c, size);
     5c9:	be 6b 00 00 00       	mov    $0x6b,%esi
     5ce:	4c 89 e7             	mov    %r12,%rdi
     5d1:	e8 00 00 00 00       	callq  5d6 <kvs_delete_sparse_xremap+0x116>
		r = dm_btree_insert(&(kvxremap->info), kvxremap->root,
     5d6:	48 8b 73 68          	mov    0x68(%rbx),%rsi
     5da:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
     5de:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
     5e2:	4d 89 e8             	mov    %r13,%r8
     5e5:	4c 89 e1             	mov    %r12,%rcx
     5e8:	e8 00 00 00 00       	callq  5ed <kvs_delete_sparse_xremap+0x12d>
     5ed:	41 89 c6             	mov    %eax,%r14d
	kfree(cur_entry);
     5f0:	4c 89 e7             	mov    %r12,%rdi
     5f3:	e8 00 00 00 00       	callq  5f8 <kvs_delete_sparse_xremap+0x138>
	kfree(next_entry);
     5f8:	4c 89 ff             	mov    %r15,%rdi
     5fb:	e8 00 00 00 00       	callq  600 <kvs_delete_sparse_xremap+0x140>
}
     600:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
     604:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
     60b:	00 00 
     60d:	44 89 f0             	mov    %r14d,%eax
     610:	75 3d                	jne    64f <kvs_delete_sparse_xremap+0x18f>
     612:	48 83 c4 30          	add    $0x30,%rsp
     616:	5b                   	pop    %rbx
     617:	41 5c                	pop    %r12
     619:	41 5d                	pop    %r13
     61b:	41 5e                	pop    %r14
     61d:	41 5f                	pop    %r15
     61f:	5d                   	pop    %rbp
     620:	c3                   	retq   
		r = dm_btree_remove(&(kvxremap->info),
     621:	48 8b 73 68          	mov    0x68(%rbx),%rsi
     625:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
     629:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
     62d:	4c 89 e9             	mov    %r13,%rcx
     630:	e8 00 00 00 00       	callq  635 <kvs_delete_sparse_xremap+0x175>
     635:	41 89 c6             	mov    %eax,%r14d
     638:	eb b6                	jmp    5f0 <kvs_delete_sparse_xremap+0x130>
	char *cur_entry, *next_entry = NULL;
     63a:	45 31 ff             	xor    %r15d,%r15d
     63d:	eb b1                	jmp    5f0 <kvs_delete_sparse_xremap+0x130>
		return -EINVAL;
     63f:	41 be ea ff ff ff    	mov    $0xffffffea,%r14d
     645:	eb b9                	jmp    600 <kvs_delete_sparse_xremap+0x140>
		return -ENODEV;
     647:	41 be ed ff ff ff    	mov    $0xffffffed,%r14d
     64d:	eb b1                	jmp    600 <kvs_delete_sparse_xremap+0x140>
}
     64f:	e8 00 00 00 00       	callq  654 <kvs_delete_sparse_xremap+0x194>
     654:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
     65b:	00 00 00 00 
     65f:	90                   	nop

0000000000000660 <kvs_lookup_sparse_xremap>:
{
     660:	e8 00 00 00 00       	callq  665 <kvs_lookup_sparse_xremap+0x5>
     665:	55                   	push   %rbp
     666:	48 89 e5             	mov    %rsp,%rbp
     669:	41 57                	push   %r15
     66b:	41 56                	push   %r14
     66d:	41 55                	push   %r13
     66f:	41 54                	push   %r12
     671:	53                   	push   %rbx
     672:	48 63 da             	movslq %edx,%rbx
     675:	48 83 ec 28          	sub    $0x28,%rsp
     679:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
     67d:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
     684:	00 00 
     686:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
     68a:	31 c0                	xor    %eax,%eax
	if (ksize != kvs->ksize)
     68c:	39 5f 04             	cmp    %ebx,0x4(%rdi)
     68f:	0f 85 b4 00 00 00    	jne    749 <kvs_lookup_sparse_xremap+0xe9>
     695:	49 89 ff             	mov    %rdi,%r15
	entry = kmalloc(kvxremap->entry_size, GFP_NOIO);
     698:	8b 7f 28             	mov    0x28(%rdi),%edi
     69b:	49 89 f5             	mov    %rsi,%r13
     69e:	be 00 00 60 00       	mov    $0x600000,%esi
     6a3:	e8 00 00 00 00       	callq  6a8 <kvs_lookup_sparse_xremap+0x48>
	if (!entry)
     6a8:	48 85 c0             	test   %rax,%rax
     6ab:	49 89 c4             	mov    %rax,%r12
     6ae:	0f 84 9d 00 00 00    	je     751 <kvs_lookup_sparse_xremap+0xf1>
	key_val = (*(uint64_t *)key);
     6b4:	49 8b 45 00          	mov    0x0(%r13),%rax
	for (i = 0; i <= kvxremap->lpc_cur; i++) {
     6b8:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
	key_val = (*(uint64_t *)key);
     6bf:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
     6c3:	49 8d 47 30          	lea    0x30(%r15),%rax
     6c7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		r = dm_btree_lookup(&(kvxremap->info), kvxremap->root, &key_val,
     6cb:	49 8b 77 68          	mov    0x68(%r15),%rsi
     6cf:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
     6d3:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
     6d7:	4c 89 e1             	mov    %r12,%rcx
     6da:	e8 00 00 00 00       	callq  6df <kvs_lookup_sparse_xremap+0x7f>
		if (r == -ENODATA) {
     6df:	83 f8 c3             	cmp    $0xffffffc3,%eax
     6e2:	74 52                	je     736 <kvs_lookup_sparse_xremap+0xd6>
		} else if (r == 0) {
     6e4:	85 c0                	test   %eax,%eax
     6e6:	75 4e                	jne    736 <kvs_lookup_sparse_xremap+0xd6>
	return __builtin_memcmp(p, q, size);
     6e8:	48 89 da             	mov    %rbx,%rdx
     6eb:	4c 89 ee             	mov    %r13,%rsi
     6ee:	4c 89 e7             	mov    %r12,%rdi
     6f1:	e8 00 00 00 00       	callq  6f6 <kvs_lookup_sparse_xremap+0x96>
			if (!memcmp(entry, key, ksize)) {
     6f6:	85 c0                	test   %eax,%eax
     6f8:	41 89 c6             	mov    %eax,%r14d
     6fb:	75 61                	jne    75e <kvs_lookup_sparse_xremap+0xfe>
				memcpy(value, entry + ksize, kvs->vsize);
     6fd:	41 8b 17             	mov    (%r15),%edx
	return __builtin_memcpy(p, q, size);
     700:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
     704:	49 8d 34 1c          	lea    (%r12,%rbx,1),%rsi
     708:	e8 00 00 00 00       	callq  70d <kvs_lookup_sparse_xremap+0xad>
				kfree(entry);
     70d:	4c 89 e7             	mov    %r12,%rdi
     710:	e8 00 00 00 00       	callq  715 <kvs_lookup_sparse_xremap+0xb5>
}
     715:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
     719:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
     720:	00 00 
     722:	44 89 f0             	mov    %r14d,%eax
     725:	75 32                	jne    759 <kvs_lookup_sparse_xremap+0xf9>
     727:	48 83 c4 28          	add    $0x28,%rsp
     72b:	5b                   	pop    %rbx
     72c:	41 5c                	pop    %r12
     72e:	41 5d                	pop    %r13
     730:	41 5e                	pop    %r14
     732:	41 5f                	pop    %r15
     734:	5d                   	pop    %rbp
     735:	c3                   	retq   
			kfree(entry);
     736:	4c 89 e7             	mov    %r12,%rdi
     739:	89 45 c0             	mov    %eax,-0x40(%rbp)
     73c:	e8 00 00 00 00       	callq  741 <kvs_lookup_sparse_xremap+0xe1>
		r = dm_btree_lookup(&(kvxremap->info), kvxremap->root, &key_val,
     741:	8b 45 c0             	mov    -0x40(%rbp),%eax
     744:	41 89 c6             	mov    %eax,%r14d
			return r;
     747:	eb cc                	jmp    715 <kvs_lookup_sparse_xremap+0xb5>
		return -EINVAL;
     749:	41 be ea ff ff ff    	mov    $0xffffffea,%r14d
     74f:	eb c4                	jmp    715 <kvs_lookup_sparse_xremap+0xb5>
		return -ENOMEM;
     751:	41 be f4 ff ff ff    	mov    $0xfffffff4,%r14d
     757:	eb bc                	jmp    715 <kvs_lookup_sparse_xremap+0xb5>
}
     759:	e8 00 00 00 00       	callq  75e <kvs_lookup_sparse_xremap+0xfe>
			DMWARN("kvs_lookup_sparse_xremap: hash collision for "
     75e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
     762:	4c 89 e2             	mov    %r12,%rdx
     765:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
     76c:	e8 00 00 00 00       	callq  771 <kvs_lookup_sparse_xremap+0x111>
	for (i = 0; i <= kvxremap->lpc_cur; i++) {
     771:	83 45 b4 01          	addl   $0x1,-0x4c(%rbp)
			key_val++;
     775:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
	for (i = 0; i <= kvxremap->lpc_cur; i++) {
     77a:	8b 45 b4             	mov    -0x4c(%rbp),%eax
     77d:	41 39 47 70          	cmp    %eax,0x70(%r15)
     781:	0f 83 44 ff ff ff    	jae    6cb <kvs_lookup_sparse_xremap+0x6b>
	kfree(entry);
     787:	4c 89 e7             	mov    %r12,%rdi
	return r;
     78a:	45 31 f6             	xor    %r14d,%r14d
	kfree(entry);
     78d:	e8 00 00 00 00       	callq  792 <kvs_lookup_sparse_xremap+0x132>
	return r;
     792:	eb 81                	jmp    715 <kvs_lookup_sparse_xremap+0xb5>
     794:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
     79b:	00 00 00 00 
     79f:	90                   	nop

00000000000007a0 <kvs_iterate_sparse_xremap>:
{
     7a0:	e8 00 00 00 00       	callq  7a5 <kvs_iterate_sparse_xremap+0x5>
     7a5:	55                   	push   %rbp
     7a6:	48 89 e5             	mov    %rsp,%rbp
     7a9:	41 57                	push   %r15
     7ab:	41 56                	push   %r14
     7ad:	41 55                	push   %r13
     7af:	41 54                	push   %r12
     7b1:	49 89 fe             	mov    %rdi,%r14
     7b4:	53                   	push   %rbx
     7b5:	48 83 ec 40          	sub    $0x40,%rsp
	entry = kmalloc(kvs->ksize + kvs->vsize, GFP_NOIO);
     7b9:	8b 3f                	mov    (%rdi),%edi
     7bb:	41 03 7e 04          	add    0x4(%r14),%edi
{
     7bf:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
     7c3:	be 00 00 60 00       	mov    $0x600000,%esi
     7c8:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
     7cc:	65 48 8b 1c 25 28 00 	mov    %gs:0x28,%rbx
     7d3:	00 00 
     7d5:	48 89 5d d0          	mov    %rbx,-0x30(%rbp)
     7d9:	31 db                	xor    %ebx,%ebx
     7db:	e8 00 00 00 00       	callq  7e0 <kvs_iterate_sparse_xremap+0x40>
	if (!entry)
     7e0:	48 85 c0             	test   %rax,%rax
     7e3:	48 89 c3             	mov    %rax,%rbx
     7e6:	0f 84 58 01 00 00    	je     944 <kvs_iterate_sparse_xremap+0x1a4>
	key = kmalloc(kvs->ksize, GFP_NOIO);
     7ec:	41 8b 7e 04          	mov    0x4(%r14),%edi
     7f0:	be 00 00 60 00       	mov    $0x600000,%esi
     7f5:	e8 00 00 00 00       	callq  7fa <kvs_iterate_sparse_xremap+0x5a>
	if (!key)
     7fa:	48 85 c0             	test   %rax,%rax
     7fd:	49 89 c4             	mov    %rax,%r12
     800:	0f 84 49 01 00 00    	je     94f <kvs_iterate_sparse_xremap+0x1af>
	value = kmalloc(kvs->vsize, GFP_NOIO);
     806:	41 8b 3e             	mov    (%r14),%edi
     809:	be 00 00 60 00       	mov    $0x600000,%esi
	int r = 0;
     80e:	45 31 ff             	xor    %r15d,%r15d
     811:	e8 00 00 00 00       	callq  816 <kvs_iterate_sparse_xremap+0x76>
	if (!value)
     816:	48 85 c0             	test   %rax,%rax
     819:	49 89 c5             	mov    %rax,%r13
     81c:	0f 84 e5 00 00 00    	je     907 <kvs_iterate_sparse_xremap+0x167>
	r = dm_btree_find_lowest_key(&(kvxremap->info), kvxremap->root, &lowest);
     822:	49 8d 4e 30          	lea    0x30(%r14),%rcx
     826:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
     82a:	49 8b 76 68          	mov    0x68(%r14),%rsi
     82e:	48 89 fa             	mov    %rdi,%rdx
     831:	48 89 cf             	mov    %rcx,%rdi
     834:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
     838:	e8 00 00 00 00       	callq  83d <kvs_iterate_sparse_xremap+0x9d>
	if (r <= 0)
     83d:	85 c0                	test   %eax,%eax
	r = dm_btree_find_lowest_key(&(kvxremap->info), kvxremap->root, &lowest);
     83f:	41 89 c7             	mov    %eax,%r15d
	if (r <= 0)
     842:	0f 8e bf 00 00 00    	jle    907 <kvs_iterate_sparse_xremap+0x167>
	r = dm_btree_find_highest_key(&(kvxremap->info), kvxremap->root, &highest);
     848:	4c 8d 4d c8          	lea    -0x38(%rbp),%r9
     84c:	49 8b 76 68          	mov    0x68(%r14),%rsi
     850:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
     854:	4c 89 ca             	mov    %r9,%rdx
     857:	e8 00 00 00 00       	callq  85c <kvs_iterate_sparse_xremap+0xbc>
	if (r <= 0)
     85c:	85 c0                	test   %eax,%eax
	r = dm_btree_find_highest_key(&(kvxremap->info), kvxremap->root, &highest);
     85e:	41 89 c7             	mov    %eax,%r15d
	if (r <= 0)
     861:	0f 8e a0 00 00 00    	jle    907 <kvs_iterate_sparse_xremap+0x167>
	if(tdc->gc_last_fp >= highest || tdc->gc_last_fp <= lowest)
     867:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
     86b:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
     86f:	48 8b 90 38 02 00 00 	mov    0x238(%rax),%rdx
     876:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     87a:	48 39 c2             	cmp    %rax,%rdx
     87d:	73 09                	jae    888 <kvs_iterate_sparse_xremap+0xe8>
     87f:	48 39 f2             	cmp    %rsi,%rdx
     882:	0f 87 4c 01 00 00    	ja     9d4 <kvs_iterate_sparse_xremap+0x234>
		tdc->gc_last_fp = lowest;
     888:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
     88c:	48 89 b1 38 02 00 00 	mov    %rsi,0x238(%rcx)
	lowest = tdc->gc_last_fp;
     893:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	while (lowest <= highest) {
     897:	48 39 f0             	cmp    %rsi,%rax
     89a:	0f 82 20 01 00 00    	jb     9c0 <kvs_iterate_sparse_xremap+0x220>
		r = dm_btree_lookup_next(&(kvxremap->info), kvxremap->root,
     8a0:	49 8b 76 68          	mov    0x68(%r14),%rsi
     8a4:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
     8a8:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
     8ac:	49 89 d8             	mov    %rbx,%r8
     8af:	48 89 ca             	mov    %rcx,%rdx
     8b2:	e8 00 00 00 00       	callq  8b7 <kvs_iterate_sparse_xremap+0x117>
     8b7:	41 89 c7             	mov    %eax,%r15d
		lowest++;
     8ba:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
		if (r || is_deleted_x_entry(entry, kvs->ksize + kvs->vsize))
     8be:	45 85 ff             	test   %r15d,%r15d
		lowest++;
     8c1:	48 8d 70 01          	lea    0x1(%rax),%rsi
     8c5:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
		if (r || is_deleted_x_entry(entry, kvs->ksize + kvs->vsize))
     8c9:	75 27                	jne    8f2 <kvs_iterate_sparse_xremap+0x152>
     8cb:	45 8b 5e 04          	mov    0x4(%r14),%r11d
     8cf:	41 8b 0e             	mov    (%r14),%ecx
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
     8d2:	44 89 df             	mov    %r11d,%edi
     8d5:	01 cf                	add    %ecx,%edi
     8d7:	74 19                	je     8f2 <kvs_iterate_sparse_xremap+0x152>
     8d9:	80 3b 6b             	cmpb   $0x6b,(%rbx)
     8dc:	75 79                	jne    957 <kvs_iterate_sparse_xremap+0x1b7>
	int i = 0;
     8de:	31 c0                	xor    %eax,%eax
     8e0:	eb 09                	jmp    8eb <kvs_iterate_sparse_xremap+0x14b>
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
     8e2:	48 63 d0             	movslq %eax,%rdx
     8e5:	80 3c 13 6b          	cmpb   $0x6b,(%rbx,%rdx,1)
     8e9:	75 6c                	jne    957 <kvs_iterate_sparse_xremap+0x1b7>
		i++;
     8eb:	83 c0 01             	add    $0x1,%eax
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
     8ee:	39 c7                	cmp    %eax,%edi
     8f0:	75 f0                	jne    8e2 <kvs_iterate_sparse_xremap+0x142>
     8f2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     8f6:	eb 9f                	jmp    897 <kvs_iterate_sparse_xremap+0xf7>
			tdc->gc_last_fp = lowest;
     8f8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
     8fc:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
     900:	48 89 81 38 02 00 00 	mov    %rax,0x238(%rcx)
	kfree(value);
     907:	4c 89 ef             	mov    %r13,%rdi
     90a:	e8 00 00 00 00       	callq  90f <kvs_iterate_sparse_xremap+0x16f>
	kfree(key);
     90f:	4c 89 e7             	mov    %r12,%rdi
     912:	e8 00 00 00 00       	callq  917 <kvs_iterate_sparse_xremap+0x177>
	kfree(entry);
     917:	48 89 df             	mov    %rbx,%rdi
     91a:	e8 00 00 00 00       	callq  91f <kvs_iterate_sparse_xremap+0x17f>
}
     91f:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
     923:	65 48 33 1c 25 28 00 	xor    %gs:0x28,%rbx
     92a:	00 00 
     92c:	44 89 f8             	mov    %r15d,%eax
     92f:	0f 85 af 00 00 00    	jne    9e4 <kvs_iterate_sparse_xremap+0x244>
     935:	48 83 c4 40          	add    $0x40,%rsp
     939:	5b                   	pop    %rbx
     93a:	41 5c                	pop    %r12
     93c:	41 5d                	pop    %r13
     93e:	41 5e                	pop    %r14
     940:	41 5f                	pop    %r15
     942:	5d                   	pop    %rbp
     943:	c3                   	retq   
	char *entry, *key = NULL, *value = NULL;
     944:	45 31 ed             	xor    %r13d,%r13d
     947:	45 31 e4             	xor    %r12d,%r12d
	int r = 0;
     94a:	45 31 ff             	xor    %r15d,%r15d
     94d:	eb b8                	jmp    907 <kvs_iterate_sparse_xremap+0x167>
	char *entry, *key = NULL, *value = NULL;
     94f:	45 31 ed             	xor    %r13d,%r13d
	int r = 0;
     952:	45 31 ff             	xor    %r15d,%r15d
     955:	eb b0                	jmp    907 <kvs_iterate_sparse_xremap+0x167>
		memcpy(key, entry, kvs->ksize);
     957:	45 89 d8             	mov    %r11d,%r8d
     95a:	48 89 de             	mov    %rbx,%rsi
     95d:	4c 89 e7             	mov    %r12,%rdi
     960:	4c 89 c2             	mov    %r8,%rdx
     963:	89 4d ac             	mov    %ecx,-0x54(%rbp)
     966:	44 89 5d a8          	mov    %r11d,-0x58(%rbp)
     96a:	4c 89 45 a0          	mov    %r8,-0x60(%rbp)
     96e:	e8 00 00 00 00       	callq  973 <kvs_iterate_sparse_xremap+0x1d3>
		memcpy(value, (void *)(entry + kvs->ksize), kvs->vsize);
     973:	4c 8b 45 a0          	mov    -0x60(%rbp),%r8
     977:	8b 55 ac             	mov    -0x54(%rbp),%edx
     97a:	4c 89 ef             	mov    %r13,%rdi
     97d:	4a 8d 34 03          	lea    (%rbx,%r8,1),%rsi
     981:	e8 00 00 00 00       	callq  986 <kvs_iterate_sparse_xremap+0x1e6>
		r = fn((void *)key, kvs->ksize, (void *)value,
     986:	44 8b 5d a8          	mov    -0x58(%rbp),%r11d
     98a:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
     98e:	4c 89 ea             	mov    %r13,%rdx
     991:	8b 4d ac             	mov    -0x54(%rbp),%ecx
     994:	4c 89 e7             	mov    %r12,%rdi
     997:	48 8b 45 98          	mov    -0x68(%rbp),%rax
     99b:	44 89 de             	mov    %r11d,%esi
     99e:	e8 00 00 00 00       	callq  9a3 <kvs_iterate_sparse_xremap+0x203>
		if (r == 1) {
     9a3:	83 f8 01             	cmp    $0x1,%eax
     9a6:	0f 84 4c ff ff ff    	je     8f8 <kvs_iterate_sparse_xremap+0x158>
		if (r)
     9ac:	85 c0                	test   %eax,%eax
     9ae:	75 2c                	jne    9dc <kvs_iterate_sparse_xremap+0x23c>
     9b0:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
     9b4:	45 31 ff             	xor    %r15d,%r15d
     9b7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
     9bb:	e9 d7 fe ff ff       	jmpq   897 <kvs_iterate_sparse_xremap+0xf7>
	tdc->gc_last_fp = 0;
     9c0:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
     9c4:	48 c7 80 38 02 00 00 	movq   $0x0,0x238(%rax)
     9cb:	00 00 00 00 
     9cf:	e9 33 ff ff ff       	jmpq   907 <kvs_iterate_sparse_xremap+0x167>
     9d4:	48 89 d6             	mov    %rdx,%rsi
     9d7:	e9 b7 fe ff ff       	jmpq   893 <kvs_iterate_sparse_xremap+0xf3>
		r = fn((void *)key, kvs->ksize, (void *)value,
     9dc:	41 89 c7             	mov    %eax,%r15d
     9df:	e9 23 ff ff ff       	jmpq   907 <kvs_iterate_sparse_xremap+0x167>
}
     9e4:	e8 00 00 00 00       	callq  9e9 <kvs_iterate_sparse_xremap+0x249>
     9e9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000009f0 <kvs_insert_sparse_xremap>:
{
     9f0:	e8 00 00 00 00       	callq  9f5 <kvs_insert_sparse_xremap+0x5>
     9f5:	55                   	push   %rbp
     9f6:	48 89 e5             	mov    %rsp,%rbp
     9f9:	41 57                	push   %r15
     9fb:	41 56                	push   %r14
     9fd:	41 55                	push   %r13
     9ff:	41 54                	push   %r12
     a01:	49 89 fd             	mov    %rdi,%r13
     a04:	53                   	push   %rbx
     a05:	4c 63 e2             	movslq %edx,%r12
     a08:	48 83 ec 28          	sub    $0x28,%rsp
     a0c:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
     a10:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
     a14:	65 48 8b 3c 25 28 00 	mov    %gs:0x28,%rdi
     a1b:	00 00 
     a1d:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
     a21:	31 ff                	xor    %edi,%edi
	if (ksize != kvs->ksize)
     a23:	45 39 65 04          	cmp    %r12d,0x4(%r13)
{
     a27:	44 89 45 b4          	mov    %r8d,-0x4c(%rbp)
	if (ksize != kvs->ksize)
     a2b:	0f 85 26 01 00 00    	jne    b57 <kvs_insert_sparse_xremap+0x167>
	if (vsize != kvs->vsize)
     a31:	45 39 45 00          	cmp    %r8d,0x0(%r13)
     a35:	0f 85 1c 01 00 00    	jne    b57 <kvs_insert_sparse_xremap+0x167>
	entry = kmalloc(kvxremap->entry_size, GFP_NOIO);
     a3b:	41 8b 7d 28          	mov    0x28(%r13),%edi
     a3f:	48 89 f3             	mov    %rsi,%rbx
     a42:	be 00 00 60 00       	mov    $0x600000,%esi
     a47:	e8 00 00 00 00       	callq  a4c <kvs_insert_sparse_xremap+0x5c>
	if (!entry)
     a4c:	48 85 c0             	test   %rax,%rax
     a4f:	49 89 c7             	mov    %rax,%r15
     a52:	0f 84 06 01 00 00    	je     b5e <kvs_insert_sparse_xremap+0x16e>
	key_val = (*(uint64_t *)key);
     a58:	48 8b 03             	mov    (%rbx),%rax
     a5b:	49 8d 5d 30          	lea    0x30(%r13),%rbx
	for (i = 0; i <= kvxremap->lpc_max; i++) {
     a5f:	45 31 f6             	xor    %r14d,%r14d
	key_val = (*(uint64_t *)key);
     a62:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
		r = dm_btree_lookup(&(kvxremap->info), kvxremap->root, &key_val,
     a66:	49 8b 75 68          	mov    0x68(%r13),%rsi
     a6a:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
     a6e:	4c 89 f9             	mov    %r15,%rcx
     a71:	48 89 df             	mov    %rbx,%rdi
     a74:	e8 00 00 00 00       	callq  a79 <kvs_insert_sparse_xremap+0x89>
		if (r == -ENODATA ||
     a79:	83 f8 c3             	cmp    $0xffffffc3,%eax
     a7c:	74 23                	je     aa1 <kvs_insert_sparse_xremap+0xb1>
			is_deleted_x_entry(entry, kvxremap->entry_size)) {
     a7e:	41 8b 75 28          	mov    0x28(%r13),%esi
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
     a82:	85 f6                	test   %esi,%esi
     a84:	74 1b                	je     aa1 <kvs_insert_sparse_xremap+0xb1>
     a86:	41 80 3f 6b          	cmpb   $0x6b,(%r15)
     a8a:	75 7e                	jne    b0a <kvs_insert_sparse_xremap+0x11a>
	int i = 0;
     a8c:	31 d2                	xor    %edx,%edx
     a8e:	eb 0a                	jmp    a9a <kvs_insert_sparse_xremap+0xaa>
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
     a90:	48 63 ca             	movslq %edx,%rcx
     a93:	41 80 3c 0f 6b       	cmpb   $0x6b,(%r15,%rcx,1)
     a98:	75 70                	jne    b0a <kvs_insert_sparse_xremap+0x11a>
		i++;
     a9a:	83 c2 01             	add    $0x1,%edx
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
     a9d:	39 d6                	cmp    %edx,%esi
     a9f:	75 ef                	jne    a90 <kvs_insert_sparse_xremap+0xa0>
     aa1:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
     aa5:	4c 89 e2             	mov    %r12,%rdx
     aa8:	4c 89 ff             	mov    %r15,%rdi
     aab:	e8 00 00 00 00       	callq  ab0 <kvs_insert_sparse_xremap+0xc0>
			memcpy(entry + ksize, value, vsize);
     ab0:	48 63 55 b4          	movslq -0x4c(%rbp),%rdx
     ab4:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
     ab8:	4b 8d 3c 27          	lea    (%r15,%r12,1),%rdi
     abc:	e8 00 00 00 00       	callq  ac1 <kvs_insert_sparse_xremap+0xd1>
			r = dm_btree_insert(&(kvxremap->info), kvxremap->root,
     ac1:	49 8b 75 68          	mov    0x68(%r13),%rsi
     ac5:	4d 8d 45 68          	lea    0x68(%r13),%r8
     ac9:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
     acd:	4c 89 f9             	mov    %r15,%rcx
     ad0:	48 89 df             	mov    %rbx,%rdi
     ad3:	e8 00 00 00 00       	callq  ad8 <kvs_insert_sparse_xremap+0xe8>
			kfree(entry);
     ad8:	4c 89 ff             	mov    %r15,%rdi
     adb:	e8 00 00 00 00       	callq  ae0 <kvs_insert_sparse_xremap+0xf0>
			if (i > kvxremap->lpc_cur) {
     ae0:	45 39 75 70          	cmp    %r14d,0x70(%r13)
     ae4:	0f 82 80 00 00 00    	jb     b6a <kvs_insert_sparse_xremap+0x17a>
			return 0;
     aea:	31 c0                	xor    %eax,%eax
}
     aec:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
     af0:	65 48 33 1c 25 28 00 	xor    %gs:0x28,%rbx
     af7:	00 00 
     af9:	75 6a                	jne    b65 <kvs_insert_sparse_xremap+0x175>
     afb:	48 83 c4 28          	add    $0x28,%rsp
     aff:	5b                   	pop    %rbx
     b00:	41 5c                	pop    %r12
     b02:	41 5d                	pop    %r13
     b04:	41 5e                	pop    %r14
     b06:	41 5f                	pop    %r15
     b08:	5d                   	pop    %rbp
     b09:	c3                   	retq   
		} else if (r >= 0) {
     b0a:	85 c0                	test   %eax,%eax
     b0c:	78 39                	js     b47 <kvs_insert_sparse_xremap+0x157>
	for (i = 0; i <= kvxremap->lpc_max; i++) {
     b0e:	41 8b 75 74          	mov    0x74(%r13),%esi
     b12:	41 83 c6 01          	add    $0x1,%r14d
			key_val++;
     b16:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
	for (i = 0; i <= kvxremap->lpc_max; i++) {
     b1b:	44 39 f6             	cmp    %r14d,%esi
     b1e:	0f 83 42 ff ff ff    	jae    a66 <kvs_insert_sparse_xremap+0x76>
	DMINFO("Linear probing hard limit hit for insert hence"
     b24:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
     b2b:	e8 00 00 00 00       	callq  b30 <kvs_insert_sparse_xremap+0x140>
	kvxremap->lpc_cur = kvxremap->lpc_max;
     b30:	41 8b 45 74          	mov    0x74(%r13),%eax
	kfree(entry);
     b34:	4c 89 ff             	mov    %r15,%rdi
	kvxremap->lpc_cur = kvxremap->lpc_max;
     b37:	41 89 45 70          	mov    %eax,0x70(%r13)
	kfree(entry);
     b3b:	e8 00 00 00 00       	callq  b40 <kvs_insert_sparse_xremap+0x150>
	return -ENOSPC;
     b40:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
     b45:	eb a5                	jmp    aec <kvs_insert_sparse_xremap+0xfc>
			kfree(entry);
     b47:	4c 89 ff             	mov    %r15,%rdi
     b4a:	89 45 c0             	mov    %eax,-0x40(%rbp)
     b4d:	e8 00 00 00 00       	callq  b52 <kvs_insert_sparse_xremap+0x162>
			return r;
     b52:	8b 45 c0             	mov    -0x40(%rbp),%eax
     b55:	eb 95                	jmp    aec <kvs_insert_sparse_xremap+0xfc>
		return -EINVAL;
     b57:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
     b5c:	eb 8e                	jmp    aec <kvs_insert_sparse_xremap+0xfc>
		return -ENOMEM;
     b5e:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
     b63:	eb 87                	jmp    aec <kvs_insert_sparse_xremap+0xfc>
}
     b65:	e8 00 00 00 00       	callq  b6a <kvs_insert_sparse_xremap+0x17a>
				DMINFO("Changing linear probing to %d", i);
     b6a:	44 89 f6             	mov    %r14d,%esi
     b6d:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
     b74:	e8 00 00 00 00       	callq  b79 <kvs_insert_sparse_xremap+0x189>
				kvxremap->lpc_cur = i;
     b79:	45 89 75 70          	mov    %r14d,0x70(%r13)
			return 0;
     b7d:	31 c0                	xor    %eax,%eax
     b7f:	e9 68 ff ff ff       	jmpq   aec <kvs_insert_sparse_xremap+0xfc>
     b84:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
     b8b:	00 00 00 00 
     b8f:	90                   	nop

0000000000000b90 <__commit_transaction>:
{
     b90:	e8 00 00 00 00       	callq  b95 <__commit_transaction+0x5>
     b95:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
     b9a:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
     b9e:	41 ff 72 f8          	pushq  -0x8(%r10)
     ba2:	55                   	push   %rbp
     ba3:	48 89 e5             	mov    %rsp,%rbp
     ba6:	41 55                	push   %r13
     ba8:	41 54                	push   %r12
     baa:	41 52                	push   %r10
     bac:	53                   	push   %rbx
     bad:	48 89 fb             	mov    %rdi,%rbx
     bb0:	41 89 f4             	mov    %esi,%r12d
     bb3:	48 83 ec 30          	sub    $0x30,%rsp
	r = dm_sm_commit(md->data_sm);
     bb7:	48 8b 7f 20          	mov    0x20(%rdi),%rdi
{
     bbb:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
     bc2:	00 00 
     bc4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
     bc8:	31 c0                	xor    %eax,%eax
	return sm->set_count(sm, b, count);
}

static inline int dm_sm_commit(struct dm_space_map *sm)
{
	return sm->commit(sm);
     bca:	48 8b 47 38          	mov    0x38(%rdi),%rax
     bce:	e8 00 00 00 00       	callq  bd3 <__commit_transaction+0x43>
	if (r < 0)
     bd3:	85 c0                	test   %eax,%eax
     bd5:	78 4c                	js     c23 <__commit_transaction+0x93>
	r = dm_tm_pre_commit(md->tm);
     bd7:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
     bdb:	e8 00 00 00 00       	callq  be0 <__commit_transaction+0x50>
	if (r < 0)
     be0:	85 c0                	test   %eax,%eax
     be2:	78 3f                	js     c23 <__commit_transaction+0x93>
	r = dm_sm_root_size(md->meta_sm, &metadata_len);
     be4:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
	return sm->new_block(sm, b);
}

static inline int dm_sm_root_size(struct dm_space_map *sm, size_t *result)
{
	return sm->root_size(sm, result);
     be8:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
     bec:	48 8b 47 58          	mov    0x58(%rdi),%rax
     bf0:	e8 00 00 00 00       	callq  bf5 <__commit_transaction+0x65>
	if (r < 0)
     bf5:	85 c0                	test   %eax,%eax
     bf7:	78 2a                	js     c23 <__commit_transaction+0x93>
	r = dm_sm_root_size(md->data_sm, &data_len);
     bf9:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
     bfd:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
     c01:	48 8b 47 58          	mov    0x58(%rdi),%rax
     c05:	e8 00 00 00 00       	callq  c0a <__commit_transaction+0x7a>
	if (r < 0)
     c0a:	85 c0                	test   %eax,%eax
     c0c:	78 15                	js     c23 <__commit_transaction+0x93>
	r = dm_bm_write_lock(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
     c0e:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
     c12:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
     c16:	31 d2                	xor    %edx,%edx
     c18:	31 f6                	xor    %esi,%esi
     c1a:	e8 00 00 00 00       	callq  c1f <__commit_transaction+0x8f>
	if (r)
     c1f:	85 c0                	test   %eax,%eax
     c21:	74 24                	je     c47 <__commit_transaction+0xb7>
}
     c23:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
     c27:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
     c2e:	00 00 
     c30:	0f 85 da 00 00 00    	jne    d10 <__commit_transaction+0x180>
     c36:	48 83 c4 30          	add    $0x30,%rsp
     c3a:	5b                   	pop    %rbx
     c3b:	41 5a                	pop    %r10
     c3d:	41 5c                	pop    %r12
     c3f:	41 5d                	pop    %r13
     c41:	5d                   	pop    %rbp
     c42:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
     c46:	c3                   	retq   
	disk_super = dm_block_data(sblock);
     c47:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
     c4b:	e8 00 00 00 00       	callq  c50 <__commit_transaction+0xc0>
	if (clean_shutdown_flag)
     c50:	45 84 e4             	test   %r12b,%r12b
	disk_super = dm_block_data(sblock);
     c53:	49 89 c5             	mov    %rax,%r13
	if (clean_shutdown_flag)
     c56:	0f 85 97 00 00 00    	jne    cf3 <__commit_transaction+0x163>
		disk_super->flags &= ~(1 << CLEAN_SHUTDOWN);
     c5c:	83 60 10 fe          	andl   $0xfffffffe,0x10(%rax)
	if (md->kvs_sparse) {
     c60:	48 8b 43 38          	mov    0x38(%rbx),%rax
     c64:	48 85 c0             	test   %rax,%rax
     c67:	74 16                	je     c7f <__commit_transaction+0xef>
		disk_super->hash_pbn_root = cpu_to_le64(md->kvs_sparse->root);
     c69:	48 8b 40 68          	mov    0x68(%rax),%rax
     c6d:	49 89 85 2d 01 00 00 	mov    %rax,0x12d(%r13)
		disk_super->lpc_last = md->kvs_sparse->lpc_cur;
     c74:	48 8b 43 38          	mov    0x38(%rbx),%rax
     c78:	8b 40 70             	mov    0x70(%rax),%eax
     c7b:	41 88 45 2c          	mov    %al,0x2c(%r13)
	r = dm_sm_copy_root(md->meta_sm,
     c7f:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
			    &disk_super->metadata_space_map_root, metadata_len);
     c83:	49 8d 75 2d          	lea    0x2d(%r13),%rsi
}

static inline int dm_sm_copy_root(struct dm_space_map *sm, void *copy_to_here_le, size_t len)
{
	return sm->copy_root(sm, copy_to_here_le, len);
     c87:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
     c8b:	48 8b 47 60          	mov    0x60(%rdi),%rax
     c8f:	e8 00 00 00 00       	callq  c94 <__commit_transaction+0x104>
	if (r < 0)
     c94:	85 c0                	test   %eax,%eax
     c96:	78 64                	js     cfc <__commit_transaction+0x16c>
	r = dm_sm_copy_root(md->data_sm, &disk_super->data_space_map_root,
     c98:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
     c9c:	49 8d b5 ad 00 00 00 	lea    0xad(%r13),%rsi
     ca3:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
     ca7:	48 8b 47 60          	mov    0x60(%rdi),%rax
     cab:	e8 00 00 00 00       	callq  cb0 <__commit_transaction+0x120>
	if (r < 0)
     cb0:	85 c0                	test   %eax,%eax
     cb2:	78 48                	js     cfc <__commit_transaction+0x16c>
     cb4:	48 8b 53 48          	mov    0x48(%rbx),%rdx
     cb8:	48 8b 43 40          	mov    0x40(%rbx),%rax
	disk_super->csum = cpu_to_le32(dm_bm_checksum(&disk_super->flags,
     cbc:	49 8d 7d 10          	lea    0x10(%r13),%rdi
     cc0:	be 51 01 00 00       	mov    $0x151,%esi
     cc5:	49 89 95 45 01 00 00 	mov    %rdx,0x145(%r13)
     ccc:	49 89 85 3d 01 00 00 	mov    %rax,0x13d(%r13)
     cd3:	ba 87 e4 02 00       	mov    $0x2e487,%edx
     cd8:	e8 00 00 00 00       	callq  cdd <__commit_transaction+0x14d>
     cdd:	41 89 45 00          	mov    %eax,0x0(%r13)
	r = dm_tm_commit(md->tm, sblock);
     ce1:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
     ce5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
     ce9:	e8 00 00 00 00       	callq  cee <__commit_transaction+0x15e>
     cee:	e9 30 ff ff ff       	jmpq   c23 <__commit_transaction+0x93>
		disk_super->flags |= (1 << CLEAN_SHUTDOWN);
     cf3:	83 48 10 01          	orl    $0x1,0x10(%rax)
     cf7:	e9 64 ff ff ff       	jmpq   c60 <__commit_transaction+0xd0>
	dm_bm_unlock(sblock);
     cfc:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
     d00:	89 45 bc             	mov    %eax,-0x44(%rbp)
     d03:	e8 00 00 00 00       	callq  d08 <__commit_transaction+0x178>
     d08:	8b 45 bc             	mov    -0x44(%rbp),%eax
	return r;
     d0b:	e9 13 ff ff ff       	jmpq   c23 <__commit_transaction+0x93>
}
     d10:	e8 00 00 00 00       	callq  d15 <__commit_transaction+0x185>
     d15:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
     d1c:	00 00 00 00 

0000000000000d20 <flush_meta_xremap>:
{
     d20:	e8 00 00 00 00       	callq  d25 <flush_meta_xremap+0x5>
     d25:	55                   	push   %rbp
	r = __commit_transaction(md, clean_shutdown_flag);
     d26:	31 f6                	xor    %esi,%esi
{
     d28:	48 89 e5             	mov    %rsp,%rbp
     d2b:	53                   	push   %rbx
     d2c:	48 89 fb             	mov    %rdi,%rbx
	r = __commit_transaction(md, clean_shutdown_flag);
     d2f:	e8 5c fe ff ff       	callq  b90 <__commit_transaction>
	if (r < 0)
     d34:	85 c0                	test   %eax,%eax
     d36:	78 08                	js     d40 <flush_meta_xremap+0x20>
	r = __begin_transaction(md);
     d38:	48 89 df             	mov    %rbx,%rdi
     d3b:	e8 70 f6 ff ff       	callq  3b0 <__begin_transaction>
}
     d40:	5b                   	pop    %rbx
     d41:	5d                   	pop    %rbp
     d42:	c3                   	retq   
     d43:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
     d4a:	00 00 00 00 
     d4e:	66 90                	xchg   %ax,%ax

0000000000000d50 <exit_meta_xremap>:
{
     d50:	e8 00 00 00 00       	callq  d55 <exit_meta_xremap+0x5>
     d55:	55                   	push   %rbp
	ret = __commit_transaction(md, clean_shutdown_flag);
     d56:	be 01 00 00 00       	mov    $0x1,%esi
{
     d5b:	48 89 e5             	mov    %rsp,%rbp
     d5e:	53                   	push   %rbx
     d5f:	48 89 fb             	mov    %rdi,%rbx
	ret = __commit_transaction(md, clean_shutdown_flag);
     d62:	e8 29 fe ff ff       	callq  b90 <__commit_transaction>
	if (ret < 0)
     d67:	85 c0                	test   %eax,%eax
     d69:	78 6e                	js     dd9 <exit_meta_xremap+0x89>
	dm_sm_destroy(md->data_sm);
     d6b:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
	sm->destroy(sm);
     d6f:	48 8b 07             	mov    (%rdi),%rax
     d72:	e8 00 00 00 00       	callq  d77 <exit_meta_xremap+0x27>
	dm_tm_destroy(md->tm);
     d77:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
     d7b:	e8 00 00 00 00       	callq  d80 <exit_meta_xremap+0x30>
	dm_sm_destroy(md->meta_sm);
     d80:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
     d84:	48 8b 07             	mov    (%rdi),%rax
     d87:	e8 00 00 00 00       	callq  d8c <exit_meta_xremap+0x3c>
	dm_block_manager_destroy(md->meta_bm);
     d8c:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
     d90:	e8 00 00 00 00       	callq  d95 <exit_meta_xremap+0x45>
	if (md->smap)
     d95:	48 8b 3b             	mov    (%rbx),%rdi
     d98:	48 85 ff             	test   %rdi,%rdi
     d9b:	74 05                	je     da2 <exit_meta_xremap+0x52>
		vfree(md->smap);
     d9d:	e8 00 00 00 00       	callq  da2 <exit_meta_xremap+0x52>
	if (md->kvs_linear) {
     da2:	48 8b 7b 30          	mov    0x30(%rbx),%rdi
     da6:	48 85 ff             	test   %rdi,%rdi
     da9:	74 1a                	je     dc5 <exit_meta_xremap+0x75>
		if (md->kvs_linear->store)
     dab:	48 8b 47 30          	mov    0x30(%rdi),%rax
     daf:	48 85 c0             	test   %rax,%rax
     db2:	74 0c                	je     dc0 <exit_meta_xremap+0x70>
			vfree(md->kvs_linear->store);
     db4:	48 89 c7             	mov    %rax,%rdi
     db7:	e8 00 00 00 00       	callq  dbc <exit_meta_xremap+0x6c>
     dbc:	48 8b 7b 30          	mov    0x30(%rbx),%rdi
		kfree(md->kvs_linear);
     dc0:	e8 00 00 00 00       	callq  dc5 <exit_meta_xremap+0x75>
	kfree(md->kvs_sparse);
     dc5:	48 8b 7b 38          	mov    0x38(%rbx),%rdi
     dc9:	e8 00 00 00 00       	callq  dce <exit_meta_xremap+0x7e>
	kfree(md);
     dce:	48 89 df             	mov    %rbx,%rdi
     dd1:	e8 00 00 00 00       	callq  dd6 <exit_meta_xremap+0x86>
}
     dd6:	5b                   	pop    %rbx
     dd7:	5d                   	pop    %rbp
     dd8:	c3                   	retq   
		DMWARN("%s: __commit_transaction() failed, error = %d.",
     dd9:	89 c2                	mov    %eax,%edx
     ddb:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
     de2:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
     de9:	e8 00 00 00 00       	callq  dee <exit_meta_xremap+0x9e>
     dee:	e9 78 ff ff ff       	jmpq   d6b <exit_meta_xremap+0x1b>
     df3:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
     dfa:	00 00 00 00 
     dfe:	66 90                	xchg   %ax,%ax

0000000000000e00 <kvs_create_sparse_xremap>:
{
     e00:	e8 00 00 00 00       	callq  e05 <kvs_create_sparse_xremap+0x5>
	if (!vsize || !ksize)
     e05:	85 d2                	test   %edx,%edx
     e07:	0f 84 f5 00 00 00    	je     f02 <kvs_create_sparse_xremap+0x102>
     e0d:	85 f6                	test   %esi,%esi
     e0f:	0f 84 ed 00 00 00    	je     f02 <kvs_create_sparse_xremap+0x102>
{
     e15:	55                   	push   %rbp
     e16:	48 89 e5             	mov    %rsp,%rbp
     e19:	41 57                	push   %r15
     e1b:	41 56                	push   %r14
     e1d:	41 55                	push   %r13
     e1f:	41 54                	push   %r12
     e21:	49 89 ff             	mov    %rdi,%r15
     e24:	53                   	push   %rbx
     e25:	41 89 d4             	mov    %edx,%r12d
     e28:	41 89 f6             	mov    %esi,%r14d
			return kmem_cache_alloc_trace(kmalloc_caches[index],
     e2b:	ba 78 00 00 00       	mov    $0x78,%edx
     e30:	be 00 00 60 00       	mov    $0x600000,%esi
     e35:	45 89 c5             	mov    %r8d,%r13d
     e38:	48 83 ec 08          	sub    $0x8,%rsp
     e3c:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # e43 <kvs_create_sparse_xremap+0x43>
     e43:	e8 00 00 00 00       	callq  e48 <kvs_create_sparse_xremap+0x48>
     e48:	48 89 c3             	mov    %rax,%rbx
		return ERR_PTR(-ENOMEM);
     e4b:	48 c7 c0 f4 ff ff ff 	mov    $0xfffffffffffffff4,%rax
	if (!kvs)
     e52:	48 85 db             	test   %rbx,%rbx
     e55:	0f 84 98 00 00 00    	je     ef3 <kvs_create_sparse_xremap+0xf3>
	kvs->info.tm = md->tm;
     e5b:	49 8b 47 18          	mov    0x18(%r15),%rax
	kvs->entry_size = vsize + ksize;
     e5f:	43 8d 14 34          	lea    (%r12,%r14,1),%edx
	if (!unformatted) {
     e63:	45 84 ed             	test   %r13b,%r13b
	kvs->ckvs.vsize = vsize;
     e66:	44 89 23             	mov    %r12d,(%rbx)
	kvs->ckvs.ksize = ksize;
     e69:	44 89 73 04          	mov    %r14d,0x4(%rbx)
	kvs->entry_size = vsize + ksize;
     e6d:	89 53 28             	mov    %edx,0x28(%rbx)
	kvs->info.levels = 1;
     e70:	c7 43 38 01 00 00 00 	movl   $0x1,0x38(%rbx)
	kvs->info.tm = md->tm;
     e77:	48 89 43 30          	mov    %rax,0x30(%rbx)
	kvs->lpc_cur = 0;
     e7b:	48 b8 00 00 00 00 05 	movabs $0x500000000,%rax
     e82:	00 00 00 
	kvs->info.value_type.context = NULL;
     e85:	48 c7 43 40 00 00 00 	movq   $0x0,0x40(%rbx)
     e8c:	00 
	kvs->info.value_type.size = kvs->entry_size;
     e8d:	89 53 48             	mov    %edx,0x48(%rbx)
	kvs->info.value_type.inc = NULL;
     e90:	48 c7 43 50 00 00 00 	movq   $0x0,0x50(%rbx)
     e97:	00 
	kvs->info.value_type.dec = NULL;
     e98:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
     e9f:	00 
	kvs->info.value_type.equal = NULL;
     ea0:	48 c7 43 60 00 00 00 	movq   $0x0,0x60(%rbx)
     ea7:	00 
	kvs->lpc_cur = 0;
     ea8:	48 89 43 70          	mov    %rax,0x70(%rbx)
	if (!unformatted) {
     eac:	74 5c                	je     f0a <kvs_create_sparse_xremap+0x10a>
		r = dm_btree_empty(&(kvs->info), &(kvs->root), 2);
     eae:	48 8d 73 68          	lea    0x68(%rbx),%rsi
     eb2:	48 8d 7b 30          	lea    0x30(%rbx),%rdi
     eb6:	ba 02 00 00 00       	mov    $0x2,%edx
     ebb:	e8 00 00 00 00       	callq  ec0 <kvs_create_sparse_xremap+0xc0>
		if (r < 0) {
     ec0:	85 c0                	test   %eax,%eax
     ec2:	78 74                	js     f38 <kvs_create_sparse_xremap+0x138>
		flush_meta_xremap(md);
     ec4:	4c 89 ff             	mov    %r15,%rdi
     ec7:	e8 54 fe ff ff       	callq  d20 <flush_meta_xremap>
		kvs->ckvs.kvs_insert = kvs_insert_sparse_xremap;
     ecc:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
     ed3:	00 
		kvs->ckvs.kvs_lookup = kvs_lookup_sparse_xremap;
     ed4:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
     edb:	00 
		kvs->ckvs.kvs_delete = kvs_delete_sparse_xremap;
     edc:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
     ee3:	00 
		kvs->ckvs.kvs_iterate = kvs_iterate_sparse_xremap;
     ee4:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
     eeb:	00 
		md->kvs_sparse = kvs;
     eec:	49 89 5f 38          	mov    %rbx,0x38(%r15)
	return &(kvs->ckvs);
     ef0:	48 89 d8             	mov    %rbx,%rax
}
     ef3:	48 83 c4 08          	add    $0x8,%rsp
     ef7:	5b                   	pop    %rbx
     ef8:	41 5c                	pop    %r12
     efa:	41 5d                	pop    %r13
     efc:	41 5e                	pop    %r14
     efe:	41 5f                	pop    %r15
     f00:	5d                   	pop    %rbp
     f01:	c3                   	retq   
		return ERR_PTR(-ENOTSUPP);
     f02:	48 c7 c0 f4 fd ff ff 	mov    $0xfffffffffffffdf4,%rax
}
     f09:	c3                   	retq   
		md->kvs_sparse = kvs;
     f0a:	49 89 5f 38          	mov    %rbx,0x38(%r15)
		__begin_transaction(md);
     f0e:	4c 89 ff             	mov    %r15,%rdi
		kvs->ckvs.kvs_insert = kvs_insert_sparse_xremap;
     f11:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
     f18:	00 
		kvs->ckvs.kvs_lookup = kvs_lookup_sparse_xremap;
     f19:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
     f20:	00 
		kvs->ckvs.kvs_delete = kvs_delete_sparse_xremap;
     f21:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
     f28:	00 
		kvs->ckvs.kvs_iterate = kvs_iterate_sparse_xremap;
     f29:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
     f30:	00 
		__begin_transaction(md);
     f31:	e8 7a f4 ff ff       	callq  3b0 <__begin_transaction>
     f36:	eb b8                	jmp    ef0 <kvs_create_sparse_xremap+0xf0>
			kvs = ERR_PTR(r);
     f38:	48 98                	cltq   
	kfree(kvs);
     f3a:	48 89 c7             	mov    %rax,%rdi
     f3d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
     f41:	e8 00 00 00 00       	callq  f46 <kvs_create_sparse_xremap+0x146>
     f46:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
     f4a:	eb a7                	jmp    ef3 <kvs_create_sparse_xremap+0xf3>
     f4c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000000f50 <kvs_create_linear_xremap>:
{
     f50:	e8 00 00 00 00       	callq  f55 <kvs_create_linear_xremap+0x5>
     f55:	55                   	push   %rbp
     f56:	48 89 e5             	mov    %rsp,%rbp
     f59:	41 57                	push   %r15
     f5b:	41 56                	push   %r14
     f5d:	41 55                	push   %r13
     f5f:	41 54                	push   %r12
     f61:	53                   	push   %rbx
     f62:	48 83 ec 10          	sub    $0x10,%rsp
	if (!vsize || !ksize || !kmax)
     f66:	85 c9                	test   %ecx,%ecx
     f68:	41 0f 94 c0          	sete   %r8b
	if (ksize != 8)
     f6c:	83 fe 08             	cmp    $0x8,%esi
     f6f:	0f 95 c0             	setne  %al
     f72:	41 08 c0             	or     %al,%r8b
     f75:	75 04                	jne    f7b <kvs_create_linear_xremap+0x2b>
     f77:	85 d2                	test   %edx,%edx
     f79:	75 19                	jne    f94 <kvs_create_linear_xremap+0x44>
		return ERR_PTR(-ENOTSUPP);
     f7b:	49 c7 c5 f4 fd ff ff 	mov    $0xfffffffffffffdf4,%r13
}
     f82:	48 83 c4 10          	add    $0x10,%rsp
     f86:	4c 89 e8             	mov    %r13,%rax
     f89:	5b                   	pop    %rbx
     f8a:	41 5c                	pop    %r12
     f8c:	41 5d                	pop    %r13
     f8e:	41 5e                	pop    %r14
     f90:	41 5f                	pop    %r15
     f92:	5d                   	pop    %rbp
     f93:	c3                   	retq   
	if (md->kvs_linear)
     f94:	48 83 7f 30 00       	cmpq   $0x0,0x30(%rdi)
		return ERR_PTR(-EBUSY);
     f99:	49 c7 c5 f0 ff ff ff 	mov    $0xfffffffffffffff0,%r13
	if (md->kvs_linear)
     fa0:	75 e0                	jne    f82 <kvs_create_linear_xremap+0x32>
     fa2:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
     fa6:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # fad <kvs_create_linear_xremap+0x5d>
     fad:	41 89 d4             	mov    %edx,%r12d
     fb0:	be 00 00 60 00       	mov    $0x600000,%esi
     fb5:	ba 38 00 00 00       	mov    $0x38,%edx
     fba:	89 cb                	mov    %ecx,%ebx
		return ERR_PTR(-ENOMEM);
     fbc:	49 83 c5 04          	add    $0x4,%r13
     fc0:	e8 00 00 00 00       	callq  fc5 <kvs_create_linear_xremap+0x75>
	if (!kvs)
     fc5:	48 85 c0             	test   %rax,%rax
     fc8:	49 89 c7             	mov    %rax,%r15
     fcb:	74 b5                	je     f82 <kvs_create_linear_xremap+0x32>
	kvstore_size = (kmax + 1) * vsize;
     fcd:	44 8d 73 01          	lea    0x1(%rbx),%r14d
     fd1:	45 0f af f4          	imul   %r12d,%r14d
     fd5:	44 89 f0             	mov    %r14d,%eax
	kvs->store = vmalloc(kvstore_size);
     fd8:	48 89 c7             	mov    %rax,%rdi
	kvstore_size = (kmax + 1) * vsize;
     fdb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	kvs->store = vmalloc(kvstore_size);
     fdf:	e8 00 00 00 00       	callq  fe4 <kvs_create_linear_xremap+0x94>
	if (!kvs->store) {
     fe4:	48 85 c0             	test   %rax,%rax
	kvs->store = vmalloc(kvstore_size);
     fe7:	49 89 47 30          	mov    %rax,0x30(%r15)
	if (!kvs->store) {
     feb:	75 0a                	jne    ff7 <kvs_create_linear_xremap+0xa7>
		kfree(kvs);
     fed:	4c 89 ff             	mov    %r15,%rdi
     ff0:	e8 00 00 00 00       	callq  ff5 <kvs_create_linear_xremap+0xa5>
     ff5:	eb 8b                	jmp    f82 <kvs_create_linear_xremap+0x32>
	(void)do_div(tmp, (1024 * 1024));
     ff7:	44 89 f2             	mov    %r14d,%edx
     ffa:	4c 8b 75 c8          	mov    -0x38(%rbp),%r14
	DMINFO("Space allocated for linear key value store: %llu.%06llu MB",
     ffe:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	(void)do_div(tmp, (1024 * 1024));
    1005:	81 e2 ff ff 0f 00    	and    $0xfffff,%edx
	return &(kvs->ckvs);
    100b:	4d 89 fd             	mov    %r15,%r13
	(void)do_div(tmp, (1024 * 1024));
    100e:	4c 89 f6             	mov    %r14,%rsi
    1011:	48 c1 ee 14          	shr    $0x14,%rsi
	DMINFO("Space allocated for linear key value store: %llu.%06llu MB",
    1015:	e8 00 00 00 00       	callq  101a <kvs_create_linear_xremap+0xca>
	return __builtin_memset(p, c, size);
    101a:	49 8b 7f 30          	mov    0x30(%r15),%rdi
    101e:	4c 89 f2             	mov    %r14,%rdx
    1021:	be ff 00 00 00       	mov    $0xff,%esi
    1026:	e8 00 00 00 00       	callq  102b <kvs_create_linear_xremap+0xdb>
	md->kvs_linear = kvs;
    102b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
	kvs->ckvs.vsize = vsize;
    102f:	45 89 27             	mov    %r12d,(%r15)
	kvs->ckvs.ksize = ksize;
    1032:	41 c7 47 04 08 00 00 	movl   $0x8,0x4(%r15)
    1039:	00 
	kvs->kmax = kmax;
    103a:	41 89 5f 28          	mov    %ebx,0x28(%r15)
	kvs->ckvs.kvs_insert = kvs_insert_linear_xremap;
    103e:	49 c7 47 18 00 00 00 	movq   $0x0,0x18(%r15)
    1045:	00 
	kvs->ckvs.kvs_lookup = kvs_lookup_linear_xremap;
    1046:	49 c7 47 10 00 00 00 	movq   $0x0,0x10(%r15)
    104d:	00 
	kvs->ckvs.kvs_delete = kvs_delete_linear_xremap;
    104e:	49 c7 47 08 00 00 00 	movq   $0x0,0x8(%r15)
    1055:	00 
	kvs->ckvs.kvs_iterate = kvs_iterate_linear_xremap;
    1056:	49 c7 47 20 00 00 00 	movq   $0x0,0x20(%r15)
    105d:	00 
	md->kvs_linear = kvs;
    105e:	4c 89 78 30          	mov    %r15,0x30(%rax)
    1062:	e9 1b ff ff ff       	jmpq   f82 <kvs_create_linear_xremap+0x32>
    1067:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    106e:	00 00 

0000000000001070 <init_meta_xremap>:
{
    1070:	e8 00 00 00 00       	callq  1075 <init_meta_xremap+0x5>
    1075:	55                   	push   %rbp
    1076:	48 89 e5             	mov    %rsp,%rbp
    1079:	41 57                	push   %r15
    107b:	41 56                	push   %r14
    107d:	41 55                	push   %r13
    107f:	41 54                	push   %r12
    1081:	49 89 fd             	mov    %rdi,%r13
    1084:	53                   	push   %rbx
	DMINFO("Initializing XREMAP backend");
    1085:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
{
    108c:	49 89 f6             	mov    %rsi,%r14
		return ERR_PTR(-ENOMEM);
    108f:	48 c7 c3 f4 ff ff ff 	mov    $0xfffffffffffffff4,%rbx
{
    1096:	48 83 ec 38          	sub    $0x38,%rsp
    109a:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    10a1:	00 00 
    10a3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    10a7:	31 c0                	xor    %eax,%eax
	DMINFO("Initializing XREMAP backend");
    10a9:	e8 00 00 00 00       	callq  10ae <init_meta_xremap+0x3e>
    10ae:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 10b5 <init_meta_xremap+0x45>
    10b5:	ba 50 00 00 00       	mov    $0x50,%edx
    10ba:	be 00 80 60 00       	mov    $0x608000,%esi
    10bf:	e8 00 00 00 00       	callq  10c4 <init_meta_xremap+0x54>
	if (!md)
    10c4:	48 85 c0             	test   %rax,%rax
    10c7:	74 57                	je     1120 <init_meta_xremap+0xb0>
	meta_bm = dm_block_manager_create(p->metadata_bdev, METADATA_BSIZE,
    10c9:	49 8b 7d 00          	mov    0x0(%r13),%rdi
    10cd:	ba 05 00 00 00       	mov    $0x5,%edx
    10d2:	be 00 10 00 00       	mov    $0x1000,%esi
    10d7:	48 89 c3             	mov    %rax,%rbx
    10da:	e8 00 00 00 00       	callq  10df <init_meta_xremap+0x6f>
	if (IS_ERR(meta_bm)) {
    10df:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
	meta_bm = dm_block_manager_create(p->metadata_bdev, METADATA_BSIZE,
    10e5:	49 89 c4             	mov    %rax,%r12
	if (IS_ERR(meta_bm)) {
    10e8:	0f 87 dd 01 00 00    	ja     12cb <init_meta_xremap+0x25b>
	unsigned int sb_block_size = dm_bm_block_size(bm) / sizeof(__le64);
    10ee:	48 89 c7             	mov    %rax,%rdi
    10f1:	e8 00 00 00 00       	callq  10f6 <init_meta_xremap+0x86>
	r = dm_bm_read_lock(bm, METADATA_SUPERBLOCK_LOCATION, NULL, &b);
    10f6:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
    10fa:	31 d2                	xor    %edx,%edx
    10fc:	31 f6                	xor    %esi,%esi
    10fe:	4c 89 e7             	mov    %r12,%rdi
	unsigned int sb_block_size = dm_bm_block_size(bm) / sizeof(__le64);
    1101:	41 89 c7             	mov    %eax,%r15d
	r = dm_bm_read_lock(bm, METADATA_SUPERBLOCK_LOCATION, NULL, &b);
    1104:	e8 00 00 00 00       	callq  1109 <init_meta_xremap+0x99>
	if (r)
    1109:	85 c0                	test   %eax,%eax
    110b:	74 38                	je     1145 <init_meta_xremap+0xd5>
		md = ERR_PTR(ret);
    110d:	48 63 d8             	movslq %eax,%rbx
	dm_block_manager_destroy(meta_bm);
    1110:	4c 89 e7             	mov    %r12,%rdi
    1113:	e8 00 00 00 00       	callq  1118 <init_meta_xremap+0xa8>
	kfree(md);
    1118:	48 89 df             	mov    %rbx,%rdi
    111b:	e8 00 00 00 00       	callq  1120 <init_meta_xremap+0xb0>
}
    1120:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    1124:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
    112b:	00 00 
    112d:	48 89 d8             	mov    %rbx,%rax
    1130:	0f 85 27 02 00 00    	jne    135d <init_meta_xremap+0x2ed>
    1136:	48 83 c4 38          	add    $0x38,%rsp
    113a:	5b                   	pop    %rbx
    113b:	41 5c                	pop    %r12
    113d:	41 5d                	pop    %r13
    113f:	41 5e                	pop    %r14
    1141:	41 5f                	pop    %r15
    1143:	5d                   	pop    %rbp
    1144:	c3                   	retq   
	data_le = dm_block_data(b);
    1145:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
	unsigned int sb_block_size = dm_bm_block_size(bm) / sizeof(__le64);
    1149:	41 c1 ef 03          	shr    $0x3,%r15d
	data_le = dm_block_data(b);
    114d:	e8 00 00 00 00       	callq  1152 <init_meta_xremap+0xe2>
	for (i = 0; i < sb_block_size; i++) {
    1152:	45 85 ff             	test   %r15d,%r15d
	*result = true;
    1155:	41 c6 06 01          	movb   $0x1,(%r14)
	for (i = 0; i < sb_block_size; i++) {
    1159:	74 2d                	je     1188 <init_meta_xremap+0x118>
		if (data_le[i] != zero) {
    115b:	48 83 38 00          	cmpq   $0x0,(%rax)
    115f:	0f 85 5d 01 00 00    	jne    12c2 <init_meta_xremap+0x252>
    1165:	41 8d 4f ff          	lea    -0x1(%r15),%ecx
    1169:	48 8d 50 08          	lea    0x8(%rax),%rdx
    116d:	48 8d 44 c8 08       	lea    0x8(%rax,%rcx,8),%rax
    1172:	eb 0f                	jmp    1183 <init_meta_xremap+0x113>
    1174:	48 83 c2 08          	add    $0x8,%rdx
    1178:	48 83 7a f8 00       	cmpq   $0x0,-0x8(%rdx)
    117d:	0f 85 3f 01 00 00    	jne    12c2 <init_meta_xremap+0x252>
	for (i = 0; i < sb_block_size; i++) {
    1183:	48 39 d0             	cmp    %rdx,%rax
    1186:	75 ec                	jne    1174 <init_meta_xremap+0x104>
	dm_bm_unlock(b);
    1188:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    118c:	e8 00 00 00 00       	callq  1191 <init_meta_xremap+0x121>
	if (!*unformatted) {
    1191:	41 80 3e 00          	cmpb   $0x0,(%r14)
    1195:	0f 84 c7 01 00 00    	je     1362 <init_meta_xremap+0x2f2>
	ret = dm_tm_create_with_sm(meta_bm, METADATA_SUPERBLOCK_LOCATION,
    119b:	48 8d 4d a8          	lea    -0x58(%rbp),%rcx
    119f:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    11a3:	31 f6                	xor    %esi,%esi
    11a5:	4c 89 e7             	mov    %r12,%rdi
    11a8:	e8 00 00 00 00       	callq  11ad <init_meta_xremap+0x13d>
	if (ret < 0) {
    11ad:	85 c0                	test   %eax,%eax
    11af:	0f 88 58 ff ff ff    	js     110d <init_meta_xremap+0x9d>
	data_sm = dm_sm_disk_create(tm, p->blocks);
    11b5:	49 8b 75 08          	mov    0x8(%r13),%rsi
    11b9:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    11bd:	e8 00 00 00 00       	callq  11c2 <init_meta_xremap+0x152>
	if (IS_ERR(data_sm)) {
    11c2:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
	data_sm = dm_sm_disk_create(tm, p->blocks);
    11c8:	49 89 c6             	mov    %rax,%r14
	if (IS_ERR(data_sm)) {
    11cb:	0f 87 02 01 00 00    	ja     12d3 <init_meta_xremap+0x263>
	md->tm = tm;
    11d1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
	md->meta_sm = meta_sm;
    11d5:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
	return sm->root_size(sm, result);
    11d9:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
	md->meta_bm = meta_bm;
    11dd:	4c 89 63 10          	mov    %r12,0x10(%rbx)
	md->data_sm = data_sm;
    11e1:	4c 89 73 20          	mov    %r14,0x20(%rbx)
	md->tm = tm;
    11e5:	48 89 43 18          	mov    %rax,0x18(%rbx)
	md->meta_sm = meta_sm;
    11e9:	48 89 7b 28          	mov    %rdi,0x28(%rbx)
    11ed:	48 8b 47 58          	mov    0x58(%rdi),%rax
    11f1:	e8 00 00 00 00       	callq  11f6 <init_meta_xremap+0x186>
	if (r < 0)
    11f6:	85 c0                	test   %eax,%eax
    11f8:	0f 88 9c 00 00 00    	js     129a <init_meta_xremap+0x22a>
	r = dm_sm_root_size(md->data_sm, &data_len);
    11fe:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
    1202:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
    1206:	48 8b 47 58          	mov    0x58(%rdi),%rax
    120a:	e8 00 00 00 00       	callq  120f <init_meta_xremap+0x19f>
	if (r < 0)
    120f:	85 c0                	test   %eax,%eax
    1211:	0f 88 83 00 00 00    	js     129a <init_meta_xremap+0x22a>
	r = dm_sm_commit(md->data_sm);
    1217:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
	return sm->commit(sm);
    121b:	48 8b 47 38          	mov    0x38(%rdi),%rax
    121f:	e8 00 00 00 00       	callq  1224 <init_meta_xremap+0x1b4>
	if (r < 0)
    1224:	85 c0                	test   %eax,%eax
    1226:	78 72                	js     129a <init_meta_xremap+0x22a>
	r = dm_tm_pre_commit(md->tm);
    1228:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
    122c:	e8 00 00 00 00       	callq  1231 <init_meta_xremap+0x1c1>
	if (r < 0)
    1231:	85 c0                	test   %eax,%eax
    1233:	78 65                	js     129a <init_meta_xremap+0x22a>
	r = dm_bm_write_lock_zero(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
    1235:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    1239:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
    123d:	31 d2                	xor    %edx,%edx
    123f:	31 f6                	xor    %esi,%esi
    1241:	e8 00 00 00 00       	callq  1246 <init_meta_xremap+0x1d6>
	if (r < 0)
    1246:	85 c0                	test   %eax,%eax
    1248:	78 50                	js     129a <init_meta_xremap+0x22a>
	disk_super = dm_block_data(sblock);
    124a:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    124e:	e8 00 00 00 00       	callq  1253 <init_meta_xremap+0x1e3>
	r = dm_sm_copy_root(md->meta_sm, &disk_super->metadata_space_map_root,
    1253:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
    1257:	48 8d 70 2d          	lea    0x2d(%rax),%rsi
	disk_super = dm_block_data(sblock);
    125b:	49 89 c7             	mov    %rax,%r15
	return sm->copy_root(sm, copy_to_here_le, len);
    125e:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    1262:	48 8b 47 60          	mov    0x60(%rdi),%rax
    1266:	e8 00 00 00 00       	callq  126b <init_meta_xremap+0x1fb>
	if (r < 0)
    126b:	85 c0                	test   %eax,%eax
    126d:	78 1c                	js     128b <init_meta_xremap+0x21b>
	r = dm_sm_copy_root(md->data_sm, &disk_super->data_space_map_root,
    126f:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
    1273:	49 8d b7 ad 00 00 00 	lea    0xad(%r15),%rsi
    127a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    127e:	48 8b 47 60          	mov    0x60(%rdi),%rax
    1282:	e8 00 00 00 00       	callq  1287 <init_meta_xremap+0x217>
	if (r < 0)
    1287:	85 c0                	test   %eax,%eax
    1289:	79 4d                	jns    12d8 <init_meta_xremap+0x268>
	dm_bm_unlock(sblock);
    128b:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    128f:	89 45 a4             	mov    %eax,-0x5c(%rbp)
    1292:	e8 00 00 00 00       	callq  1297 <init_meta_xremap+0x227>
    1297:	8b 45 a4             	mov    -0x5c(%rbp),%eax
		md = ERR_PTR(ret);
    129a:	48 63 d8             	movslq %eax,%rbx
	sm->destroy(sm);
    129d:	49 8b 06             	mov    (%r14),%rax
    12a0:	4c 89 f7             	mov    %r14,%rdi
    12a3:	e8 00 00 00 00       	callq  12a8 <init_meta_xremap+0x238>
	dm_tm_destroy(tm);
    12a8:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    12ac:	e8 00 00 00 00       	callq  12b1 <init_meta_xremap+0x241>
	dm_sm_destroy(meta_sm);
    12b1:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
    12b5:	48 8b 07             	mov    (%rdi),%rax
    12b8:	e8 00 00 00 00       	callq  12bd <init_meta_xremap+0x24d>
    12bd:	e9 4e fe ff ff       	jmpq   1110 <init_meta_xremap+0xa0>
			*result = false;
    12c2:	41 c6 06 00          	movb   $0x0,(%r14)
    12c6:	e9 bd fe ff ff       	jmpq   1188 <init_meta_xremap+0x118>
		md = (struct metadata *)meta_bm;
    12cb:	48 89 c3             	mov    %rax,%rbx
    12ce:	e9 45 fe ff ff       	jmpq   1118 <init_meta_xremap+0xa8>
		md = (struct metadata *)data_sm;
    12d3:	48 89 c3             	mov    %rax,%rbx
    12d6:	eb d0                	jmp    12a8 <init_meta_xremap+0x238>
	disk_super->data_block_size = cpu_to_le32(METADATA_BSIZE);
    12d8:	48 b8 00 10 00 00 00 	movabs $0x100000001000,%rax
    12df:	10 00 00 
	disk_super->magic = cpu_to_le32(DM_DEDUP_MAGIC);
    12e2:	49 c7 47 04 70 75 44 	movq   $0x44447570,0x4(%r15)
    12e9:	44 
	disk_super->version = DM_DEDUP_VERSION;
    12ea:	41 c7 47 0c 01 00 00 	movl   $0x1,0xc(%r15)
    12f1:	00 
	disk_super->data_block_size = cpu_to_le32(METADATA_BSIZE);
    12f2:	49 89 87 35 01 00 00 	mov    %rax,0x135(%r15)
	disk_super->blocknr = cpu_to_le64(dm_block_location(sblock));
    12f9:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    12fd:	e8 00 00 00 00       	callq  1302 <init_meta_xremap+0x292>
	disk_super->flags &= ~(1 << CLEAN_SHUTDOWN);
    1302:	41 83 67 10 fe       	andl   $0xfffffffe,0x10(%r15)
	disk_super->blocknr = cpu_to_le64(dm_block_location(sblock));
    1307:	49 89 47 14          	mov    %rax,0x14(%r15)
	return dm_tm_commit(md->tm, sblock);
    130b:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
    130f:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    1313:	e8 00 00 00 00       	callq  1318 <init_meta_xremap+0x2a8>
	if (ret < 0) {
    1318:	85 c0                	test   %eax,%eax
    131a:	0f 88 7a ff ff ff    	js     129a <init_meta_xremap+0x22a>
	ret = __begin_transaction(md);
    1320:	48 89 df             	mov    %rbx,%rdi
    1323:	e8 88 f0 ff ff       	callq  3b0 <__begin_transaction>
	if (ret < 0) {
    1328:	85 c0                	test   %eax,%eax
    132a:	0f 88 6a ff ff ff    	js     129a <init_meta_xremap+0x22a>
	smap_size = p->blocks * sizeof(uint32_t);
    1330:	49 8b 45 08          	mov    0x8(%r13),%rax
    1334:	4c 8d 3c 85 00 00 00 	lea    0x0(,%rax,4),%r15
    133b:	00 
	md->smap = vmalloc(smap_size);
    133c:	4c 89 ff             	mov    %r15,%rdi
    133f:	e8 00 00 00 00       	callq  1344 <init_meta_xremap+0x2d4>
	if (!md->smap) {
    1344:	48 85 c0             	test   %rax,%rax
	md->smap = vmalloc(smap_size);
    1347:	48 89 03             	mov    %rax,(%rbx)
	if (!md->smap) {
    134a:	0f 85 bf 00 00 00    	jne    140f <init_meta_xremap+0x39f>
		kfree(md);
    1350:	48 89 df             	mov    %rbx,%rdi
    1353:	e8 00 00 00 00       	callq  1358 <init_meta_xremap+0x2e8>
		goto badwritesuper;
    1358:	e9 40 ff ff ff       	jmpq   129d <init_meta_xremap+0x22d>
}
    135d:	e8 00 00 00 00       	callq  1362 <init_meta_xremap+0x2f2>
		DMINFO("Reconstruct DDUP device");
    1362:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    1369:	e8 00 00 00 00       	callq  136e <init_meta_xremap+0x2fe>
	r = dm_bm_read_lock(bm, METADATA_SUPERBLOCK_LOCATION,
    136e:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
    1372:	31 d2                	xor    %edx,%edx
    1374:	31 f6                	xor    %esi,%esi
    1376:	4c 89 e7             	mov    %r12,%rdi
    1379:	e8 00 00 00 00       	callq  137e <init_meta_xremap+0x30e>
	if (r)
    137e:	85 c0                	test   %eax,%eax
	r = dm_bm_read_lock(bm, METADATA_SUPERBLOCK_LOCATION,
    1380:	41 89 c6             	mov    %eax,%r14d
	if (r)
    1383:	0f 84 0d 01 00 00    	je     1496 <init_meta_xremap+0x426>
		if (ret < 0) {
    1389:	45 85 f6             	test   %r14d,%r14d
    138c:	0f 88 f3 00 00 00    	js     1485 <init_meta_xremap+0x415>
		ret = dm_bm_read_lock(meta_bm, METADATA_SUPERBLOCK_LOCATION,
    1392:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
    1396:	31 d2                	xor    %edx,%edx
    1398:	31 f6                	xor    %esi,%esi
		md->meta_bm = meta_bm;
    139a:	4c 89 63 10          	mov    %r12,0x10(%rbx)
		ret = dm_bm_read_lock(meta_bm, METADATA_SUPERBLOCK_LOCATION,
    139e:	4c 89 e7             	mov    %r12,%rdi
    13a1:	e8 00 00 00 00       	callq  13a6 <init_meta_xremap+0x336>
		if (ret < 0) {
    13a6:	85 c0                	test   %eax,%eax
    13a8:	0f 88 c6 00 00 00    	js     1474 <init_meta_xremap+0x404>
		disk_super = dm_block_data(sblock);
    13ae:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    13b2:	e8 00 00 00 00       	callq  13b7 <init_meta_xremap+0x347>
		ret = dm_tm_open_with_sm(meta_bm, METADATA_SUPERBLOCK_LOCATION,
    13b7:	4c 8d 4b 28          	lea    0x28(%rbx),%r9
					 disk_super->metadata_space_map_root,
    13bb:	48 8d 50 2d          	lea    0x2d(%rax),%rdx
		ret = dm_tm_open_with_sm(meta_bm, METADATA_SUPERBLOCK_LOCATION,
    13bf:	4c 8d 43 18          	lea    0x18(%rbx),%r8
    13c3:	31 f6                	xor    %esi,%esi
    13c5:	b9 80 00 00 00       	mov    $0x80,%ecx
    13ca:	4c 89 e7             	mov    %r12,%rdi
		disk_super = dm_block_data(sblock);
    13cd:	49 89 c6             	mov    %rax,%r14
		ret = dm_tm_open_with_sm(meta_bm, METADATA_SUPERBLOCK_LOCATION,
    13d0:	e8 00 00 00 00       	callq  13d5 <init_meta_xremap+0x365>
		if (ret < 0) {
    13d5:	85 c0                	test   %eax,%eax
    13d7:	0f 88 86 00 00 00    	js     1463 <init_meta_xremap+0x3f3>
		md->data_sm = dm_sm_disk_open(md->tm,
    13dd:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
					      disk_super->data_space_map_root,
    13e1:	49 8d b6 ad 00 00 00 	lea    0xad(%r14),%rsi
		md->data_sm = dm_sm_disk_open(md->tm,
    13e8:	ba 80 00 00 00       	mov    $0x80,%edx
    13ed:	e8 00 00 00 00       	callq  13f2 <init_meta_xremap+0x382>
		if (IS_ERR(md->data_sm)) {
    13f2:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
		md->data_sm = dm_sm_disk_open(md->tm,
    13f8:	48 89 43 20          	mov    %rax,0x20(%rbx)
		if (IS_ERR(md->data_sm)) {
    13fc:	77 57                	ja     1455 <init_meta_xremap+0x3e5>
		dm_bm_unlock(sblock);
    13fe:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
	struct dm_space_map *data_sm = NULL;
    1402:	45 31 f6             	xor    %r14d,%r14d
		dm_bm_unlock(sblock);
    1405:	e8 00 00 00 00       	callq  140a <init_meta_xremap+0x39a>
    140a:	e9 11 ff ff ff       	jmpq   1320 <init_meta_xremap+0x2b0>
	(void)do_div(tmp, (1024 * 1024));
    140f:	4c 89 fa             	mov    %r15,%rdx
    1412:	4c 89 fe             	mov    %r15,%rsi
	DMINFO("Space allocated for T&V table: %llu.%06llu MB",
    1415:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	(void)do_div(tmp, (1024 * 1024));
    141c:	81 e2 ff ff 0f 00    	and    $0xfffff,%edx
    1422:	48 c1 ee 14          	shr    $0x14,%rsi
	DMINFO("Space allocated for T&V table: %llu.%06llu MB",
    1426:	e8 00 00 00 00       	callq  142b <init_meta_xremap+0x3bb>
    142b:	48 8b 3b             	mov    (%rbx),%rdi
    142e:	4c 89 fa             	mov    %r15,%rdx
    1431:	31 f6                	xor    %esi,%esi
    1433:	e8 00 00 00 00       	callq  1438 <init_meta_xremap+0x3c8>
	md->smax = p->blocks;
    1438:	49 8b 45 08          	mov    0x8(%r13),%rax
	md->kvs_linear = NULL;
    143c:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
    1443:	00 
	md->kvs_sparse = NULL;
    1444:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
    144b:	00 
	md->smax = p->blocks;
    144c:	48 89 43 08          	mov    %rax,0x8(%rbx)
	return md;
    1450:	e9 cb fc ff ff       	jmpq   1120 <init_meta_xremap+0xb0>
			DMERR("dm_disk_open failed");
    1455:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    145c:	e8 00 00 00 00       	callq  1461 <init_meta_xremap+0x3f1>
    1461:	eb 9b                	jmp    13fe <init_meta_xremap+0x38e>
			DMERR("could not open_with_sm superblock");
    1463:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    146a:	e8 00 00 00 00       	callq  146f <init_meta_xremap+0x3ff>
    146f:	e9 69 ff ff ff       	jmpq   13dd <init_meta_xremap+0x36d>
			DMERR("could not read_lock superblock");
    1474:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    147b:	e8 00 00 00 00       	callq  1480 <init_meta_xremap+0x410>
    1480:	e9 29 ff ff ff       	jmpq   13ae <init_meta_xremap+0x33e>
			DMERR("superblock verification failed");
    1485:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    148c:	e8 00 00 00 00       	callq  1491 <init_meta_xremap+0x421>
    1491:	e9 fc fe ff ff       	jmpq   1392 <init_meta_xremap+0x322>
	disk_super = dm_block_data(sblock);
    1496:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    149a:	e8 00 00 00 00       	callq  149f <init_meta_xremap+0x42f>
	csum_le = cpu_to_le32(dm_bm_checksum(&disk_super->flags,
    149f:	48 8d 78 10          	lea    0x10(%rax),%rdi
	disk_super = dm_block_data(sblock);
    14a3:	49 89 c7             	mov    %rax,%r15
	csum_le = cpu_to_le32(dm_bm_checksum(&disk_super->flags,
    14a6:	ba 87 e4 02 00       	mov    $0x2e487,%edx
    14ab:	be 51 01 00 00       	mov    $0x151,%esi
    14b0:	e8 00 00 00 00       	callq  14b5 <init_meta_xremap+0x445>
	if (csum_le != disk_super->csum) {
    14b5:	41 3b 07             	cmp    (%r15),%eax
    14b8:	0f 85 94 00 00 00    	jne    1552 <init_meta_xremap+0x4e2>
	if (le64_to_cpu(disk_super->magic) != DM_DEDUP_MAGIC) {
    14be:	49 81 7f 04 70 75 44 	cmpq   $0x44447570,0x4(%r15)
    14c5:	44 
    14c6:	75 78                	jne    1540 <init_meta_xremap+0x4d0>
	if (disk_super->version != DM_DEDUP_VERSION) {
    14c8:	41 83 7f 0c 01       	cmpl   $0x1,0xc(%r15)
    14cd:	75 5f                	jne    152e <init_meta_xremap+0x4be>
	if (le32_to_cpu(disk_super->data_block_size) != METADATA_BSIZE) {
    14cf:	41 81 bf 35 01 00 00 	cmpl   $0x1000,0x135(%r15)
    14d6:	00 10 00 00 
    14da:	75 40                	jne    151c <init_meta_xremap+0x4ac>
	if (le32_to_cpu(disk_super->metadata_block_size) != METADATA_BSIZE) {
    14dc:	41 81 bf 39 01 00 00 	cmpl   $0x1000,0x139(%r15)
    14e3:	00 10 00 00 
    14e7:	75 21                	jne    150a <init_meta_xremap+0x49a>
	if (!(disk_super->flags & (1 << CLEAN_SHUTDOWN)))
    14e9:	41 f6 47 10 01       	testb  $0x1,0x10(%r15)
    14ee:	75 0c                	jne    14fc <init_meta_xremap+0x48c>
		DMWARN("Possible data Inconsistency. Run dmdedup_corruption_check tool");
    14f0:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    14f7:	e8 00 00 00 00       	callq  14fc <init_meta_xremap+0x48c>
	dm_bm_unlock(sblock);
    14fc:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    1500:	e8 00 00 00 00       	callq  1505 <init_meta_xremap+0x495>
    1505:	e9 7f fe ff ff       	jmpq   1389 <init_meta_xremap+0x319>
		DMERR("Metadata block size mismatch");
    150a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	r = -1;
    1511:	41 83 ce ff          	or     $0xffffffff,%r14d
		DMERR("Metadata block size mismatch");
    1515:	e8 00 00 00 00       	callq  151a <init_meta_xremap+0x4aa>
    151a:	eb e0                	jmp    14fc <init_meta_xremap+0x48c>
		DMERR("Data block size mismatch");
    151c:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	r = -1;
    1523:	41 83 ce ff          	or     $0xffffffff,%r14d
		DMERR("Data block size mismatch");
    1527:	e8 00 00 00 00       	callq  152c <init_meta_xremap+0x4bc>
    152c:	eb ce                	jmp    14fc <init_meta_xremap+0x48c>
		DMERR("Version number mismatch");
    152e:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	r = -1;
    1535:	41 83 ce ff          	or     $0xffffffff,%r14d
		DMERR("Version number mismatch");
    1539:	e8 00 00 00 00       	callq  153e <init_meta_xremap+0x4ce>
    153e:	eb bc                	jmp    14fc <init_meta_xremap+0x48c>
		DMERR("Magic number mismatch");
    1540:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	r = -1;
    1547:	41 83 ce ff          	or     $0xffffffff,%r14d
		DMERR("Magic number mismatch");
    154b:	e8 00 00 00 00       	callq  1550 <init_meta_xremap+0x4e0>
    1550:	eb aa                	jmp    14fc <init_meta_xremap+0x48c>
		DMERR("Superblock checksum verification failed");
    1552:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	r = -1;
    1559:	41 83 ce ff          	or     $0xffffffff,%r14d
		DMERR("Superblock checksum verification failed");
    155d:	e8 00 00 00 00       	callq  1562 <init_meta_xremap+0x4f2>
    1562:	eb 98                	jmp    14fc <init_meta_xremap+0x48c>
    1564:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    156b:	00 00 00 00 
    156f:	90                   	nop

0000000000001570 <is_deleted_x_entry>:
{
    1570:	e8 00 00 00 00       	callq  1575 <is_deleted_x_entry+0x5>
    1575:	55                   	push   %rbp
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    1576:	85 f6                	test   %esi,%esi
{
    1578:	48 89 e5             	mov    %rsp,%rbp
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    157b:	74 22                	je     159f <is_deleted_x_entry+0x2f>
    157d:	80 3f 6b             	cmpb   $0x6b,(%rdi)
    1580:	75 1d                	jne    159f <is_deleted_x_entry+0x2f>
	int i = 0;
    1582:	31 c0                	xor    %eax,%eax
    1584:	eb 09                	jmp    158f <is_deleted_x_entry+0x1f>
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    1586:	48 63 d0             	movslq %eax,%rdx
    1589:	80 3c 17 6b          	cmpb   $0x6b,(%rdi,%rdx,1)
    158d:	75 09                	jne    1598 <is_deleted_x_entry+0x28>
		i++;
    158f:	83 c0 01             	add    $0x1,%eax
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    1592:	39 f0                	cmp    %esi,%eax
    1594:	89 c1                	mov    %eax,%ecx
    1596:	75 ee                	jne    1586 <is_deleted_x_entry+0x16>
	return i == length;
    1598:	39 ce                	cmp    %ecx,%esi
    159a:	0f 94 c0             	sete   %al
}
    159d:	5d                   	pop    %rbp
    159e:	c3                   	retq   
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    159f:	31 c9                	xor    %ecx,%ecx
	return i == length;
    15a1:	39 ce                	cmp    %ecx,%esi
    15a3:	0f 94 c0             	sete   %al
}
    15a6:	5d                   	pop    %rbp
    15a7:	c3                   	retq   
    15a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    15af:	00 

00000000000015b0 <alloc_data_block_hybrid>:
	current_head += 1;
	return dm_sector_div64(current_head, smax);
}

static int alloc_data_block_hybrid(struct metadata *md, uint64_t *blockn)
{
    15b0:	e8 00 00 00 00       	callq  15b5 <alloc_data_block_hybrid+0x5>
	u64 head, tail;

	head = md->allocptr;
    15b5:	4c 8b 47 10          	mov    0x10(%rdi),%r8
{
    15b9:	55                   	push   %rbp
	tail = md->allocptr;

	do {
		if (!md->smap[head]) {
    15ba:	4c 8b 0f             	mov    (%rdi),%r9
{
    15bd:	48 89 e5             	mov    %rsp,%rbp
	head = md->allocptr;
    15c0:	4c 89 c2             	mov    %r8,%rdx
    15c3:	eb 0b                	jmp    15d0 <alloc_data_block_hybrid+0x20>
 *
 * Return: sets ``*remainder``, then returns dividend / divisor
 */
static inline u64 div64_u64_rem(u64 dividend, u64 divisor, u64 *remainder)
{
	*remainder = dividend % divisor;
    15c5:	31 d2                	xor    %edx,%edx
    15c7:	48 f7 77 08          	divq   0x8(%rdi)
			return 0;
		}

		head = next_head(head, md->smax);

	} while (head != tail);
    15cb:	49 39 d0             	cmp    %rdx,%r8
    15ce:	74 27                	je     15f7 <alloc_data_block_hybrid+0x47>
		if (!md->smap[head]) {
    15d0:	49 8d 0c 91          	lea    (%r9,%rdx,4),%rcx
    15d4:	48 8d 42 01          	lea    0x1(%rdx),%rax
    15d8:	44 8b 11             	mov    (%rcx),%r10d
    15db:	45 85 d2             	test   %r10d,%r10d
    15de:	75 e5                	jne    15c5 <alloc_data_block_hybrid+0x15>
			md->smap[head] = 1;
    15e0:	c7 01 01 00 00 00    	movl   $0x1,(%rcx)
			*blockn = head;
    15e6:	48 89 16             	mov    %rdx,(%rsi)
    15e9:	31 d2                	xor    %edx,%edx
    15eb:	48 f7 77 08          	divq   0x8(%rdi)

	return -ENOSPC;
	//return dm_sm_new_block(md->data_sm, blockn);
}
    15ef:	5d                   	pop    %rbp
			return 0;
    15f0:	31 c0                	xor    %eax,%eax
			md->allocptr = next_head(head, md->smax);
    15f2:	48 89 57 10          	mov    %rdx,0x10(%rdi)
}
    15f6:	c3                   	retq   
	return -ENOSPC;
    15f7:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
}
    15fc:	5d                   	pop    %rbp
    15fd:	c3                   	retq   
    15fe:	66 90                	xchg   %ax,%ax

0000000000001600 <inc_refcount_hybrid>:

static int inc_refcount_hybrid(struct metadata *md, uint64_t blockn)
{
    1600:	e8 00 00 00 00       	callq  1605 <inc_refcount_hybrid+0x5>
	if (blockn >= md->smax)
    1605:	48 39 77 08          	cmp    %rsi,0x8(%rdi)
{
    1609:	55                   	push   %rbp
    160a:	48 89 e5             	mov    %rsp,%rbp
	if (blockn >= md->smax)
    160d:	76 17                	jbe    1626 <inc_refcount_hybrid+0x26>
		return -ERANGE;

	if (md->smap[blockn] != UINT32_MAX)
    160f:	48 8b 07             	mov    (%rdi),%rax
    1612:	48 8d 14 b0          	lea    (%rax,%rsi,4),%rdx
    1616:	8b 02                	mov    (%rdx),%eax
    1618:	83 f8 ff             	cmp    $0xffffffff,%eax
    161b:	74 10                	je     162d <inc_refcount_hybrid+0x2d>
		md->smap[blockn]++;
    161d:	83 c0 01             	add    $0x1,%eax
    1620:	89 02                	mov    %eax,(%rdx)
	else
		return -E2BIG;

	return 0;
    1622:	31 c0                	xor    %eax,%eax
	//return dm_sm_inc_block(md->data_sm, blockn);
}
    1624:	5d                   	pop    %rbp
    1625:	c3                   	retq   
		return -ERANGE;
    1626:	b8 de ff ff ff       	mov    $0xffffffde,%eax
}
    162b:	5d                   	pop    %rbp
    162c:	c3                   	retq   
		return -E2BIG;
    162d:	b8 f9 ff ff ff       	mov    $0xfffffff9,%eax
}
    1632:	5d                   	pop    %rbp
    1633:	c3                   	retq   
    1634:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    163b:	00 00 00 00 
    163f:	90                   	nop

0000000000001640 <dec_refcount_hybrid>:

static int dec_refcount_hybrid(struct metadata *md, uint64_t blockn)
{
    1640:	e8 00 00 00 00       	callq  1645 <dec_refcount_hybrid+0x5>
	if (blockn >= md->smax)
    1645:	48 39 77 08          	cmp    %rsi,0x8(%rdi)
{
    1649:	55                   	push   %rbp
    164a:	48 89 e5             	mov    %rsp,%rbp
	if (blockn >= md->smax)
    164d:	76 16                	jbe    1665 <dec_refcount_hybrid+0x25>
		return -ERANGE;

	if (md->smap[blockn])
    164f:	48 8b 07             	mov    (%rdi),%rax
    1652:	48 8d 14 b0          	lea    (%rax,%rsi,4),%rdx
    1656:	8b 02                	mov    (%rdx),%eax
    1658:	85 c0                	test   %eax,%eax
    165a:	74 10                	je     166c <dec_refcount_hybrid+0x2c>
		md->smap[blockn]--;
    165c:	83 e8 01             	sub    $0x1,%eax
    165f:	89 02                	mov    %eax,(%rdx)
	else
		return -EFAULT;

	return 0;
    1661:	31 c0                	xor    %eax,%eax
	//return dm_sm_dec_block(md->data_sm, blockn);
}
    1663:	5d                   	pop    %rbp
    1664:	c3                   	retq   
		return -ERANGE;
    1665:	b8 de ff ff ff       	mov    $0xffffffde,%eax
}
    166a:	5d                   	pop    %rbp
    166b:	c3                   	retq   
		return -EFAULT;
    166c:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
}
    1671:	5d                   	pop    %rbp
    1672:	c3                   	retq   
    1673:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    167a:	00 00 00 00 
    167e:	66 90                	xchg   %ax,%ax

0000000000001680 <get_refcount_hybrid>:

static int get_refcount_hybrid(struct metadata *md, uint64_t blockn)
{
    1680:	e8 00 00 00 00       	callq  1685 <get_refcount_hybrid+0x5>
	if (blockn >= md->smax)
    1685:	48 39 77 08          	cmp    %rsi,0x8(%rdi)
{
    1689:	55                   	push   %rbp
    168a:	48 89 e5             	mov    %rsp,%rbp
	if (blockn >= md->smax)
    168d:	76 08                	jbe    1697 <get_refcount_hybrid+0x17>
		return -ERANGE;

	return md->smap[blockn];
    168f:	48 8b 07             	mov    (%rdi),%rax
	// r = dm_sm_get_count(md->data_sm, blockn, &refcount);
	// if (r < 0)
	// 	return r;

	// return (int)refcount;
}
    1692:	5d                   	pop    %rbp
	return md->smap[blockn];
    1693:	8b 04 b0             	mov    (%rax,%rsi,4),%eax
}
    1696:	c3                   	retq   
		return -ERANGE;
    1697:	b8 de ff ff ff       	mov    $0xffffffde,%eax
}
    169c:	5d                   	pop    %rbp
    169d:	c3                   	retq   
    169e:	66 90                	xchg   %ax,%ax

00000000000016a0 <get_bufio_client_hybrid>:
	struct dm_bufio_client *bufio;
	bool read_only:1;
};

void* get_bufio_client_hybrid(struct metadata *md)
{
    16a0:	e8 00 00 00 00       	callq  16a5 <get_bufio_client_hybrid+0x5>
	struct dm_block_manager* bm = md->meta_bm;
	return (void*)(bm->bufio);
    16a5:	48 8b 47 18          	mov    0x18(%rdi),%rax
{
    16a9:	55                   	push   %rbp
    16aa:	48 89 e5             	mov    %rsp,%rbp
	return (void*)(bm->bufio);
    16ad:	48 8b 00             	mov    (%rax),%rax
};
    16b0:	5d                   	pop    %rbp
    16b1:	c3                   	retq   
    16b2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    16b9:	00 00 00 00 
    16bd:	0f 1f 00             	nopl   (%rax)

00000000000016c0 <get_private_data_hybrid>:
{
    16c0:	e8 00 00 00 00       	callq  16c5 <get_private_data_hybrid+0x5>
    16c5:	55                   	push   %rbp
	if (size > sizeof(md->private_data))
    16c6:	83 fa 10             	cmp    $0x10,%edx
{
    16c9:	48 89 e5             	mov    %rsp,%rbp
	if (size > sizeof(md->private_data))
    16cc:	0f 87 88 00 00 00    	ja     175a <get_private_data_hybrid+0x9a>
	return __builtin_memcpy(p, q, size);
    16d2:	83 fa 08             	cmp    $0x8,%edx
    16d5:	48 8b 0e             	mov    (%rsi),%rcx
    16d8:	48 8d 77 48          	lea    0x48(%rdi),%rsi
    16dc:	72 45                	jb     1723 <get_private_data_hybrid+0x63>
    16de:	48 8b 47 48          	mov    0x48(%rdi),%rax
    16e2:	48 89 01             	mov    %rax,(%rcx)
    16e5:	89 d0                	mov    %edx,%eax
    16e7:	48 8b 7c 06 f8       	mov    -0x8(%rsi,%rax,1),%rdi
    16ec:	48 89 7c 01 f8       	mov    %rdi,-0x8(%rcx,%rax,1)
    16f1:	48 8d 41 08          	lea    0x8(%rcx),%rax
    16f5:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    16f9:	48 29 c1             	sub    %rax,%rcx
    16fc:	01 ca                	add    %ecx,%edx
    16fe:	48 29 ce             	sub    %rcx,%rsi
    1701:	83 e2 f8             	and    $0xfffffff8,%edx
    1704:	83 fa 08             	cmp    $0x8,%edx
    1707:	72 16                	jb     171f <get_private_data_hybrid+0x5f>
    1709:	83 e2 f8             	and    $0xfffffff8,%edx
    170c:	31 c9                	xor    %ecx,%ecx
    170e:	89 cf                	mov    %ecx,%edi
    1710:	83 c1 08             	add    $0x8,%ecx
    1713:	4c 8b 04 3e          	mov    (%rsi,%rdi,1),%r8
    1717:	39 d1                	cmp    %edx,%ecx
    1719:	4c 89 04 38          	mov    %r8,(%rax,%rdi,1)
    171d:	72 ef                	jb     170e <get_private_data_hybrid+0x4e>
	return 0;
    171f:	31 c0                	xor    %eax,%eax
}
    1721:	5d                   	pop    %rbp
    1722:	c3                   	retq   
    1723:	f6 c2 04             	test   $0x4,%dl
    1726:	75 1f                	jne    1747 <get_private_data_hybrid+0x87>
    1728:	85 d2                	test   %edx,%edx
    172a:	74 f3                	je     171f <get_private_data_hybrid+0x5f>
    172c:	0f b6 47 48          	movzbl 0x48(%rdi),%eax
    1730:	f6 c2 02             	test   $0x2,%dl
    1733:	88 01                	mov    %al,(%rcx)
    1735:	74 e8                	je     171f <get_private_data_hybrid+0x5f>
    1737:	89 d0                	mov    %edx,%eax
    1739:	0f b7 54 06 fe       	movzwl -0x2(%rsi,%rax,1),%edx
    173e:	66 89 54 01 fe       	mov    %dx,-0x2(%rcx,%rax,1)
	return 0;
    1743:	31 c0                	xor    %eax,%eax
    1745:	eb da                	jmp    1721 <get_private_data_hybrid+0x61>
    1747:	8b 47 48             	mov    0x48(%rdi),%eax
    174a:	89 01                	mov    %eax,(%rcx)
    174c:	89 d0                	mov    %edx,%eax
    174e:	8b 54 06 fc          	mov    -0x4(%rsi,%rax,1),%edx
    1752:	89 54 01 fc          	mov    %edx,-0x4(%rcx,%rax,1)
    1756:	31 c0                	xor    %eax,%eax
    1758:	eb c7                	jmp    1721 <get_private_data_hybrid+0x61>
		return -1;
    175a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
    175f:	5d                   	pop    %rbp
    1760:	c3                   	retq   
    1761:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    1768:	00 00 00 00 
    176c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001770 <set_private_data_hybrid>:
{
    1770:	e8 00 00 00 00       	callq  1775 <set_private_data_hybrid+0x5>
    1775:	55                   	push   %rbp
	if (size > sizeof(md->private_data))
    1776:	83 fa 10             	cmp    $0x10,%edx
{
    1779:	48 89 e5             	mov    %rsp,%rbp
	if (size > sizeof(md->private_data))
    177c:	0f 87 85 00 00 00    	ja     1807 <set_private_data_hybrid+0x97>
    1782:	83 fa 08             	cmp    $0x8,%edx
    1785:	48 8d 4f 48          	lea    0x48(%rdi),%rcx
    1789:	72 45                	jb     17d0 <set_private_data_hybrid+0x60>
    178b:	48 8b 06             	mov    (%rsi),%rax
    178e:	48 83 c7 50          	add    $0x50,%rdi
    1792:	48 89 47 f8          	mov    %rax,-0x8(%rdi)
    1796:	89 d0                	mov    %edx,%eax
    1798:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
    179c:	4c 8b 44 06 f8       	mov    -0x8(%rsi,%rax,1),%r8
    17a1:	4c 89 44 01 f8       	mov    %r8,-0x8(%rcx,%rax,1)
    17a6:	48 29 f9             	sub    %rdi,%rcx
    17a9:	01 ca                	add    %ecx,%edx
    17ab:	48 29 ce             	sub    %rcx,%rsi
    17ae:	83 e2 f8             	and    $0xfffffff8,%edx
    17b1:	83 fa 08             	cmp    $0x8,%edx
    17b4:	72 16                	jb     17cc <set_private_data_hybrid+0x5c>
    17b6:	83 e2 f8             	and    $0xfffffff8,%edx
    17b9:	31 c0                	xor    %eax,%eax
    17bb:	89 c1                	mov    %eax,%ecx
    17bd:	83 c0 08             	add    $0x8,%eax
    17c0:	4c 8b 04 0e          	mov    (%rsi,%rcx,1),%r8
    17c4:	39 d0                	cmp    %edx,%eax
    17c6:	4c 89 04 0f          	mov    %r8,(%rdi,%rcx,1)
    17ca:	72 ef                	jb     17bb <set_private_data_hybrid+0x4b>
	return 0;
    17cc:	31 c0                	xor    %eax,%eax
}
    17ce:	5d                   	pop    %rbp
    17cf:	c3                   	retq   
    17d0:	f6 c2 04             	test   $0x4,%dl
    17d3:	75 1f                	jne    17f4 <set_private_data_hybrid+0x84>
    17d5:	85 d2                	test   %edx,%edx
    17d7:	74 f3                	je     17cc <set_private_data_hybrid+0x5c>
    17d9:	0f b6 06             	movzbl (%rsi),%eax
    17dc:	f6 c2 02             	test   $0x2,%dl
    17df:	88 47 48             	mov    %al,0x48(%rdi)
    17e2:	74 e8                	je     17cc <set_private_data_hybrid+0x5c>
    17e4:	89 d0                	mov    %edx,%eax
    17e6:	0f b7 54 06 fe       	movzwl -0x2(%rsi,%rax,1),%edx
    17eb:	66 89 54 01 fe       	mov    %dx,-0x2(%rcx,%rax,1)
	return 0;
    17f0:	31 c0                	xor    %eax,%eax
    17f2:	eb da                	jmp    17ce <set_private_data_hybrid+0x5e>
    17f4:	8b 06                	mov    (%rsi),%eax
    17f6:	89 47 48             	mov    %eax,0x48(%rdi)
    17f9:	89 d0                	mov    %edx,%eax
    17fb:	8b 54 06 fc          	mov    -0x4(%rsi,%rax,1),%edx
    17ff:	89 54 01 fc          	mov    %edx,-0x4(%rcx,%rax,1)
    1803:	31 c0                	xor    %eax,%eax
    1805:	eb c7                	jmp    17ce <set_private_data_hybrid+0x5e>
		return -1;
    1807:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
    180c:	5d                   	pop    %rbp
    180d:	c3                   	retq   
    180e:	66 90                	xchg   %ax,%ax

0000000000001810 <kvs_insert_linear_hybrid>:
{
    1810:	e8 00 00 00 00       	callq  1815 <kvs_insert_linear_hybrid+0x5>
	if (ksize != kvs->ksize)
    1815:	39 57 04             	cmp    %edx,0x4(%rdi)
    1818:	75 2d                	jne    1847 <kvs_insert_linear_hybrid+0x37>
	if (vsize != kvs->vsize)
    181a:	8b 17                	mov    (%rdi),%edx
    181c:	44 39 c2             	cmp    %r8d,%edx
    181f:	75 26                	jne    1847 <kvs_insert_linear_hybrid+0x37>
	idx = *((uint64_t *)key);
    1821:	48 8b 06             	mov    (%rsi),%rax
	if (idx > kvhybrid->kmax)
    1824:	8b 77 28             	mov    0x28(%rdi),%esi
    1827:	48 39 c6             	cmp    %rax,%rsi
    182a:	72 21                	jb     184d <kvs_insert_linear_hybrid+0x3d>
	ptr = kvhybrid->store + kvs->vsize * idx;
    182c:	48 0f af c2          	imul   %rdx,%rax
{
    1830:	55                   	push   %rbp
    1831:	48 89 ce             	mov    %rcx,%rsi
	ptr = kvhybrid->store + kvs->vsize * idx;
    1834:	48 03 47 30          	add    0x30(%rdi),%rax
{
    1838:	48 89 e5             	mov    %rsp,%rbp
	ptr = kvhybrid->store + kvs->vsize * idx;
    183b:	48 89 c7             	mov    %rax,%rdi
    183e:	e8 00 00 00 00       	callq  1843 <kvs_insert_linear_hybrid+0x33>
	return 0;
    1843:	31 c0                	xor    %eax,%eax
}
    1845:	5d                   	pop    %rbp
    1846:	c3                   	retq   
		return -EINVAL;
    1847:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    184c:	c3                   	retq   
		return -ERANGE;
    184d:	b8 de ff ff ff       	mov    $0xffffffde,%eax
}
    1852:	c3                   	retq   
    1853:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    185a:	00 00 00 00 
    185e:	66 90                	xchg   %ax,%ax

0000000000001860 <kvs_lookup_linear_hybrid>:
{
    1860:	e8 00 00 00 00       	callq  1865 <kvs_lookup_linear_hybrid+0x5>
	if (ksize != kvs->ksize)
    1865:	39 57 04             	cmp    %edx,0x4(%rdi)
    1868:	75 6b                	jne    18d5 <kvs_lookup_linear_hybrid+0x75>
{
    186a:	55                   	push   %rbp
    186b:	48 89 e5             	mov    %rsp,%rbp
    186e:	41 54                	push   %r12
    1870:	53                   	push   %rbx
	if (idx > kvhybrid->kmax)
    1871:	8b 47 28             	mov    0x28(%rdi),%eax
	idx = *((uint64_t *)key);
    1874:	48 8b 36             	mov    (%rsi),%rsi
    1877:	48 89 fb             	mov    %rdi,%rbx
	if (idx > kvhybrid->kmax)
    187a:	48 39 f0             	cmp    %rsi,%rax
    187d:	72 5c                	jb     18db <kvs_lookup_linear_hybrid+0x7b>
	ptr = kvhybrid->store + kvs->vsize * idx;
    187f:	8b 17                	mov    (%rdi),%edx
    1881:	48 0f af f2          	imul   %rdx,%rsi
    1885:	49 89 d2             	mov    %rdx,%r10
    1888:	48 03 77 30          	add    0x30(%rdi),%rsi
	while ((i < length) && (ptr[i] == EMPTY_ENTRY))
    188c:	83 fa 00             	cmp    $0x0,%edx
    188f:	7e 2a                	jle    18bb <kvs_lookup_linear_hybrid+0x5b>
    1891:	80 3e ff             	cmpb   $0xff,(%rsi)
    1894:	75 27                	jne    18bd <kvs_lookup_linear_hybrid+0x5d>
    1896:	4c 8d 4e 01          	lea    0x1(%rsi),%r9
	int i = 0;
    189a:	31 c0                	xor    %eax,%eax
    189c:	eb 0b                	jmp    18a9 <kvs_lookup_linear_hybrid+0x49>
    189e:	49 83 c1 01          	add    $0x1,%r9
	while ((i < length) && (ptr[i] == EMPTY_ENTRY))
    18a2:	41 80 79 ff ff       	cmpb   $0xff,-0x1(%r9)
    18a7:	75 14                	jne    18bd <kvs_lookup_linear_hybrid+0x5d>
		i++;
    18a9:	83 c0 01             	add    $0x1,%eax
	while ((i < length) && (ptr[i] == EMPTY_ENTRY))
    18ac:	41 39 c2             	cmp    %eax,%r10d
    18af:	75 ed                	jne    189e <kvs_lookup_linear_hybrid+0x3e>
}
    18b1:	5b                   	pop    %rbx
		return r;
    18b2:	b8 c3 ff ff ff       	mov    $0xffffffc3,%eax
}
    18b7:	41 5c                	pop    %r12
    18b9:	5d                   	pop    %rbp
    18ba:	c3                   	retq   
	if (is_empty_entry_hybrid(ptr, kvs->vsize))
    18bb:	74 f4                	je     18b1 <kvs_lookup_linear_hybrid+0x51>
    18bd:	48 89 cf             	mov    %rcx,%rdi
    18c0:	4d 89 c4             	mov    %r8,%r12
    18c3:	e8 00 00 00 00       	callq  18c8 <kvs_lookup_linear_hybrid+0x68>
	*vsize = kvs->vsize;
    18c8:	8b 03                	mov    (%rbx),%eax
    18ca:	41 89 04 24          	mov    %eax,(%r12)
	return 0;
    18ce:	31 c0                	xor    %eax,%eax
}
    18d0:	5b                   	pop    %rbx
    18d1:	41 5c                	pop    %r12
    18d3:	5d                   	pop    %rbp
    18d4:	c3                   	retq   
		return -EINVAL;
    18d5:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
}
    18da:	c3                   	retq   
		return -ERANGE;
    18db:	b8 de ff ff ff       	mov    $0xffffffde,%eax
    18e0:	eb ee                	jmp    18d0 <kvs_lookup_linear_hybrid+0x70>
    18e2:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    18e9:	00 00 00 00 
    18ed:	0f 1f 00             	nopl   (%rax)

00000000000018f0 <__begin_transaction>:
{
    18f0:	e8 00 00 00 00       	callq  18f5 <__begin_transaction+0x5>
    18f5:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    18fa:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
	r = dm_bm_read_lock(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
    18fe:	31 d2                	xor    %edx,%edx
    1900:	31 f6                	xor    %esi,%esi
{
    1902:	41 ff 72 f8          	pushq  -0x8(%r10)
    1906:	55                   	push   %rbp
    1907:	48 89 e5             	mov    %rsp,%rbp
    190a:	41 54                	push   %r12
    190c:	41 52                	push   %r10
    190e:	53                   	push   %rbx
    190f:	49 89 fc             	mov    %rdi,%r12
	r = dm_bm_read_lock(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
    1912:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
{
    1916:	48 83 ec 18          	sub    $0x18,%rsp
	r = dm_bm_read_lock(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
    191a:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
{
    191e:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    1925:	00 00 
    1927:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    192b:	31 c0                	xor    %eax,%eax
	r = dm_bm_read_lock(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
    192d:	e8 00 00 00 00       	callq  1932 <__begin_transaction+0x42>
	if (r)
    1932:	85 c0                	test   %eax,%eax
	r = dm_bm_read_lock(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
    1934:	89 c3                	mov    %eax,%ebx
	if (r)
    1936:	74 20                	je     1958 <__begin_transaction+0x68>
}
    1938:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    193c:	65 48 33 34 25 28 00 	xor    %gs:0x28,%rsi
    1943:	00 00 
    1945:	89 d8                	mov    %ebx,%eax
    1947:	75 5c                	jne    19a5 <__begin_transaction+0xb5>
    1949:	48 83 c4 18          	add    $0x18,%rsp
    194d:	5b                   	pop    %rbx
    194e:	41 5a                	pop    %r10
    1950:	41 5c                	pop    %r12
    1952:	5d                   	pop    %rbp
    1953:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    1957:	c3                   	retq   
	disk_super = dm_block_data(sblock);
    1958:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    195c:	e8 00 00 00 00       	callq  1961 <__begin_transaction+0x71>
	if (md->kvs_sparse) {
    1961:	49 8b 54 24 40       	mov    0x40(%r12),%rdx
    1966:	48 85 d2             	test   %rdx,%rdx
    1969:	74 17                	je     1982 <__begin_transaction+0x92>
		md->kvs_sparse->root = le64_to_cpu(disk_super->hash_pbn_root);
    196b:	48 8b 88 2d 01 00 00 	mov    0x12d(%rax),%rcx
    1972:	48 89 4a 68          	mov    %rcx,0x68(%rdx)
		md->kvs_sparse->lpc_cur = disk_super->lpc_last;
    1976:	0f b6 48 2c          	movzbl 0x2c(%rax),%ecx
    197a:	49 8b 54 24 40       	mov    0x40(%r12),%rdx
    197f:	89 4a 70             	mov    %ecx,0x70(%rdx)
    1982:	48 8b 90 45 01 00 00 	mov    0x145(%rax),%rdx
    1989:	48 8b 80 3d 01 00 00 	mov    0x13d(%rax),%rax
	dm_bm_unlock(sblock);
    1990:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    1994:	49 89 44 24 48       	mov    %rax,0x48(%r12)
    1999:	49 89 54 24 50       	mov    %rdx,0x50(%r12)
    199e:	e8 00 00 00 00       	callq  19a3 <__begin_transaction+0xb3>
	return r;
    19a3:	eb 93                	jmp    1938 <__begin_transaction+0x48>
}
    19a5:	e8 00 00 00 00       	callq  19aa <__begin_transaction+0xba>
    19aa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000019b0 <kvs_delete_linear_hybrid>:
{
    19b0:	e8 00 00 00 00       	callq  19b5 <kvs_delete_linear_hybrid+0x5>
	if (ksize != kvs->ksize)
    19b5:	39 57 04             	cmp    %edx,0x4(%rdi)
    19b8:	75 58                	jne    1a12 <kvs_delete_linear_hybrid+0x62>
	if (idx > kvhybrid->kmax)
    19ba:	8b 57 28             	mov    0x28(%rdi),%edx
	idx = *((uint64_t *)key);
    19bd:	48 8b 06             	mov    (%rsi),%rax
	if (idx > kvhybrid->kmax)
    19c0:	48 39 c2             	cmp    %rax,%rdx
    19c3:	72 53                	jb     1a18 <kvs_delete_linear_hybrid+0x68>
	ptr = kvhybrid->store + kvs->vsize * idx;
    19c5:	8b 17                	mov    (%rdi),%edx
    19c7:	48 0f af c2          	imul   %rdx,%rax
    19cb:	48 89 d6             	mov    %rdx,%rsi
    19ce:	48 03 47 30          	add    0x30(%rdi),%rax
	while ((i < length) && (ptr[i] == EMPTY_ENTRY))
    19d2:	83 fa 00             	cmp    $0x0,%edx
	ptr = kvhybrid->store + kvs->vsize * idx;
    19d5:	48 89 c7             	mov    %rax,%rdi
	while ((i < length) && (ptr[i] == EMPTY_ENTRY))
    19d8:	7e 24                	jle    19fe <kvs_delete_linear_hybrid+0x4e>
    19da:	80 38 ff             	cmpb   $0xff,(%rax)
    19dd:	75 21                	jne    1a00 <kvs_delete_linear_hybrid+0x50>
    19df:	48 8d 48 01          	lea    0x1(%rax),%rcx
	int i = 0;
    19e3:	31 c0                	xor    %eax,%eax
    19e5:	eb 0a                	jmp    19f1 <kvs_delete_linear_hybrid+0x41>
    19e7:	48 83 c1 01          	add    $0x1,%rcx
	while ((i < length) && (ptr[i] == EMPTY_ENTRY))
    19eb:	80 79 ff ff          	cmpb   $0xff,-0x1(%rcx)
    19ef:	75 0f                	jne    1a00 <kvs_delete_linear_hybrid+0x50>
		i++;
    19f1:	83 c0 01             	add    $0x1,%eax
	while ((i < length) && (ptr[i] == EMPTY_ENTRY))
    19f4:	39 c6                	cmp    %eax,%esi
    19f6:	75 ef                	jne    19e7 <kvs_delete_linear_hybrid+0x37>
		return -ENODEV;
    19f8:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
}
    19fd:	c3                   	retq   
	if (is_empty_entry_hybrid(ptr, kvs->vsize))
    19fe:	74 f8                	je     19f8 <kvs_delete_linear_hybrid+0x48>
{
    1a00:	55                   	push   %rbp
	return __builtin_memset(p, c, size);
    1a01:	be ff 00 00 00       	mov    $0xff,%esi
    1a06:	48 89 e5             	mov    %rsp,%rbp
    1a09:	e8 00 00 00 00       	callq  1a0e <kvs_delete_linear_hybrid+0x5e>
	return 0;
    1a0e:	31 c0                	xor    %eax,%eax
}
    1a10:	5d                   	pop    %rbp
    1a11:	c3                   	retq   
		return -EINVAL;
    1a12:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    1a17:	c3                   	retq   
		return -ERANGE;
    1a18:	b8 de ff ff ff       	mov    $0xffffffde,%eax
    1a1d:	c3                   	retq   
    1a1e:	66 90                	xchg   %ax,%ax

0000000000001a20 <kvs_delete_sparse_hybrid>:
{
    1a20:	e8 00 00 00 00       	callq  1a25 <kvs_delete_sparse_hybrid+0x5>
    1a25:	55                   	push   %rbp
    1a26:	48 89 e5             	mov    %rsp,%rbp
    1a29:	41 57                	push   %r15
    1a2b:	41 56                	push   %r14
    1a2d:	41 55                	push   %r13
    1a2f:	41 54                	push   %r12
    1a31:	53                   	push   %rbx
    1a32:	48 83 ec 30          	sub    $0x30,%rsp
    1a36:	48 89 75 b8          	mov    %rsi,-0x48(%rbp)
    1a3a:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    1a41:	00 00 
    1a43:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    1a47:	31 c0                	xor    %eax,%eax
	if (ksize != kvs->ksize)
    1a49:	39 57 04             	cmp    %edx,0x4(%rdi)
    1a4c:	0f 85 4d 01 00 00    	jne    1b9f <kvs_delete_sparse_hybrid+0x17f>
    1a52:	48 89 fb             	mov    %rdi,%rbx
	cur_entry = kmalloc(kvhybrid->entry_size, GFP_NOIO);
    1a55:	8b 7f 28             	mov    0x28(%rdi),%edi
	return __kmalloc(size, flags);
    1a58:	be 00 00 60 00       	mov    $0x600000,%esi
    1a5d:	41 89 d5             	mov    %edx,%r13d
    1a60:	e8 00 00 00 00       	callq  1a65 <kvs_delete_sparse_hybrid+0x45>
	if (!cur_entry)
    1a65:	48 85 c0             	test   %rax,%rax
    1a68:	49 89 c4             	mov    %rax,%r12
    1a6b:	0f 84 97 00 00 00    	je     1b08 <kvs_delete_sparse_hybrid+0xe8>
	key_val = (*(uint64_t *)key);
    1a71:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
	r = dm_btree_lookup(&(kvhybrid->info), kvhybrid->root, &key_val, cur_entry);
    1a75:	48 8b 73 68          	mov    0x68(%rbx),%rsi
    1a79:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    1a7d:	4c 89 e1             	mov    %r12,%rcx
	key_val = (*(uint64_t *)key);
    1a80:	48 8b 00             	mov    (%rax),%rax
    1a83:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	r = dm_btree_lookup(&(kvhybrid->info), kvhybrid->root, &key_val, cur_entry);
    1a87:	48 8d 43 30          	lea    0x30(%rbx),%rax
    1a8b:	48 89 c7             	mov    %rax,%rdi
    1a8e:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    1a92:	e8 00 00 00 00       	callq  1a97 <kvs_delete_sparse_hybrid+0x77>
	if (r == -ENODATA) {
    1a97:	83 f8 c3             	cmp    $0xffffffc3,%eax
	r = dm_btree_lookup(&(kvhybrid->info), kvhybrid->root, &key_val, cur_entry);
    1a9a:	41 89 c6             	mov    %eax,%r14d
	if (r == -ENODATA) {
    1a9d:	0f 84 04 01 00 00    	je     1ba7 <kvs_delete_sparse_hybrid+0x187>
		if (!memcmp(cur_entry, key, ksize)) {
    1aa3:	49 63 c5             	movslq %r13d,%rax
	while (r == 0) {
    1aa6:	45 85 f6             	test   %r14d,%r14d
		if (!memcmp(cur_entry, key, ksize)) {
    1aa9:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	while (r == 0) {
    1aad:	74 38                	je     1ae7 <kvs_delete_sparse_hybrid+0xc7>
out:
    1aaf:	e9 e6 00 00 00       	jmpq   1b9a <kvs_delete_sparse_hybrid+0x17a>
		r = dm_btree_lookup(&(kvhybrid->info),
    1ab4:	48 8b 73 68          	mov    0x68(%rbx),%rsi
    1ab8:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    1abc:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    1ac0:	48 89 c1             	mov    %rax,%rcx
    1ac3:	e8 00 00 00 00       	callq  1ac8 <kvs_delete_sparse_hybrid+0xa8>
	return __builtin_memcmp(p, q, size);
    1ac8:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    1acc:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    1ad0:	4c 89 e7             	mov    %r12,%rdi
    1ad3:	41 89 c6             	mov    %eax,%r14d
    1ad6:	e8 00 00 00 00       	callq  1adb <kvs_delete_sparse_hybrid+0xbb>
		if (!memcmp(cur_entry, key, ksize)) {
    1adb:	85 c0                	test   %eax,%eax
    1add:	74 31                	je     1b10 <kvs_delete_sparse_hybrid+0xf0>
		} else if (r == 0) {
    1adf:	45 85 f6             	test   %r14d,%r14d
    1ae2:	75 6c                	jne    1b50 <kvs_delete_sparse_hybrid+0x130>
    1ae4:	4d 89 fc             	mov    %r15,%r12
		cur_key_val = key_val;
    1ae7:	4c 8b 6d c0          	mov    -0x40(%rbp),%r13
		next_entry = kmalloc(kvhybrid->entry_size, GFP_NOIO);
    1aeb:	8b 7b 28             	mov    0x28(%rbx),%edi
    1aee:	be 00 00 60 00       	mov    $0x600000,%esi
		key_val++;
    1af3:	49 8d 45 01          	lea    0x1(%r13),%rax
    1af7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    1afb:	e8 00 00 00 00       	callq  1b00 <kvs_delete_sparse_hybrid+0xe0>
		if (!next_entry)
    1b00:	48 85 c0             	test   %rax,%rax
    1b03:	49 89 c7             	mov    %rax,%r15
    1b06:	75 ac                	jne    1ab4 <kvs_delete_sparse_hybrid+0x94>
		return -ENOMEM;
    1b08:	41 be f4 ff ff ff    	mov    $0xfffffff4,%r14d
    1b0e:	eb 50                	jmp    1b60 <kvs_delete_sparse_hybrid+0x140>
	if (ret_next == 0 &&
    1b10:	45 85 f6             	test   %r14d,%r14d
    1b13:	4c 89 6d c8          	mov    %r13,-0x38(%rbp)
    1b17:	4c 8d 6b 68          	lea    0x68(%rbx),%r13
    1b1b:	75 64                	jne    1b81 <kvs_delete_sparse_hybrid+0x161>
    1b1d:	49 8b 07             	mov    (%r15),%rax
    1b20:	49 39 04 24          	cmp    %rax,(%r12)
    1b24:	75 5b                	jne    1b81 <kvs_delete_sparse_hybrid+0x161>
		memset(cur_entry, DELETED_ENTRY, kvhybrid->entry_size);
    1b26:	8b 53 28             	mov    0x28(%rbx),%edx
	return __builtin_memset(p, c, size);
    1b29:	be 6b 00 00 00       	mov    $0x6b,%esi
    1b2e:	4c 89 e7             	mov    %r12,%rdi
    1b31:	e8 00 00 00 00       	callq  1b36 <kvs_delete_sparse_hybrid+0x116>
		r = dm_btree_insert(&(kvhybrid->info), kvhybrid->root,
    1b36:	48 8b 73 68          	mov    0x68(%rbx),%rsi
    1b3a:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    1b3e:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
    1b42:	4d 89 e8             	mov    %r13,%r8
    1b45:	4c 89 e1             	mov    %r12,%rcx
    1b48:	e8 00 00 00 00       	callq  1b4d <kvs_delete_sparse_hybrid+0x12d>
    1b4d:	41 89 c6             	mov    %eax,%r14d
	kfree(cur_entry);
    1b50:	4c 89 e7             	mov    %r12,%rdi
    1b53:	e8 00 00 00 00       	callq  1b58 <kvs_delete_sparse_hybrid+0x138>
	kfree(next_entry);
    1b58:	4c 89 ff             	mov    %r15,%rdi
    1b5b:	e8 00 00 00 00       	callq  1b60 <kvs_delete_sparse_hybrid+0x140>
}
    1b60:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    1b64:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
    1b6b:	00 00 
    1b6d:	44 89 f0             	mov    %r14d,%eax
    1b70:	75 3d                	jne    1baf <kvs_delete_sparse_hybrid+0x18f>
    1b72:	48 83 c4 30          	add    $0x30,%rsp
    1b76:	5b                   	pop    %rbx
    1b77:	41 5c                	pop    %r12
    1b79:	41 5d                	pop    %r13
    1b7b:	41 5e                	pop    %r14
    1b7d:	41 5f                	pop    %r15
    1b7f:	5d                   	pop    %rbp
    1b80:	c3                   	retq   
		r = dm_btree_remove(&(kvhybrid->info),
    1b81:	48 8b 73 68          	mov    0x68(%rbx),%rsi
    1b85:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    1b89:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
    1b8d:	4c 89 e9             	mov    %r13,%rcx
    1b90:	e8 00 00 00 00       	callq  1b95 <kvs_delete_sparse_hybrid+0x175>
    1b95:	41 89 c6             	mov    %eax,%r14d
    1b98:	eb b6                	jmp    1b50 <kvs_delete_sparse_hybrid+0x130>
	char *cur_entry, *next_entry = NULL;
    1b9a:	45 31 ff             	xor    %r15d,%r15d
    1b9d:	eb b1                	jmp    1b50 <kvs_delete_sparse_hybrid+0x130>
		return -EINVAL;
    1b9f:	41 be ea ff ff ff    	mov    $0xffffffea,%r14d
    1ba5:	eb b9                	jmp    1b60 <kvs_delete_sparse_hybrid+0x140>
		return -ENODEV;
    1ba7:	41 be ed ff ff ff    	mov    $0xffffffed,%r14d
    1bad:	eb b1                	jmp    1b60 <kvs_delete_sparse_hybrid+0x140>
}
    1baf:	e8 00 00 00 00       	callq  1bb4 <kvs_delete_sparse_hybrid+0x194>
    1bb4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    1bbb:	00 00 00 00 
    1bbf:	90                   	nop

0000000000001bc0 <kvs_lookup_sparse_hybrid>:
{
    1bc0:	e8 00 00 00 00       	callq  1bc5 <kvs_lookup_sparse_hybrid+0x5>
    1bc5:	55                   	push   %rbp
    1bc6:	48 89 e5             	mov    %rsp,%rbp
    1bc9:	41 57                	push   %r15
    1bcb:	41 56                	push   %r14
    1bcd:	41 55                	push   %r13
    1bcf:	41 54                	push   %r12
    1bd1:	53                   	push   %rbx
    1bd2:	48 63 da             	movslq %edx,%rbx
    1bd5:	48 83 ec 28          	sub    $0x28,%rsp
    1bd9:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    1bdd:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    1be4:	00 00 
    1be6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    1bea:	31 c0                	xor    %eax,%eax
	if (ksize != kvs->ksize)
    1bec:	39 5f 04             	cmp    %ebx,0x4(%rdi)
    1bef:	0f 85 b4 00 00 00    	jne    1ca9 <kvs_lookup_sparse_hybrid+0xe9>
    1bf5:	49 89 ff             	mov    %rdi,%r15
	entry = kmalloc(kvhybrid->entry_size, GFP_NOIO);
    1bf8:	8b 7f 28             	mov    0x28(%rdi),%edi
    1bfb:	49 89 f5             	mov    %rsi,%r13
    1bfe:	be 00 00 60 00       	mov    $0x600000,%esi
    1c03:	e8 00 00 00 00       	callq  1c08 <kvs_lookup_sparse_hybrid+0x48>
	if (!entry)
    1c08:	48 85 c0             	test   %rax,%rax
    1c0b:	49 89 c4             	mov    %rax,%r12
    1c0e:	0f 84 9d 00 00 00    	je     1cb1 <kvs_lookup_sparse_hybrid+0xf1>
	key_val = (*(uint64_t *)key);
    1c14:	49 8b 45 00          	mov    0x0(%r13),%rax
	for (i = 0; i <= kvhybrid->lpc_cur; i++) {
    1c18:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
	key_val = (*(uint64_t *)key);
    1c1f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    1c23:	49 8d 47 30          	lea    0x30(%r15),%rax
    1c27:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		r = dm_btree_lookup(&(kvhybrid->info), kvhybrid->root, &key_val,
    1c2b:	49 8b 77 68          	mov    0x68(%r15),%rsi
    1c2f:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    1c33:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
    1c37:	4c 89 e1             	mov    %r12,%rcx
    1c3a:	e8 00 00 00 00       	callq  1c3f <kvs_lookup_sparse_hybrid+0x7f>
		if (r == -ENODATA) {
    1c3f:	83 f8 c3             	cmp    $0xffffffc3,%eax
    1c42:	74 52                	je     1c96 <kvs_lookup_sparse_hybrid+0xd6>
		} else if (r == 0) {
    1c44:	85 c0                	test   %eax,%eax
    1c46:	75 4e                	jne    1c96 <kvs_lookup_sparse_hybrid+0xd6>
	return __builtin_memcmp(p, q, size);
    1c48:	48 89 da             	mov    %rbx,%rdx
    1c4b:	4c 89 ee             	mov    %r13,%rsi
    1c4e:	4c 89 e7             	mov    %r12,%rdi
    1c51:	e8 00 00 00 00       	callq  1c56 <kvs_lookup_sparse_hybrid+0x96>
			if (!memcmp(entry, key, ksize)) {
    1c56:	85 c0                	test   %eax,%eax
    1c58:	41 89 c6             	mov    %eax,%r14d
    1c5b:	75 61                	jne    1cbe <kvs_lookup_sparse_hybrid+0xfe>
				memcpy(value, entry + ksize, kvs->vsize);
    1c5d:	41 8b 17             	mov    (%r15),%edx
	return __builtin_memcpy(p, q, size);
    1c60:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    1c64:	49 8d 34 1c          	lea    (%r12,%rbx,1),%rsi
    1c68:	e8 00 00 00 00       	callq  1c6d <kvs_lookup_sparse_hybrid+0xad>
				kfree(entry);
    1c6d:	4c 89 e7             	mov    %r12,%rdi
    1c70:	e8 00 00 00 00       	callq  1c75 <kvs_lookup_sparse_hybrid+0xb5>
}
    1c75:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    1c79:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
    1c80:	00 00 
    1c82:	44 89 f0             	mov    %r14d,%eax
    1c85:	75 32                	jne    1cb9 <kvs_lookup_sparse_hybrid+0xf9>
    1c87:	48 83 c4 28          	add    $0x28,%rsp
    1c8b:	5b                   	pop    %rbx
    1c8c:	41 5c                	pop    %r12
    1c8e:	41 5d                	pop    %r13
    1c90:	41 5e                	pop    %r14
    1c92:	41 5f                	pop    %r15
    1c94:	5d                   	pop    %rbp
    1c95:	c3                   	retq   
			kfree(entry);
    1c96:	4c 89 e7             	mov    %r12,%rdi
    1c99:	89 45 c0             	mov    %eax,-0x40(%rbp)
    1c9c:	e8 00 00 00 00       	callq  1ca1 <kvs_lookup_sparse_hybrid+0xe1>
		r = dm_btree_lookup(&(kvhybrid->info), kvhybrid->root, &key_val,
    1ca1:	8b 45 c0             	mov    -0x40(%rbp),%eax
    1ca4:	41 89 c6             	mov    %eax,%r14d
			return r;
    1ca7:	eb cc                	jmp    1c75 <kvs_lookup_sparse_hybrid+0xb5>
		return -EINVAL;
    1ca9:	41 be ea ff ff ff    	mov    $0xffffffea,%r14d
    1caf:	eb c4                	jmp    1c75 <kvs_lookup_sparse_hybrid+0xb5>
		return -ENOMEM;
    1cb1:	41 be f4 ff ff ff    	mov    $0xfffffff4,%r14d
    1cb7:	eb bc                	jmp    1c75 <kvs_lookup_sparse_hybrid+0xb5>
}
    1cb9:	e8 00 00 00 00       	callq  1cbe <kvs_lookup_sparse_hybrid+0xfe>
			DMWARN("kvs_lookup_sparse_hybrid: hash collision for "
    1cbe:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    1cc2:	4c 89 e2             	mov    %r12,%rdx
    1cc5:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    1ccc:	e8 00 00 00 00       	callq  1cd1 <kvs_lookup_sparse_hybrid+0x111>
	for (i = 0; i <= kvhybrid->lpc_cur; i++) {
    1cd1:	83 45 b4 01          	addl   $0x1,-0x4c(%rbp)
			key_val++;
    1cd5:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
	for (i = 0; i <= kvhybrid->lpc_cur; i++) {
    1cda:	8b 45 b4             	mov    -0x4c(%rbp),%eax
    1cdd:	41 39 47 70          	cmp    %eax,0x70(%r15)
    1ce1:	0f 83 44 ff ff ff    	jae    1c2b <kvs_lookup_sparse_hybrid+0x6b>
	kfree(entry);
    1ce7:	4c 89 e7             	mov    %r12,%rdi
	return r;
    1cea:	45 31 f6             	xor    %r14d,%r14d
	kfree(entry);
    1ced:	e8 00 00 00 00       	callq  1cf2 <kvs_lookup_sparse_hybrid+0x132>
	return r;
    1cf2:	eb 81                	jmp    1c75 <kvs_lookup_sparse_hybrid+0xb5>
    1cf4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    1cfb:	00 00 00 00 
    1cff:	90                   	nop

0000000000001d00 <kvs_iterate_sparse_hybrid>:
{
    1d00:	e8 00 00 00 00       	callq  1d05 <kvs_iterate_sparse_hybrid+0x5>
    1d05:	55                   	push   %rbp
    1d06:	48 89 e5             	mov    %rsp,%rbp
    1d09:	41 57                	push   %r15
    1d0b:	41 56                	push   %r14
    1d0d:	41 55                	push   %r13
    1d0f:	41 54                	push   %r12
    1d11:	49 89 ff             	mov    %rdi,%r15
    1d14:	53                   	push   %rbx
    1d15:	48 83 ec 40          	sub    $0x40,%rsp
	entry = kmalloc(kvs->ksize + kvs->vsize, GFP_NOIO);
    1d19:	8b 3f                	mov    (%rdi),%edi
    1d1b:	41 03 7f 04          	add    0x4(%r15),%edi
{
    1d1f:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
    1d23:	be 00 00 60 00       	mov    $0x600000,%esi
    1d28:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
    1d2c:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    1d33:	00 00 
    1d35:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    1d39:	31 c0                	xor    %eax,%eax
    1d3b:	e8 00 00 00 00       	callq  1d40 <kvs_iterate_sparse_hybrid+0x40>
	if (!entry)
    1d40:	48 85 c0             	test   %rax,%rax
    1d43:	48 89 c3             	mov    %rax,%rbx
    1d46:	0f 84 56 01 00 00    	je     1ea2 <kvs_iterate_sparse_hybrid+0x1a2>
	key = kmalloc(kvs->ksize, GFP_NOIO);
    1d4c:	41 8b 7f 04          	mov    0x4(%r15),%edi
    1d50:	be 00 00 60 00       	mov    $0x600000,%esi
    1d55:	e8 00 00 00 00       	callq  1d5a <kvs_iterate_sparse_hybrid+0x5a>
	if (!key)
    1d5a:	48 85 c0             	test   %rax,%rax
    1d5d:	49 89 c4             	mov    %rax,%r12
    1d60:	0f 84 46 01 00 00    	je     1eac <kvs_iterate_sparse_hybrid+0x1ac>
	value = kmalloc(kvs->vsize, GFP_NOIO);
    1d66:	41 8b 3f             	mov    (%r15),%edi
    1d69:	be 00 00 60 00       	mov    $0x600000,%esi
    1d6e:	e8 00 00 00 00       	callq  1d73 <kvs_iterate_sparse_hybrid+0x73>
    1d73:	49 89 c5             	mov    %rax,%r13
	int r = 0;
    1d76:	31 c0                	xor    %eax,%eax
	if (!value)
    1d78:	4d 85 ed             	test   %r13,%r13
    1d7b:	0f 84 e5 00 00 00    	je     1e66 <kvs_iterate_sparse_hybrid+0x166>
	r = dm_btree_find_lowest_key(&(kvhybrid->info), kvhybrid->root, &lowest);
    1d81:	4d 8d 77 30          	lea    0x30(%r15),%r14
    1d85:	49 8b 77 68          	mov    0x68(%r15),%rsi
    1d89:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    1d8d:	4c 89 f7             	mov    %r14,%rdi
    1d90:	4c 89 75 b8          	mov    %r14,-0x48(%rbp)
    1d94:	e8 00 00 00 00       	callq  1d99 <kvs_iterate_sparse_hybrid+0x99>
	if (r <= 0)
    1d99:	85 c0                	test   %eax,%eax
    1d9b:	0f 8e c5 00 00 00    	jle    1e66 <kvs_iterate_sparse_hybrid+0x166>
	r = dm_btree_find_highest_key(&(kvhybrid->info), kvhybrid->root, &highest);
    1da1:	49 8b 77 68          	mov    0x68(%r15),%rsi
    1da5:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
    1da9:	4c 89 f7             	mov    %r14,%rdi
    1dac:	e8 00 00 00 00       	callq  1db1 <kvs_iterate_sparse_hybrid+0xb1>
	if (r <= 0)
    1db1:	85 c0                	test   %eax,%eax
    1db3:	0f 8e ad 00 00 00    	jle    1e66 <kvs_iterate_sparse_hybrid+0x166>
    1db9:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
	while (lowest <= highest) {
    1dbd:	48 3b 7d c8          	cmp    -0x38(%rbp),%rdi
    1dc1:	0f 87 9f 00 00 00    	ja     1e66 <kvs_iterate_sparse_hybrid+0x166>
		r = dm_btree_lookup_next(&(kvhybrid->info), kvhybrid->root,
    1dc7:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    1dcb:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    1dcf:	49 8b 77 68          	mov    0x68(%r15),%rsi
    1dd3:	49 89 d8             	mov    %rbx,%r8
    1dd6:	48 89 ca             	mov    %rcx,%rdx
    1dd9:	e8 00 00 00 00       	callq  1dde <kvs_iterate_sparse_hybrid+0xde>
		lowest++;
    1dde:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
		if (r || is_deleted_entry_hybrid(entry, kvs->ksize + kvs->vsize))
    1de2:	85 c0                	test   %eax,%eax
		lowest++;
    1de4:	48 8d 79 01          	lea    0x1(%rcx),%rdi
    1de8:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
		if (r || is_deleted_entry_hybrid(entry, kvs->ksize + kvs->vsize))
    1dec:	75 cf                	jne    1dbd <kvs_iterate_sparse_hybrid+0xbd>
    1dee:	45 8b 57 04          	mov    0x4(%r15),%r10d
    1df2:	45 8b 37             	mov    (%r15),%r14d
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    1df5:	45 89 d0             	mov    %r10d,%r8d
    1df8:	45 01 f0             	add    %r14d,%r8d
    1dfb:	74 c0                	je     1dbd <kvs_iterate_sparse_hybrid+0xbd>
    1dfd:	80 3b 6b             	cmpb   $0x6b,(%rbx)
    1e00:	75 13                	jne    1e15 <kvs_iterate_sparse_hybrid+0x115>
	int i = 0;
    1e02:	31 d2                	xor    %edx,%edx
		i++;
    1e04:	83 c2 01             	add    $0x1,%edx
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    1e07:	41 39 d0             	cmp    %edx,%r8d
    1e0a:	74 b1                	je     1dbd <kvs_iterate_sparse_hybrid+0xbd>
    1e0c:	48 63 f2             	movslq %edx,%rsi
    1e0f:	80 3c 33 6b          	cmpb   $0x6b,(%rbx,%rsi,1)
    1e13:	74 ef                	je     1e04 <kvs_iterate_sparse_hybrid+0x104>
		memcpy(key, entry, kvs->ksize);
    1e15:	45 89 d0             	mov    %r10d,%r8d
    1e18:	48 89 de             	mov    %rbx,%rsi
    1e1b:	4c 89 e7             	mov    %r12,%rdi
    1e1e:	4c 89 c2             	mov    %r8,%rdx
    1e21:	44 89 55 ac          	mov    %r10d,-0x54(%rbp)
    1e25:	4c 89 45 b0          	mov    %r8,-0x50(%rbp)
    1e29:	e8 00 00 00 00       	callq  1e2e <kvs_iterate_sparse_hybrid+0x12e>
		memcpy(value, (void *)(entry + kvs->ksize), kvs->vsize);
    1e2e:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
    1e32:	44 89 f2             	mov    %r14d,%edx
    1e35:	4c 89 ef             	mov    %r13,%rdi
    1e38:	4a 8d 34 03          	lea    (%rbx,%r8,1),%rsi
    1e3c:	e8 00 00 00 00       	callq  1e41 <kvs_iterate_sparse_hybrid+0x141>
		r = fn((void *)key, kvs->ksize, (void *)value,
    1e41:	44 8b 55 ac          	mov    -0x54(%rbp),%r10d
    1e45:	4c 8b 45 98          	mov    -0x68(%rbp),%r8
    1e49:	44 89 f1             	mov    %r14d,%ecx
    1e4c:	4c 89 ea             	mov    %r13,%rdx
    1e4f:	4c 89 e7             	mov    %r12,%rdi
    1e52:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
    1e56:	44 89 d6             	mov    %r10d,%esi
    1e59:	e8 00 00 00 00       	callq  1e5e <kvs_iterate_sparse_hybrid+0x15e>
		if (r)
    1e5e:	85 c0                	test   %eax,%eax
    1e60:	0f 84 53 ff ff ff    	je     1db9 <kvs_iterate_sparse_hybrid+0xb9>
	kfree(value);
    1e66:	4c 89 ef             	mov    %r13,%rdi
    1e69:	89 45 b8             	mov    %eax,-0x48(%rbp)
    1e6c:	e8 00 00 00 00       	callq  1e71 <kvs_iterate_sparse_hybrid+0x171>
	kfree(key);
    1e71:	4c 89 e7             	mov    %r12,%rdi
    1e74:	e8 00 00 00 00       	callq  1e79 <kvs_iterate_sparse_hybrid+0x179>
	kfree(entry);
    1e79:	48 89 df             	mov    %rbx,%rdi
    1e7c:	e8 00 00 00 00       	callq  1e81 <kvs_iterate_sparse_hybrid+0x181>
}
    1e81:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    1e85:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
    1e8c:	00 00 
    1e8e:	8b 45 b8             	mov    -0x48(%rbp),%eax
    1e91:	75 20                	jne    1eb3 <kvs_iterate_sparse_hybrid+0x1b3>
    1e93:	48 83 c4 40          	add    $0x40,%rsp
    1e97:	5b                   	pop    %rbx
    1e98:	41 5c                	pop    %r12
    1e9a:	41 5d                	pop    %r13
    1e9c:	41 5e                	pop    %r14
    1e9e:	41 5f                	pop    %r15
    1ea0:	5d                   	pop    %rbp
    1ea1:	c3                   	retq   
	char *entry, *key = NULL, *value = NULL;
    1ea2:	45 31 ed             	xor    %r13d,%r13d
    1ea5:	45 31 e4             	xor    %r12d,%r12d
	int r = 0;
    1ea8:	31 c0                	xor    %eax,%eax
    1eaa:	eb ba                	jmp    1e66 <kvs_iterate_sparse_hybrid+0x166>
	char *entry, *key = NULL, *value = NULL;
    1eac:	45 31 ed             	xor    %r13d,%r13d
	int r = 0;
    1eaf:	31 c0                	xor    %eax,%eax
    1eb1:	eb b3                	jmp    1e66 <kvs_iterate_sparse_hybrid+0x166>
}
    1eb3:	e8 00 00 00 00       	callq  1eb8 <kvs_iterate_sparse_hybrid+0x1b8>
    1eb8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    1ebf:	00 

0000000000001ec0 <kvs_insert_sparse_hybrid>:
{
    1ec0:	e8 00 00 00 00       	callq  1ec5 <kvs_insert_sparse_hybrid+0x5>
    1ec5:	55                   	push   %rbp
    1ec6:	48 89 e5             	mov    %rsp,%rbp
    1ec9:	41 57                	push   %r15
    1ecb:	41 56                	push   %r14
    1ecd:	41 55                	push   %r13
    1ecf:	41 54                	push   %r12
    1ed1:	53                   	push   %rbx
    1ed2:	48 63 da             	movslq %edx,%rbx
    1ed5:	48 83 ec 28          	sub    $0x28,%rsp
    1ed9:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    1edd:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    1ee4:	00 00 
    1ee6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    1eea:	31 c0                	xor    %eax,%eax
	if (ksize != kvs->ksize)
    1eec:	39 5f 04             	cmp    %ebx,0x4(%rdi)
    1eef:	0f 85 fd 00 00 00    	jne    1ff2 <kvs_insert_sparse_hybrid+0x132>
	if (vsize != kvs->vsize)
    1ef5:	44 39 07             	cmp    %r8d,(%rdi)
    1ef8:	49 89 fe             	mov    %rdi,%r14
    1efb:	45 89 c4             	mov    %r8d,%r12d
    1efe:	0f 85 ee 00 00 00    	jne    1ff2 <kvs_insert_sparse_hybrid+0x132>
	entry = kmalloc(kvhybrid->entry_size, GFP_NOIO);
    1f04:	8b 7f 28             	mov    0x28(%rdi),%edi
    1f07:	49 89 f5             	mov    %rsi,%r13
    1f0a:	be 00 00 60 00       	mov    $0x600000,%esi
    1f0f:	e8 00 00 00 00       	callq  1f14 <kvs_insert_sparse_hybrid+0x54>
	if (!entry)
    1f14:	48 85 c0             	test   %rax,%rax
    1f17:	49 89 c7             	mov    %rax,%r15
    1f1a:	0f 84 d9 00 00 00    	je     1ff9 <kvs_insert_sparse_hybrid+0x139>
	key_val = (*(uint64_t *)key);
    1f20:	49 8b 45 00          	mov    0x0(%r13),%rax
	for (i = 0; i <= kvhybrid->lpc_max; i++) {
    1f24:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
	key_val = (*(uint64_t *)key);
    1f2b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    1f2f:	49 8d 46 30          	lea    0x30(%r14),%rax
    1f33:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		r = dm_btree_lookup(&(kvhybrid->info), kvhybrid->root, &key_val,
    1f37:	49 8b 76 68          	mov    0x68(%r14),%rsi
    1f3b:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    1f3f:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
    1f43:	4c 89 f9             	mov    %r15,%rcx
    1f46:	e8 00 00 00 00       	callq  1f4b <kvs_insert_sparse_hybrid+0x8b>
		if (r == -ENODATA ||
    1f4b:	83 f8 c3             	cmp    $0xffffffc3,%eax
    1f4e:	74 23                	je     1f73 <kvs_insert_sparse_hybrid+0xb3>
			is_deleted_entry_hybrid(entry, kvhybrid->entry_size)) {
    1f50:	41 8b 76 28          	mov    0x28(%r14),%esi
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    1f54:	85 f6                	test   %esi,%esi
    1f56:	74 1b                	je     1f73 <kvs_insert_sparse_hybrid+0xb3>
    1f58:	41 80 3f 6b          	cmpb   $0x6b,(%r15)
    1f5c:	75 64                	jne    1fc2 <kvs_insert_sparse_hybrid+0x102>
	int i = 0;
    1f5e:	31 d2                	xor    %edx,%edx
    1f60:	eb 0a                	jmp    1f6c <kvs_insert_sparse_hybrid+0xac>
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    1f62:	48 63 ca             	movslq %edx,%rcx
    1f65:	41 80 3c 0f 6b       	cmpb   $0x6b,(%r15,%rcx,1)
    1f6a:	75 56                	jne    1fc2 <kvs_insert_sparse_hybrid+0x102>
		i++;
    1f6c:	83 c2 01             	add    $0x1,%edx
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    1f6f:	39 d6                	cmp    %edx,%esi
    1f71:	75 ef                	jne    1f62 <kvs_insert_sparse_hybrid+0xa2>
    1f73:	48 89 da             	mov    %rbx,%rdx
    1f76:	4c 89 ee             	mov    %r13,%rsi
    1f79:	4c 89 ff             	mov    %r15,%rdi
    1f7c:	e8 00 00 00 00       	callq  1f81 <kvs_insert_sparse_hybrid+0xc1>
    1f81:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
			memcpy(entry + ksize, value, vsize);
    1f85:	49 8d 3c 1f          	lea    (%r15,%rbx,1),%rdi
    1f89:	49 63 d4             	movslq %r12d,%rdx
    1f8c:	e8 00 00 00 00       	callq  1f91 <kvs_insert_sparse_hybrid+0xd1>
			r = dm_btree_insert(&(kvhybrid->info), kvhybrid->root,
    1f91:	49 8b 76 68          	mov    0x68(%r14),%rsi
    1f95:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    1f99:	4d 8d 46 68          	lea    0x68(%r14),%r8
    1f9d:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
    1fa1:	4c 89 f9             	mov    %r15,%rcx
    1fa4:	e8 00 00 00 00       	callq  1fa9 <kvs_insert_sparse_hybrid+0xe9>
			kfree(entry);
    1fa9:	4c 89 ff             	mov    %r15,%rdi
    1fac:	e8 00 00 00 00       	callq  1fb1 <kvs_insert_sparse_hybrid+0xf1>
			if (i > kvhybrid->lpc_cur) {
    1fb1:	8b 45 b4             	mov    -0x4c(%rbp),%eax
    1fb4:	41 39 46 70          	cmp    %eax,0x70(%r14)
    1fb8:	0f 82 91 00 00 00    	jb     204f <kvs_insert_sparse_hybrid+0x18f>
			return 0;
    1fbe:	31 c0                	xor    %eax,%eax
    1fc0:	eb 12                	jmp    1fd4 <kvs_insert_sparse_hybrid+0x114>
		} else if (r >= 0) {
    1fc2:	85 c0                	test   %eax,%eax
    1fc4:	79 3a                	jns    2000 <kvs_insert_sparse_hybrid+0x140>
			kfree(entry);
    1fc6:	4c 89 ff             	mov    %r15,%rdi
    1fc9:	89 45 c0             	mov    %eax,-0x40(%rbp)
    1fcc:	e8 00 00 00 00       	callq  1fd1 <kvs_insert_sparse_hybrid+0x111>
			return r;
    1fd1:	8b 45 c0             	mov    -0x40(%rbp),%eax
}
    1fd4:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
    1fd8:	65 48 33 1c 25 28 00 	xor    %gs:0x28,%rbx
    1fdf:	00 00 
    1fe1:	75 67                	jne    204a <kvs_insert_sparse_hybrid+0x18a>
    1fe3:	48 83 c4 28          	add    $0x28,%rsp
    1fe7:	5b                   	pop    %rbx
    1fe8:	41 5c                	pop    %r12
    1fea:	41 5d                	pop    %r13
    1fec:	41 5e                	pop    %r14
    1fee:	41 5f                	pop    %r15
    1ff0:	5d                   	pop    %rbp
    1ff1:	c3                   	retq   
		return -EINVAL;
    1ff2:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    1ff7:	eb db                	jmp    1fd4 <kvs_insert_sparse_hybrid+0x114>
		return -ENOMEM;
    1ff9:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
    1ffe:	eb d4                	jmp    1fd4 <kvs_insert_sparse_hybrid+0x114>
			DMINFO("Collision detected for key: %s",(char *)key);
    2000:	4c 89 ee             	mov    %r13,%rsi
    2003:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    200a:	e8 00 00 00 00       	callq  200f <kvs_insert_sparse_hybrid+0x14f>
	for (i = 0; i <= kvhybrid->lpc_max; i++) {
    200f:	83 45 b4 01          	addl   $0x1,-0x4c(%rbp)
    2013:	41 8b 76 74          	mov    0x74(%r14),%esi
    2017:	8b 45 b4             	mov    -0x4c(%rbp),%eax
			key_val++;
    201a:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
	for (i = 0; i <= kvhybrid->lpc_max; i++) {
    201f:	39 c6                	cmp    %eax,%esi
    2021:	0f 83 10 ff ff ff    	jae    1f37 <kvs_insert_sparse_hybrid+0x77>
	DMINFO("Linear probing hard limit hit for insert hence"
    2027:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    202e:	e8 00 00 00 00       	callq  2033 <kvs_insert_sparse_hybrid+0x173>
	kvhybrid->lpc_cur = kvhybrid->lpc_max;
    2033:	41 8b 46 74          	mov    0x74(%r14),%eax
	kfree(entry);
    2037:	4c 89 ff             	mov    %r15,%rdi
	kvhybrid->lpc_cur = kvhybrid->lpc_max;
    203a:	41 89 46 70          	mov    %eax,0x70(%r14)
	kfree(entry);
    203e:	e8 00 00 00 00       	callq  2043 <kvs_insert_sparse_hybrid+0x183>
	return -ENOSPC;
    2043:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
    2048:	eb 8a                	jmp    1fd4 <kvs_insert_sparse_hybrid+0x114>
}
    204a:	e8 00 00 00 00       	callq  204f <kvs_insert_sparse_hybrid+0x18f>
				DMINFO("Changing linear probing to %d", i);
    204f:	89 c3                	mov    %eax,%ebx
    2051:	89 c6                	mov    %eax,%esi
    2053:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    205a:	e8 00 00 00 00       	callq  205f <kvs_insert_sparse_hybrid+0x19f>
				kvhybrid->lpc_cur = i;
    205f:	41 89 5e 70          	mov    %ebx,0x70(%r14)
			return 0;
    2063:	31 c0                	xor    %eax,%eax
    2065:	e9 6a ff ff ff       	jmpq   1fd4 <kvs_insert_sparse_hybrid+0x114>
    206a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000002070 <__commit_transaction>:
{
    2070:	e8 00 00 00 00       	callq  2075 <__commit_transaction+0x5>
    2075:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    207a:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    207e:	41 ff 72 f8          	pushq  -0x8(%r10)
    2082:	55                   	push   %rbp
    2083:	48 89 e5             	mov    %rsp,%rbp
    2086:	41 55                	push   %r13
    2088:	41 54                	push   %r12
    208a:	41 52                	push   %r10
    208c:	53                   	push   %rbx
    208d:	48 89 fb             	mov    %rdi,%rbx
    2090:	41 89 f4             	mov    %esi,%r12d
    2093:	48 83 ec 30          	sub    $0x30,%rsp
	r = dm_sm_commit(md->data_sm);
    2097:	48 8b 7f 28          	mov    0x28(%rdi),%rdi
{
    209b:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    20a2:	00 00 
    20a4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    20a8:	31 c0                	xor    %eax,%eax
	return sm->commit(sm);
    20aa:	48 8b 47 38          	mov    0x38(%rdi),%rax
    20ae:	e8 00 00 00 00       	callq  20b3 <__commit_transaction+0x43>
	if (r < 0)
    20b3:	85 c0                	test   %eax,%eax
    20b5:	78 4c                	js     2103 <__commit_transaction+0x93>
	r = dm_tm_pre_commit(md->tm);
    20b7:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
    20bb:	e8 00 00 00 00       	callq  20c0 <__commit_transaction+0x50>
	if (r < 0)
    20c0:	85 c0                	test   %eax,%eax
    20c2:	78 3f                	js     2103 <__commit_transaction+0x93>
	r = dm_sm_root_size(md->meta_sm, &metadata_len);
    20c4:	48 8b 7b 30          	mov    0x30(%rbx),%rdi
	return sm->root_size(sm, result);
    20c8:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
    20cc:	48 8b 47 58          	mov    0x58(%rdi),%rax
    20d0:	e8 00 00 00 00       	callq  20d5 <__commit_transaction+0x65>
	if (r < 0)
    20d5:	85 c0                	test   %eax,%eax
    20d7:	78 2a                	js     2103 <__commit_transaction+0x93>
	r = dm_sm_root_size(md->data_sm, &data_len);
    20d9:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
    20dd:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
    20e1:	48 8b 47 58          	mov    0x58(%rdi),%rax
    20e5:	e8 00 00 00 00       	callq  20ea <__commit_transaction+0x7a>
	if (r < 0)
    20ea:	85 c0                	test   %eax,%eax
    20ec:	78 15                	js     2103 <__commit_transaction+0x93>
	r = dm_bm_write_lock(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
    20ee:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
    20f2:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    20f6:	31 d2                	xor    %edx,%edx
    20f8:	31 f6                	xor    %esi,%esi
    20fa:	e8 00 00 00 00       	callq  20ff <__commit_transaction+0x8f>
	if (r)
    20ff:	85 c0                	test   %eax,%eax
    2101:	74 24                	je     2127 <__commit_transaction+0xb7>
}
    2103:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    2107:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
    210e:	00 00 
    2110:	0f 85 da 00 00 00    	jne    21f0 <__commit_transaction+0x180>
    2116:	48 83 c4 30          	add    $0x30,%rsp
    211a:	5b                   	pop    %rbx
    211b:	41 5a                	pop    %r10
    211d:	41 5c                	pop    %r12
    211f:	41 5d                	pop    %r13
    2121:	5d                   	pop    %rbp
    2122:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    2126:	c3                   	retq   
	disk_super = dm_block_data(sblock);
    2127:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    212b:	e8 00 00 00 00       	callq  2130 <__commit_transaction+0xc0>
	if (clean_shutdown_flag)
    2130:	45 84 e4             	test   %r12b,%r12b
	disk_super = dm_block_data(sblock);
    2133:	49 89 c5             	mov    %rax,%r13
	if (clean_shutdown_flag)
    2136:	0f 85 97 00 00 00    	jne    21d3 <__commit_transaction+0x163>
		disk_super->flags &= ~(1 << CLEAN_SHUTDOWN);
    213c:	83 60 10 fe          	andl   $0xfffffffe,0x10(%rax)
	if (md->kvs_sparse) {
    2140:	48 8b 43 40          	mov    0x40(%rbx),%rax
    2144:	48 85 c0             	test   %rax,%rax
    2147:	74 16                	je     215f <__commit_transaction+0xef>
		disk_super->hash_pbn_root = cpu_to_le64(md->kvs_sparse->root);
    2149:	48 8b 40 68          	mov    0x68(%rax),%rax
    214d:	49 89 85 2d 01 00 00 	mov    %rax,0x12d(%r13)
		disk_super->lpc_last = md->kvs_sparse->lpc_cur;
    2154:	48 8b 43 40          	mov    0x40(%rbx),%rax
    2158:	8b 40 70             	mov    0x70(%rax),%eax
    215b:	41 88 45 2c          	mov    %al,0x2c(%r13)
	r = dm_sm_copy_root(md->meta_sm,
    215f:	48 8b 7b 30          	mov    0x30(%rbx),%rdi
			    &disk_super->metadata_space_map_root, metadata_len);
    2163:	49 8d 75 2d          	lea    0x2d(%r13),%rsi
	return sm->copy_root(sm, copy_to_here_le, len);
    2167:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    216b:	48 8b 47 60          	mov    0x60(%rdi),%rax
    216f:	e8 00 00 00 00       	callq  2174 <__commit_transaction+0x104>
	if (r < 0)
    2174:	85 c0                	test   %eax,%eax
    2176:	78 64                	js     21dc <__commit_transaction+0x16c>
	r = dm_sm_copy_root(md->data_sm, &disk_super->data_space_map_root,
    2178:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
    217c:	49 8d b5 ad 00 00 00 	lea    0xad(%r13),%rsi
    2183:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    2187:	48 8b 47 60          	mov    0x60(%rdi),%rax
    218b:	e8 00 00 00 00       	callq  2190 <__commit_transaction+0x120>
	if (r < 0)
    2190:	85 c0                	test   %eax,%eax
    2192:	78 48                	js     21dc <__commit_transaction+0x16c>
    2194:	48 8b 53 50          	mov    0x50(%rbx),%rdx
    2198:	48 8b 43 48          	mov    0x48(%rbx),%rax
	disk_super->csum = cpu_to_le32(dm_bm_checksum(&disk_super->flags,
    219c:	49 8d 7d 10          	lea    0x10(%r13),%rdi
    21a0:	be 51 01 00 00       	mov    $0x151,%esi
    21a5:	49 89 95 45 01 00 00 	mov    %rdx,0x145(%r13)
    21ac:	49 89 85 3d 01 00 00 	mov    %rax,0x13d(%r13)
    21b3:	ba 87 e4 02 00       	mov    $0x2e487,%edx
    21b8:	e8 00 00 00 00       	callq  21bd <__commit_transaction+0x14d>
    21bd:	41 89 45 00          	mov    %eax,0x0(%r13)
	r = dm_tm_commit(md->tm, sblock);
    21c1:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
    21c5:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    21c9:	e8 00 00 00 00       	callq  21ce <__commit_transaction+0x15e>
    21ce:	e9 30 ff ff ff       	jmpq   2103 <__commit_transaction+0x93>
		disk_super->flags |= (1 << CLEAN_SHUTDOWN);
    21d3:	83 48 10 01          	orl    $0x1,0x10(%rax)
    21d7:	e9 64 ff ff ff       	jmpq   2140 <__commit_transaction+0xd0>
	dm_bm_unlock(sblock);
    21dc:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    21e0:	89 45 bc             	mov    %eax,-0x44(%rbp)
    21e3:	e8 00 00 00 00       	callq  21e8 <__commit_transaction+0x178>
    21e8:	8b 45 bc             	mov    -0x44(%rbp),%eax
	return r;
    21eb:	e9 13 ff ff ff       	jmpq   2103 <__commit_transaction+0x93>
}
    21f0:	e8 00 00 00 00       	callq  21f5 <__commit_transaction+0x185>
    21f5:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    21fc:	00 00 00 00 

0000000000002200 <flush_meta_hybrid>:
{
    2200:	e8 00 00 00 00       	callq  2205 <flush_meta_hybrid+0x5>
    2205:	55                   	push   %rbp
	r = __commit_transaction(md, clean_shutdown_flag);
    2206:	31 f6                	xor    %esi,%esi
{
    2208:	48 89 e5             	mov    %rsp,%rbp
    220b:	53                   	push   %rbx
    220c:	48 89 fb             	mov    %rdi,%rbx
	r = __commit_transaction(md, clean_shutdown_flag);
    220f:	e8 5c fe ff ff       	callq  2070 <__commit_transaction>
	if (r < 0)
    2214:	85 c0                	test   %eax,%eax
    2216:	78 08                	js     2220 <flush_meta_hybrid+0x20>
	r = __begin_transaction(md);
    2218:	48 89 df             	mov    %rbx,%rdi
    221b:	e8 d0 f6 ff ff       	callq  18f0 <__begin_transaction>
}
    2220:	5b                   	pop    %rbx
    2221:	5d                   	pop    %rbp
    2222:	c3                   	retq   
    2223:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    222a:	00 00 00 00 
    222e:	66 90                	xchg   %ax,%ax

0000000000002230 <exit_meta_hybrid>:
{
    2230:	e8 00 00 00 00       	callq  2235 <exit_meta_hybrid+0x5>
    2235:	55                   	push   %rbp
	ret = __commit_transaction(md, clean_shutdown_flag);
    2236:	be 01 00 00 00       	mov    $0x1,%esi
{
    223b:	48 89 e5             	mov    %rsp,%rbp
    223e:	53                   	push   %rbx
    223f:	48 89 fb             	mov    %rdi,%rbx
	ret = __commit_transaction(md, clean_shutdown_flag);
    2242:	e8 29 fe ff ff       	callq  2070 <__commit_transaction>
	if (ret < 0)
    2247:	85 c0                	test   %eax,%eax
    2249:	78 6e                	js     22b9 <exit_meta_hybrid+0x89>
	dm_sm_destroy(md->data_sm);
    224b:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
	sm->destroy(sm);
    224f:	48 8b 07             	mov    (%rdi),%rax
    2252:	e8 00 00 00 00       	callq  2257 <exit_meta_hybrid+0x27>
	dm_tm_destroy(md->tm);
    2257:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
    225b:	e8 00 00 00 00       	callq  2260 <exit_meta_hybrid+0x30>
	dm_sm_destroy(md->meta_sm);
    2260:	48 8b 7b 30          	mov    0x30(%rbx),%rdi
    2264:	48 8b 07             	mov    (%rdi),%rax
    2267:	e8 00 00 00 00       	callq  226c <exit_meta_hybrid+0x3c>
	dm_block_manager_destroy(md->meta_bm);
    226c:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
    2270:	e8 00 00 00 00       	callq  2275 <exit_meta_hybrid+0x45>
	if (md->smap)
    2275:	48 8b 3b             	mov    (%rbx),%rdi
    2278:	48 85 ff             	test   %rdi,%rdi
    227b:	74 05                	je     2282 <exit_meta_hybrid+0x52>
		vfree(md->smap);
    227d:	e8 00 00 00 00       	callq  2282 <exit_meta_hybrid+0x52>
	if (md->kvs_linear) {
    2282:	48 8b 7b 38          	mov    0x38(%rbx),%rdi
    2286:	48 85 ff             	test   %rdi,%rdi
    2289:	74 1a                	je     22a5 <exit_meta_hybrid+0x75>
		if (md->kvs_linear->store)
    228b:	48 8b 47 30          	mov    0x30(%rdi),%rax
    228f:	48 85 c0             	test   %rax,%rax
    2292:	74 0c                	je     22a0 <exit_meta_hybrid+0x70>
			vfree(md->kvs_linear->store);
    2294:	48 89 c7             	mov    %rax,%rdi
    2297:	e8 00 00 00 00       	callq  229c <exit_meta_hybrid+0x6c>
    229c:	48 8b 7b 38          	mov    0x38(%rbx),%rdi
		kfree(md->kvs_linear);
    22a0:	e8 00 00 00 00       	callq  22a5 <exit_meta_hybrid+0x75>
	kfree(md->kvs_sparse);
    22a5:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
    22a9:	e8 00 00 00 00       	callq  22ae <exit_meta_hybrid+0x7e>
	kfree(md);
    22ae:	48 89 df             	mov    %rbx,%rdi
    22b1:	e8 00 00 00 00       	callq  22b6 <exit_meta_hybrid+0x86>
}
    22b6:	5b                   	pop    %rbx
    22b7:	5d                   	pop    %rbp
    22b8:	c3                   	retq   
		DMWARN("%s: __commit_transaction() failed, error = %d.",
    22b9:	89 c2                	mov    %eax,%edx
    22bb:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    22c2:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    22c9:	e8 00 00 00 00       	callq  22ce <exit_meta_hybrid+0x9e>
    22ce:	e9 78 ff ff ff       	jmpq   224b <exit_meta_hybrid+0x1b>
    22d3:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    22da:	00 00 00 00 
    22de:	66 90                	xchg   %ax,%ax

00000000000022e0 <kvs_create_sparse_hybrid>:
{
    22e0:	e8 00 00 00 00       	callq  22e5 <kvs_create_sparse_hybrid+0x5>
	if (!vsize || !ksize)
    22e5:	85 d2                	test   %edx,%edx
    22e7:	74 14                	je     22fd <kvs_create_sparse_hybrid+0x1d>
    22e9:	85 f6                	test   %esi,%esi
    22eb:	74 10                	je     22fd <kvs_create_sparse_hybrid+0x1d>
	if (md->kvs_sparse)
    22ed:	48 83 7f 40 00       	cmpq   $0x0,0x40(%rdi)
		return ERR_PTR(-EBUSY);
    22f2:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax
	if (md->kvs_sparse)
    22f9:	74 0a                	je     2305 <kvs_create_sparse_hybrid+0x25>
}
    22fb:	f3 c3                	repz retq 
		return ERR_PTR(-ENOTSUPP);
    22fd:	48 c7 c0 f4 fd ff ff 	mov    $0xfffffffffffffdf4,%rax
    2304:	c3                   	retq   
{
    2305:	55                   	push   %rbp
    2306:	48 89 e5             	mov    %rsp,%rbp
    2309:	41 57                	push   %r15
    230b:	41 56                	push   %r14
    230d:	41 55                	push   %r13
    230f:	41 54                	push   %r12
    2311:	49 89 fe             	mov    %rdi,%r14
    2314:	53                   	push   %rbx
    2315:	41 89 f5             	mov    %esi,%r13d
    2318:	89 d3                	mov    %edx,%ebx
			return kmem_cache_alloc_trace(kmalloc_caches[index],
    231a:	be 00 00 60 00       	mov    $0x600000,%esi
    231f:	ba 78 00 00 00       	mov    $0x78,%edx
    2324:	45 89 c4             	mov    %r8d,%r12d
    2327:	48 83 ec 08          	sub    $0x8,%rsp
    232b:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 2332 <kvs_create_sparse_hybrid+0x52>
    2332:	e8 00 00 00 00       	callq  2337 <kvs_create_sparse_hybrid+0x57>
    2337:	49 89 c7             	mov    %rax,%r15
		return ERR_PTR(-ENOMEM);
    233a:	48 c7 c0 f4 ff ff ff 	mov    $0xfffffffffffffff4,%rax
	if (!kvs)
    2341:	4d 85 ff             	test   %r15,%r15
    2344:	0f 84 9b 00 00 00    	je     23e5 <kvs_create_sparse_hybrid+0x105>
	kvs->info.tm = md->tm;
    234a:	49 8b 46 20          	mov    0x20(%r14),%rax
	kvs->entry_size = vsize + ksize;
    234e:	42 8d 14 2b          	lea    (%rbx,%r13,1),%edx
	if (!unformatted) {
    2352:	45 84 e4             	test   %r12b,%r12b
	kvs->ckvs.vsize = vsize;
    2355:	41 89 1f             	mov    %ebx,(%r15)
	kvs->ckvs.ksize = ksize;
    2358:	45 89 6f 04          	mov    %r13d,0x4(%r15)
	kvs->entry_size = vsize + ksize;
    235c:	41 89 57 28          	mov    %edx,0x28(%r15)
	kvs->info.levels = 1;
    2360:	41 c7 47 38 01 00 00 	movl   $0x1,0x38(%r15)
    2367:	00 
	kvs->info.tm = md->tm;
    2368:	49 89 47 30          	mov    %rax,0x30(%r15)
	kvs->lpc_cur = 0;
    236c:	48 b8 00 00 00 00 05 	movabs $0x500000000,%rax
    2373:	00 00 00 
	kvs->info.value_type.context = NULL;
    2376:	49 c7 47 40 00 00 00 	movq   $0x0,0x40(%r15)
    237d:	00 
	kvs->info.value_type.size = kvs->entry_size;
    237e:	41 89 57 48          	mov    %edx,0x48(%r15)
	kvs->info.value_type.inc = NULL;
    2382:	49 c7 47 50 00 00 00 	movq   $0x0,0x50(%r15)
    2389:	00 
	kvs->info.value_type.dec = NULL;
    238a:	49 c7 47 58 00 00 00 	movq   $0x0,0x58(%r15)
    2391:	00 
	kvs->info.value_type.equal = NULL;
    2392:	49 c7 47 60 00 00 00 	movq   $0x0,0x60(%r15)
    2399:	00 
	kvs->lpc_cur = 0;
    239a:	49 89 47 70          	mov    %rax,0x70(%r15)
	if (!unformatted) {
    239e:	74 54                	je     23f4 <kvs_create_sparse_hybrid+0x114>
		r = dm_btree_empty(&(kvs->info), &(kvs->root), 2);
    23a0:	49 8d 77 68          	lea    0x68(%r15),%rsi
    23a4:	49 8d 7f 30          	lea    0x30(%r15),%rdi
    23a8:	ba 02 00 00 00       	mov    $0x2,%edx
    23ad:	e8 00 00 00 00       	callq  23b2 <kvs_create_sparse_hybrid+0xd2>
		if (r < 0) {
    23b2:	85 c0                	test   %eax,%eax
    23b4:	78 6c                	js     2422 <kvs_create_sparse_hybrid+0x142>
		flush_meta_hybrid(md);
    23b6:	4c 89 f7             	mov    %r14,%rdi
    23b9:	e8 42 fe ff ff       	callq  2200 <flush_meta_hybrid>
		kvs->ckvs.kvs_insert = kvs_insert_sparse_hybrid;
    23be:	49 c7 47 18 00 00 00 	movq   $0x0,0x18(%r15)
    23c5:	00 
		kvs->ckvs.kvs_lookup = kvs_lookup_sparse_hybrid;
    23c6:	49 c7 47 10 00 00 00 	movq   $0x0,0x10(%r15)
    23cd:	00 
		kvs->ckvs.kvs_delete = kvs_delete_sparse_hybrid;
    23ce:	49 c7 47 08 00 00 00 	movq   $0x0,0x8(%r15)
    23d5:	00 
		kvs->ckvs.kvs_iterate = kvs_iterate_sparse_hybrid;
    23d6:	49 c7 47 20 00 00 00 	movq   $0x0,0x20(%r15)
    23dd:	00 
		md->kvs_sparse = kvs;
    23de:	4d 89 7e 40          	mov    %r15,0x40(%r14)
	return &(kvs->ckvs);
    23e2:	4c 89 f8             	mov    %r15,%rax
}
    23e5:	48 83 c4 08          	add    $0x8,%rsp
    23e9:	5b                   	pop    %rbx
    23ea:	41 5c                	pop    %r12
    23ec:	41 5d                	pop    %r13
    23ee:	41 5e                	pop    %r14
    23f0:	41 5f                	pop    %r15
    23f2:	5d                   	pop    %rbp
    23f3:	c3                   	retq   
		md->kvs_sparse = kvs;
    23f4:	4d 89 7e 40          	mov    %r15,0x40(%r14)
		__begin_transaction(md);
    23f8:	4c 89 f7             	mov    %r14,%rdi
		kvs->ckvs.kvs_insert = kvs_insert_sparse_hybrid;
    23fb:	49 c7 47 18 00 00 00 	movq   $0x0,0x18(%r15)
    2402:	00 
		kvs->ckvs.kvs_lookup = kvs_lookup_sparse_hybrid;
    2403:	49 c7 47 10 00 00 00 	movq   $0x0,0x10(%r15)
    240a:	00 
		kvs->ckvs.kvs_delete = kvs_delete_sparse_hybrid;
    240b:	49 c7 47 08 00 00 00 	movq   $0x0,0x8(%r15)
    2412:	00 
		kvs->ckvs.kvs_iterate = kvs_iterate_sparse_hybrid;
    2413:	49 c7 47 20 00 00 00 	movq   $0x0,0x20(%r15)
    241a:	00 
		__begin_transaction(md);
    241b:	e8 d0 f4 ff ff       	callq  18f0 <__begin_transaction>
    2420:	eb c0                	jmp    23e2 <kvs_create_sparse_hybrid+0x102>
			kvs = ERR_PTR(r);
    2422:	48 98                	cltq   
	kfree(kvs);
    2424:	48 89 c7             	mov    %rax,%rdi
    2427:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    242b:	e8 00 00 00 00       	callq  2430 <kvs_create_sparse_hybrid+0x150>
    2430:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    2434:	eb af                	jmp    23e5 <kvs_create_sparse_hybrid+0x105>
    2436:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    243d:	00 00 00 

0000000000002440 <kvs_create_linear_hybrid>:
{
    2440:	e8 00 00 00 00       	callq  2445 <kvs_create_linear_hybrid+0x5>
    2445:	55                   	push   %rbp
    2446:	48 89 e5             	mov    %rsp,%rbp
    2449:	41 57                	push   %r15
    244b:	41 56                	push   %r14
    244d:	41 55                	push   %r13
    244f:	41 54                	push   %r12
    2451:	53                   	push   %rbx
    2452:	48 83 ec 08          	sub    $0x8,%rsp
	if (!vsize || !ksize || !kmax)
    2456:	85 c9                	test   %ecx,%ecx
    2458:	41 0f 94 c0          	sete   %r8b
	if (ksize != 8)
    245c:	83 fe 08             	cmp    $0x8,%esi
    245f:	0f 95 c0             	setne  %al
    2462:	41 08 c0             	or     %al,%r8b
    2465:	75 04                	jne    246b <kvs_create_linear_hybrid+0x2b>
    2467:	85 d2                	test   %edx,%edx
    2469:	75 19                	jne    2484 <kvs_create_linear_hybrid+0x44>
		return ERR_PTR(-ENOTSUPP);
    246b:	48 c7 c3 f4 fd ff ff 	mov    $0xfffffffffffffdf4,%rbx
}
    2472:	48 83 c4 08          	add    $0x8,%rsp
    2476:	48 89 d8             	mov    %rbx,%rax
    2479:	5b                   	pop    %rbx
    247a:	41 5c                	pop    %r12
    247c:	41 5d                	pop    %r13
    247e:	41 5e                	pop    %r14
    2480:	41 5f                	pop    %r15
    2482:	5d                   	pop    %rbp
    2483:	c3                   	retq   
	if (md->kvs_linear)
    2484:	48 83 7f 38 00       	cmpq   $0x0,0x38(%rdi)
		return ERR_PTR(-EBUSY);
    2489:	48 c7 c3 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rbx
	if (md->kvs_linear)
    2490:	75 e0                	jne    2472 <kvs_create_linear_hybrid+0x32>
    2492:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 2499 <kvs_create_linear_hybrid+0x59>
    2499:	41 89 d5             	mov    %edx,%r13d
    249c:	be 00 00 60 00       	mov    $0x600000,%esi
    24a1:	ba 38 00 00 00       	mov    $0x38,%edx
    24a6:	41 89 cc             	mov    %ecx,%r12d
		return ERR_PTR(-ENOMEM);
    24a9:	48 83 c3 04          	add    $0x4,%rbx
    24ad:	e8 00 00 00 00       	callq  24b2 <kvs_create_linear_hybrid+0x72>
	if (!kvs)
    24b2:	48 85 c0             	test   %rax,%rax
    24b5:	49 89 c7             	mov    %rax,%r15
    24b8:	74 b8                	je     2472 <kvs_create_linear_hybrid+0x32>
	kvstore_size = (kmax + 1) * vsize;
    24ba:	45 8d 74 24 01       	lea    0x1(%r12),%r14d
    24bf:	45 0f af f5          	imul   %r13d,%r14d
    24c3:	44 89 f0             	mov    %r14d,%eax
	kvs->store = vmalloc(kvstore_size);
    24c6:	48 89 c7             	mov    %rax,%rdi
	kvstore_size = (kmax + 1) * vsize;
    24c9:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	kvs->store = vmalloc(kvstore_size);
    24cd:	e8 00 00 00 00       	callq  24d2 <kvs_create_linear_hybrid+0x92>
	if (!kvs->store) {
    24d2:	48 85 c0             	test   %rax,%rax
	kvs->store = vmalloc(kvstore_size);
    24d5:	49 89 47 30          	mov    %rax,0x30(%r15)
	if (!kvs->store) {
    24d9:	75 0a                	jne    24e5 <kvs_create_linear_hybrid+0xa5>
		kfree(kvs);
    24db:	4c 89 ff             	mov    %r15,%rdi
    24de:	e8 00 00 00 00       	callq  24e3 <kvs_create_linear_hybrid+0xa3>
    24e3:	eb 8d                	jmp    2472 <kvs_create_linear_hybrid+0x32>
	(void)do_div(tmp, (1024 * 1024));
    24e5:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
    24e9:	44 89 f2             	mov    %r14d,%edx
	DMINFO("Space allocated for linear key value store: %llu.%06llu MB",
    24ec:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	(void)do_div(tmp, (1024 * 1024));
    24f3:	81 e2 ff ff 0f 00    	and    $0xfffff,%edx
    24f9:	48 89 de             	mov    %rbx,%rsi
    24fc:	48 c1 ee 14          	shr    $0x14,%rsi
	DMINFO("Space allocated for linear key value store: %llu.%06llu MB",
    2500:	e8 00 00 00 00       	callq  2505 <kvs_create_linear_hybrid+0xc5>
	return __builtin_memset(p, c, size);
    2505:	49 8b 7f 30          	mov    0x30(%r15),%rdi
    2509:	48 89 da             	mov    %rbx,%rdx
    250c:	be ff 00 00 00       	mov    $0xff,%esi
	return &(kvs->ckvs);
    2511:	4c 89 fb             	mov    %r15,%rbx
    2514:	e8 00 00 00 00       	callq  2519 <kvs_create_linear_hybrid+0xd9>
	kvs->ckvs.ksize = ksize;
    2519:	41 c7 47 04 08 00 00 	movl   $0x8,0x4(%r15)
    2520:	00 
	kvs->ckvs.vsize = vsize;
    2521:	45 89 2f             	mov    %r13d,(%r15)
	kvs->kmax = kmax;
    2524:	45 89 67 28          	mov    %r12d,0x28(%r15)
	kvs->ckvs.kvs_insert = kvs_insert_linear_hybrid;
    2528:	49 c7 47 18 00 00 00 	movq   $0x0,0x18(%r15)
    252f:	00 
	kvs->ckvs.kvs_lookup = kvs_lookup_linear_hybrid;
    2530:	49 c7 47 10 00 00 00 	movq   $0x0,0x10(%r15)
    2537:	00 
	kvs->ckvs.kvs_delete = kvs_delete_linear_hybrid;
    2538:	49 c7 47 08 00 00 00 	movq   $0x0,0x8(%r15)
    253f:	00 
	kvs->ckvs.kvs_iterate = NULL;
    2540:	49 c7 47 20 00 00 00 	movq   $0x0,0x20(%r15)
    2547:	00 
    2548:	e9 25 ff ff ff       	jmpq   2472 <kvs_create_linear_hybrid+0x32>
    254d:	0f 1f 00             	nopl   (%rax)

0000000000002550 <init_meta_hybrid>:
{
    2550:	e8 00 00 00 00       	callq  2555 <init_meta_hybrid+0x5>
    2555:	55                   	push   %rbp
    2556:	48 89 e5             	mov    %rsp,%rbp
    2559:	41 57                	push   %r15
    255b:	41 56                	push   %r14
    255d:	41 55                	push   %r13
    255f:	41 54                	push   %r12
    2561:	49 89 f5             	mov    %rsi,%r13
    2564:	53                   	push   %rbx
    2565:	49 89 fe             	mov    %rdi,%r14
	DMINFO("Initializing hybrid backend");
    2568:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
		return ERR_PTR(-ENOMEM);
    256f:	48 c7 c3 f4 ff ff ff 	mov    $0xfffffffffffffff4,%rbx
{
    2576:	48 83 ec 38          	sub    $0x38,%rsp
    257a:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    2581:	00 00 
    2583:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    2587:	31 c0                	xor    %eax,%eax
	DMINFO("Initializing hybrid backend");
    2589:	e8 00 00 00 00       	callq  258e <init_meta_hybrid+0x3e>
	*unformatted = true;
    258e:	41 c6 45 00 01       	movb   $0x1,0x0(%r13)
    2593:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 259a <init_meta_hybrid+0x4a>
    259a:	ba 58 00 00 00       	mov    $0x58,%edx
    259f:	be 00 80 60 00       	mov    $0x608000,%esi
    25a4:	e8 00 00 00 00       	callq  25a9 <init_meta_hybrid+0x59>
	if (!md)
    25a9:	48 85 c0             	test   %rax,%rax
    25ac:	74 56                	je     2604 <init_meta_hybrid+0xb4>
	meta_bm = dm_block_manager_create(p->metadata_bdev, METADATA_BSIZE,
    25ae:	49 8b 3e             	mov    (%r14),%rdi
    25b1:	ba 05 00 00 00       	mov    $0x5,%edx
    25b6:	be 00 10 00 00       	mov    $0x1000,%esi
    25bb:	48 89 c3             	mov    %rax,%rbx
    25be:	e8 00 00 00 00       	callq  25c3 <init_meta_hybrid+0x73>
	if (IS_ERR(meta_bm)) {
    25c3:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
	meta_bm = dm_block_manager_create(p->metadata_bdev, METADATA_BSIZE,
    25c9:	49 89 c4             	mov    %rax,%r12
	if (IS_ERR(meta_bm)) {
    25cc:	0f 87 e1 01 00 00    	ja     27b3 <init_meta_hybrid+0x263>
	unsigned int sb_block_size = dm_bm_block_size(bm) / sizeof(__le64);
    25d2:	48 89 c7             	mov    %rax,%rdi
    25d5:	e8 00 00 00 00       	callq  25da <init_meta_hybrid+0x8a>
	r = dm_bm_read_lock(bm, METADATA_SUPERBLOCK_LOCATION, NULL, &b);
    25da:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
    25de:	31 d2                	xor    %edx,%edx
    25e0:	31 f6                	xor    %esi,%esi
    25e2:	4c 89 e7             	mov    %r12,%rdi
	unsigned int sb_block_size = dm_bm_block_size(bm) / sizeof(__le64);
    25e5:	41 89 c7             	mov    %eax,%r15d
	r = dm_bm_read_lock(bm, METADATA_SUPERBLOCK_LOCATION, NULL, &b);
    25e8:	e8 00 00 00 00       	callq  25ed <init_meta_hybrid+0x9d>
	if (r)
    25ed:	85 c0                	test   %eax,%eax
    25ef:	74 38                	je     2629 <init_meta_hybrid+0xd9>
		md = ERR_PTR(ret);
    25f1:	48 63 d8             	movslq %eax,%rbx
	dm_block_manager_destroy(meta_bm);
    25f4:	4c 89 e7             	mov    %r12,%rdi
    25f7:	e8 00 00 00 00       	callq  25fc <init_meta_hybrid+0xac>
	kfree(md);
    25fc:	48 89 df             	mov    %rbx,%rdi
    25ff:	e8 00 00 00 00       	callq  2604 <init_meta_hybrid+0xb4>
}
    2604:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    2608:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
    260f:	00 00 
    2611:	48 89 d8             	mov    %rbx,%rax
    2614:	0f 85 32 02 00 00    	jne    284c <init_meta_hybrid+0x2fc>
    261a:	48 83 c4 38          	add    $0x38,%rsp
    261e:	5b                   	pop    %rbx
    261f:	41 5c                	pop    %r12
    2621:	41 5d                	pop    %r13
    2623:	41 5e                	pop    %r14
    2625:	41 5f                	pop    %r15
    2627:	5d                   	pop    %rbp
    2628:	c3                   	retq   
	data_le = dm_block_data(b);
    2629:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
	unsigned int sb_block_size = dm_bm_block_size(bm) / sizeof(__le64);
    262d:	41 c1 ef 03          	shr    $0x3,%r15d
	data_le = dm_block_data(b);
    2631:	e8 00 00 00 00       	callq  2636 <init_meta_hybrid+0xe6>
	for (i = 0; i < sb_block_size; i++) {
    2636:	45 85 ff             	test   %r15d,%r15d
	*result = true;
    2639:	41 c6 45 00 01       	movb   $0x1,0x0(%r13)
	for (i = 0; i < sb_block_size; i++) {
    263e:	74 2d                	je     266d <init_meta_hybrid+0x11d>
		if (data_le[i] != zero) {
    2640:	48 83 38 00          	cmpq   $0x0,(%rax)
    2644:	0f 85 5f 01 00 00    	jne    27a9 <init_meta_hybrid+0x259>
    264a:	41 8d 4f ff          	lea    -0x1(%r15),%ecx
    264e:	48 8d 50 08          	lea    0x8(%rax),%rdx
    2652:	48 8d 44 c8 08       	lea    0x8(%rax,%rcx,8),%rax
    2657:	eb 0f                	jmp    2668 <init_meta_hybrid+0x118>
    2659:	48 83 c2 08          	add    $0x8,%rdx
    265d:	48 83 7a f8 00       	cmpq   $0x0,-0x8(%rdx)
    2662:	0f 85 41 01 00 00    	jne    27a9 <init_meta_hybrid+0x259>
	for (i = 0; i < sb_block_size; i++) {
    2668:	48 39 d0             	cmp    %rdx,%rax
    266b:	75 ec                	jne    2659 <init_meta_hybrid+0x109>
	dm_bm_unlock(b);
    266d:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    2671:	e8 00 00 00 00       	callq  2676 <init_meta_hybrid+0x126>
	if (!*unformatted) {
    2676:	41 80 7d 00 00       	cmpb   $0x0,0x0(%r13)
    267b:	0f 84 d0 01 00 00    	je     2851 <init_meta_hybrid+0x301>
	ret = dm_tm_create_with_sm(meta_bm, METADATA_SUPERBLOCK_LOCATION,
    2681:	48 8d 4d a8          	lea    -0x58(%rbp),%rcx
    2685:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    2689:	31 f6                	xor    %esi,%esi
    268b:	4c 89 e7             	mov    %r12,%rdi
    268e:	e8 00 00 00 00       	callq  2693 <init_meta_hybrid+0x143>
	if (ret < 0) {
    2693:	85 c0                	test   %eax,%eax
    2695:	0f 88 56 ff ff ff    	js     25f1 <init_meta_hybrid+0xa1>
	data_sm = dm_sm_disk_create(tm, p->blocks);
    269b:	49 8b 76 08          	mov    0x8(%r14),%rsi
    269f:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    26a3:	e8 00 00 00 00       	callq  26a8 <init_meta_hybrid+0x158>
	if (IS_ERR(data_sm)) {
    26a8:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
	data_sm = dm_sm_disk_create(tm, p->blocks);
    26ae:	49 89 c5             	mov    %rax,%r13
	if (IS_ERR(data_sm)) {
    26b1:	0f 87 04 01 00 00    	ja     27bb <init_meta_hybrid+0x26b>
	md->tm = tm;
    26b7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
	md->meta_sm = meta_sm;
    26bb:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
	return sm->root_size(sm, result);
    26bf:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
	md->meta_bm = meta_bm;
    26c3:	4c 89 63 18          	mov    %r12,0x18(%rbx)
	md->data_sm = data_sm;
    26c7:	4c 89 6b 28          	mov    %r13,0x28(%rbx)
	md->tm = tm;
    26cb:	48 89 43 20          	mov    %rax,0x20(%rbx)
	md->meta_sm = meta_sm;
    26cf:	48 89 7b 30          	mov    %rdi,0x30(%rbx)
    26d3:	48 8b 47 58          	mov    0x58(%rdi),%rax
    26d7:	e8 00 00 00 00       	callq  26dc <init_meta_hybrid+0x18c>
	if (r < 0)
    26dc:	85 c0                	test   %eax,%eax
    26de:	0f 88 9c 00 00 00    	js     2780 <init_meta_hybrid+0x230>
	r = dm_sm_root_size(md->data_sm, &data_len);
    26e4:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
    26e8:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
    26ec:	48 8b 47 58          	mov    0x58(%rdi),%rax
    26f0:	e8 00 00 00 00       	callq  26f5 <init_meta_hybrid+0x1a5>
	if (r < 0)
    26f5:	85 c0                	test   %eax,%eax
    26f7:	0f 88 83 00 00 00    	js     2780 <init_meta_hybrid+0x230>
	r = dm_sm_commit(md->data_sm);
    26fd:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
	return sm->commit(sm);
    2701:	48 8b 47 38          	mov    0x38(%rdi),%rax
    2705:	e8 00 00 00 00       	callq  270a <init_meta_hybrid+0x1ba>
	if (r < 0)
    270a:	85 c0                	test   %eax,%eax
    270c:	78 72                	js     2780 <init_meta_hybrid+0x230>
	r = dm_tm_pre_commit(md->tm);
    270e:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
    2712:	e8 00 00 00 00       	callq  2717 <init_meta_hybrid+0x1c7>
	if (r < 0)
    2717:	85 c0                	test   %eax,%eax
    2719:	78 65                	js     2780 <init_meta_hybrid+0x230>
	r = dm_bm_write_lock_zero(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
    271b:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
    271f:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
    2723:	31 d2                	xor    %edx,%edx
    2725:	31 f6                	xor    %esi,%esi
    2727:	e8 00 00 00 00       	callq  272c <init_meta_hybrid+0x1dc>
	if (r < 0)
    272c:	85 c0                	test   %eax,%eax
    272e:	78 50                	js     2780 <init_meta_hybrid+0x230>
	disk_super = dm_block_data(sblock);
    2730:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    2734:	e8 00 00 00 00       	callq  2739 <init_meta_hybrid+0x1e9>
	r = dm_sm_copy_root(md->meta_sm, &disk_super->metadata_space_map_root,
    2739:	48 8b 7b 30          	mov    0x30(%rbx),%rdi
    273d:	48 8d 70 2d          	lea    0x2d(%rax),%rsi
	disk_super = dm_block_data(sblock);
    2741:	49 89 c7             	mov    %rax,%r15
	return sm->copy_root(sm, copy_to_here_le, len);
    2744:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    2748:	48 8b 47 60          	mov    0x60(%rdi),%rax
    274c:	e8 00 00 00 00       	callq  2751 <init_meta_hybrid+0x201>
	if (r < 0)
    2751:	85 c0                	test   %eax,%eax
    2753:	78 1c                	js     2771 <init_meta_hybrid+0x221>
	r = dm_sm_copy_root(md->data_sm, &disk_super->data_space_map_root,
    2755:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
    2759:	49 8d b7 ad 00 00 00 	lea    0xad(%r15),%rsi
    2760:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    2764:	48 8b 47 60          	mov    0x60(%rdi),%rax
    2768:	e8 00 00 00 00       	callq  276d <init_meta_hybrid+0x21d>
	if (r < 0)
    276d:	85 c0                	test   %eax,%eax
    276f:	79 4f                	jns    27c0 <init_meta_hybrid+0x270>
	dm_bm_unlock(sblock);
    2771:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    2775:	89 45 a4             	mov    %eax,-0x5c(%rbp)
    2778:	e8 00 00 00 00       	callq  277d <init_meta_hybrid+0x22d>
    277d:	8b 45 a4             	mov    -0x5c(%rbp),%eax
		md = ERR_PTR(ret);
    2780:	48 63 d8             	movslq %eax,%rbx
	sm->destroy(sm);
    2783:	4c 89 ef             	mov    %r13,%rdi
    2786:	49 8b 45 00          	mov    0x0(%r13),%rax
    278a:	e8 00 00 00 00       	callq  278f <init_meta_hybrid+0x23f>
	dm_tm_destroy(tm);
    278f:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    2793:	e8 00 00 00 00       	callq  2798 <init_meta_hybrid+0x248>
	dm_sm_destroy(meta_sm);
    2798:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
    279c:	48 8b 07             	mov    (%rdi),%rax
    279f:	e8 00 00 00 00       	callq  27a4 <init_meta_hybrid+0x254>
    27a4:	e9 4b fe ff ff       	jmpq   25f4 <init_meta_hybrid+0xa4>
			*result = false;
    27a9:	41 c6 45 00 00       	movb   $0x0,0x0(%r13)
    27ae:	e9 ba fe ff ff       	jmpq   266d <init_meta_hybrid+0x11d>
		md = (struct metadata *)meta_bm;
    27b3:	48 89 c3             	mov    %rax,%rbx
    27b6:	e9 41 fe ff ff       	jmpq   25fc <init_meta_hybrid+0xac>
		md = (struct metadata *)data_sm;
    27bb:	48 89 c3             	mov    %rax,%rbx
    27be:	eb cf                	jmp    278f <init_meta_hybrid+0x23f>
	disk_super->data_block_size = cpu_to_le32(METADATA_BSIZE);
    27c0:	48 b8 00 10 00 00 00 	movabs $0x100000001000,%rax
    27c7:	10 00 00 
	disk_super->magic = cpu_to_le32(DM_DEDUP_MAGIC);
    27ca:	49 c7 47 04 70 75 44 	movq   $0x44447570,0x4(%r15)
    27d1:	44 
	disk_super->version = DM_DEDUP_VERSION;
    27d2:	41 c7 47 0c 01 00 00 	movl   $0x1,0xc(%r15)
    27d9:	00 
	disk_super->data_block_size = cpu_to_le32(METADATA_BSIZE);
    27da:	49 89 87 35 01 00 00 	mov    %rax,0x135(%r15)
	disk_super->blocknr = cpu_to_le64(dm_block_location(sblock));
    27e1:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    27e5:	e8 00 00 00 00       	callq  27ea <init_meta_hybrid+0x29a>
	disk_super->flags &= ~(1 << CLEAN_SHUTDOWN);
    27ea:	41 83 67 10 fe       	andl   $0xfffffffe,0x10(%r15)
	disk_super->blocknr = cpu_to_le64(dm_block_location(sblock));
    27ef:	49 89 47 14          	mov    %rax,0x14(%r15)
	return dm_tm_commit(md->tm, sblock);
    27f3:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
    27f7:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    27fb:	e8 00 00 00 00       	callq  2800 <init_meta_hybrid+0x2b0>
	if (ret < 0) {
    2800:	85 c0                	test   %eax,%eax
    2802:	0f 88 78 ff ff ff    	js     2780 <init_meta_hybrid+0x230>
	ret = __begin_transaction(md);
    2808:	48 89 df             	mov    %rbx,%rdi
    280b:	e8 e0 f0 ff ff       	callq  18f0 <__begin_transaction>
	if (ret < 0) {
    2810:	85 c0                	test   %eax,%eax
    2812:	0f 88 68 ff ff ff    	js     2780 <init_meta_hybrid+0x230>
	smap_size = p->blocks * sizeof(uint32_t);
    2818:	49 8b 46 08          	mov    0x8(%r14),%rax
    281c:	4c 8d 24 85 00 00 00 	lea    0x0(,%rax,4),%r12
    2823:	00 
	md->smap = vmalloc(smap_size);
    2824:	4c 89 e7             	mov    %r12,%rdi
    2827:	e8 00 00 00 00       	callq  282c <init_meta_hybrid+0x2dc>
	if (!md->smap) {
    282c:	48 85 c0             	test   %rax,%rax
	md->smap = vmalloc(smap_size);
    282f:	48 89 03             	mov    %rax,(%rbx)
	if (!md->smap) {
    2832:	0f 85 c6 00 00 00    	jne    28fe <init_meta_hybrid+0x3ae>
		kfree(md);
    2838:	48 89 df             	mov    %rbx,%rdi
		return ERR_PTR(-ENOMEM);
    283b:	48 c7 c3 f4 ff ff ff 	mov    $0xfffffffffffffff4,%rbx
		kfree(md);
    2842:	e8 00 00 00 00       	callq  2847 <init_meta_hybrid+0x2f7>
		return ERR_PTR(-ENOMEM);
    2847:	e9 b8 fd ff ff       	jmpq   2604 <init_meta_hybrid+0xb4>
}
    284c:	e8 00 00 00 00       	callq  2851 <init_meta_hybrid+0x301>
		DMINFO("Reconstruct DDUP device");
    2851:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    2858:	e8 00 00 00 00       	callq  285d <init_meta_hybrid+0x30d>
	r = dm_bm_read_lock(bm, METADATA_SUPERBLOCK_LOCATION,
    285d:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
    2861:	31 d2                	xor    %edx,%edx
    2863:	31 f6                	xor    %esi,%esi
    2865:	4c 89 e7             	mov    %r12,%rdi
    2868:	e8 00 00 00 00       	callq  286d <init_meta_hybrid+0x31d>
	if (r)
    286d:	85 c0                	test   %eax,%eax
	r = dm_bm_read_lock(bm, METADATA_SUPERBLOCK_LOCATION,
    286f:	41 89 c5             	mov    %eax,%r13d
	if (r)
    2872:	0f 84 15 01 00 00    	je     298d <init_meta_hybrid+0x43d>
		if (ret < 0) {
    2878:	45 85 ed             	test   %r13d,%r13d
    287b:	0f 88 fb 00 00 00    	js     297c <init_meta_hybrid+0x42c>
		ret = dm_bm_read_lock(meta_bm, METADATA_SUPERBLOCK_LOCATION,
    2881:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
    2885:	31 d2                	xor    %edx,%edx
    2887:	31 f6                	xor    %esi,%esi
		md->meta_bm = meta_bm;
    2889:	4c 89 63 18          	mov    %r12,0x18(%rbx)
		ret = dm_bm_read_lock(meta_bm, METADATA_SUPERBLOCK_LOCATION,
    288d:	4c 89 e7             	mov    %r12,%rdi
    2890:	e8 00 00 00 00       	callq  2895 <init_meta_hybrid+0x345>
		if (ret < 0) {
    2895:	85 c0                	test   %eax,%eax
    2897:	0f 88 ce 00 00 00    	js     296b <init_meta_hybrid+0x41b>
		disk_super = dm_block_data(sblock);
    289d:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    28a1:	e8 00 00 00 00       	callq  28a6 <init_meta_hybrid+0x356>
		ret = dm_tm_open_with_sm(meta_bm, METADATA_SUPERBLOCK_LOCATION,
    28a6:	4c 8d 4b 30          	lea    0x30(%rbx),%r9
					 disk_super->metadata_space_map_root,
    28aa:	48 8d 50 2d          	lea    0x2d(%rax),%rdx
		ret = dm_tm_open_with_sm(meta_bm, METADATA_SUPERBLOCK_LOCATION,
    28ae:	4c 8d 43 20          	lea    0x20(%rbx),%r8
    28b2:	31 f6                	xor    %esi,%esi
    28b4:	b9 80 00 00 00       	mov    $0x80,%ecx
    28b9:	4c 89 e7             	mov    %r12,%rdi
		disk_super = dm_block_data(sblock);
    28bc:	49 89 c5             	mov    %rax,%r13
		ret = dm_tm_open_with_sm(meta_bm, METADATA_SUPERBLOCK_LOCATION,
    28bf:	e8 00 00 00 00       	callq  28c4 <init_meta_hybrid+0x374>
		if (ret < 0) {
    28c4:	85 c0                	test   %eax,%eax
    28c6:	0f 88 8e 00 00 00    	js     295a <init_meta_hybrid+0x40a>
		md->data_sm = dm_sm_disk_open(md->tm,
    28cc:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
					      disk_super->data_space_map_root,
    28d0:	49 8d b5 ad 00 00 00 	lea    0xad(%r13),%rsi
		md->data_sm = dm_sm_disk_open(md->tm,
    28d7:	ba 80 00 00 00       	mov    $0x80,%edx
    28dc:	e8 00 00 00 00       	callq  28e1 <init_meta_hybrid+0x391>
		if (IS_ERR(md->data_sm)) {
    28e1:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
		md->data_sm = dm_sm_disk_open(md->tm,
    28e7:	48 89 43 28          	mov    %rax,0x28(%rbx)
		if (IS_ERR(md->data_sm)) {
    28eb:	77 5f                	ja     294c <init_meta_hybrid+0x3fc>
		dm_bm_unlock(sblock);
    28ed:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
	struct dm_space_map *data_sm = NULL;
    28f1:	45 31 ed             	xor    %r13d,%r13d
		dm_bm_unlock(sblock);
    28f4:	e8 00 00 00 00       	callq  28f9 <init_meta_hybrid+0x3a9>
    28f9:	e9 0a ff ff ff       	jmpq   2808 <init_meta_hybrid+0x2b8>
	(void)do_div(tmp, (1024 * 1024));
    28fe:	4c 89 e2             	mov    %r12,%rdx
    2901:	4c 89 e6             	mov    %r12,%rsi
	DMINFO("Space allocated for pbn reference count map: %llu.%06llu MB",
    2904:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	(void)do_div(tmp, (1024 * 1024));
    290b:	81 e2 ff ff 0f 00    	and    $0xfffff,%edx
    2911:	48 c1 ee 14          	shr    $0x14,%rsi
	DMINFO("Space allocated for pbn reference count map: %llu.%06llu MB",
    2915:	e8 00 00 00 00       	callq  291a <init_meta_hybrid+0x3ca>
    291a:	48 8b 3b             	mov    (%rbx),%rdi
    291d:	4c 89 e2             	mov    %r12,%rdx
    2920:	31 f6                	xor    %esi,%esi
    2922:	e8 00 00 00 00       	callq  2927 <init_meta_hybrid+0x3d7>
	md->smax = p->blocks;
    2927:	49 8b 46 08          	mov    0x8(%r14),%rax
	md->allocptr = 0;
    292b:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    2932:	00 
	md->kvs_linear = NULL;
    2933:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
    293a:	00 
	md->kvs_sparse = NULL;
    293b:	48 c7 43 40 00 00 00 	movq   $0x0,0x40(%rbx)
    2942:	00 
	md->smax = p->blocks;
    2943:	48 89 43 08          	mov    %rax,0x8(%rbx)
	return md;
    2947:	e9 b8 fc ff ff       	jmpq   2604 <init_meta_hybrid+0xb4>
			DMERR("dm_disk_open failed");
    294c:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    2953:	e8 00 00 00 00       	callq  2958 <init_meta_hybrid+0x408>
    2958:	eb 93                	jmp    28ed <init_meta_hybrid+0x39d>
			DMERR("could not open_with_sm superblock");
    295a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    2961:	e8 00 00 00 00       	callq  2966 <init_meta_hybrid+0x416>
    2966:	e9 61 ff ff ff       	jmpq   28cc <init_meta_hybrid+0x37c>
			DMERR("could not read_lock superblock");
    296b:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    2972:	e8 00 00 00 00       	callq  2977 <init_meta_hybrid+0x427>
    2977:	e9 21 ff ff ff       	jmpq   289d <init_meta_hybrid+0x34d>
			DMERR("superblock verification failed");
    297c:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    2983:	e8 00 00 00 00       	callq  2988 <init_meta_hybrid+0x438>
    2988:	e9 f4 fe ff ff       	jmpq   2881 <init_meta_hybrid+0x331>
	disk_super = dm_block_data(sblock);
    298d:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    2991:	e8 00 00 00 00       	callq  2996 <init_meta_hybrid+0x446>
	csum_le = cpu_to_le32(dm_bm_checksum(&disk_super->flags,
    2996:	48 8d 78 10          	lea    0x10(%rax),%rdi
	disk_super = dm_block_data(sblock);
    299a:	49 89 c7             	mov    %rax,%r15
	csum_le = cpu_to_le32(dm_bm_checksum(&disk_super->flags,
    299d:	ba 87 e4 02 00       	mov    $0x2e487,%edx
    29a2:	be 51 01 00 00       	mov    $0x151,%esi
    29a7:	e8 00 00 00 00       	callq  29ac <init_meta_hybrid+0x45c>
	if (csum_le != disk_super->csum) {
    29ac:	41 3b 07             	cmp    (%r15),%eax
    29af:	0f 85 94 00 00 00    	jne    2a49 <init_meta_hybrid+0x4f9>
	if (le64_to_cpu(disk_super->magic) != DM_DEDUP_MAGIC) {
    29b5:	49 81 7f 04 70 75 44 	cmpq   $0x44447570,0x4(%r15)
    29bc:	44 
    29bd:	75 78                	jne    2a37 <init_meta_hybrid+0x4e7>
	if (disk_super->version != DM_DEDUP_VERSION) {
    29bf:	41 83 7f 0c 01       	cmpl   $0x1,0xc(%r15)
    29c4:	75 5f                	jne    2a25 <init_meta_hybrid+0x4d5>
	if (le32_to_cpu(disk_super->data_block_size) != METADATA_BSIZE) {
    29c6:	41 81 bf 35 01 00 00 	cmpl   $0x1000,0x135(%r15)
    29cd:	00 10 00 00 
    29d1:	75 40                	jne    2a13 <init_meta_hybrid+0x4c3>
	if (le32_to_cpu(disk_super->metadata_block_size) != METADATA_BSIZE) {
    29d3:	41 81 bf 39 01 00 00 	cmpl   $0x1000,0x139(%r15)
    29da:	00 10 00 00 
    29de:	75 21                	jne    2a01 <init_meta_hybrid+0x4b1>
	if (!(disk_super->flags & (1 << CLEAN_SHUTDOWN)))
    29e0:	41 f6 47 10 01       	testb  $0x1,0x10(%r15)
    29e5:	75 0c                	jne    29f3 <init_meta_hybrid+0x4a3>
		DMWARN("Possible data Inconsistency. Run dmdedup_corruption_check tool");
    29e7:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    29ee:	e8 00 00 00 00       	callq  29f3 <init_meta_hybrid+0x4a3>
	dm_bm_unlock(sblock);
    29f3:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    29f7:	e8 00 00 00 00       	callq  29fc <init_meta_hybrid+0x4ac>
    29fc:	e9 77 fe ff ff       	jmpq   2878 <init_meta_hybrid+0x328>
		DMERR("Metadata block size mismatch");
    2a01:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	r = -1;
    2a08:	41 83 cd ff          	or     $0xffffffff,%r13d
		DMERR("Metadata block size mismatch");
    2a0c:	e8 00 00 00 00       	callq  2a11 <init_meta_hybrid+0x4c1>
    2a11:	eb e0                	jmp    29f3 <init_meta_hybrid+0x4a3>
		DMERR("Data block size mismatch");
    2a13:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	r = -1;
    2a1a:	41 83 cd ff          	or     $0xffffffff,%r13d
		DMERR("Data block size mismatch");
    2a1e:	e8 00 00 00 00       	callq  2a23 <init_meta_hybrid+0x4d3>
    2a23:	eb ce                	jmp    29f3 <init_meta_hybrid+0x4a3>
		DMERR("Version number mismatch");
    2a25:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	r = -1;
    2a2c:	41 83 cd ff          	or     $0xffffffff,%r13d
		DMERR("Version number mismatch");
    2a30:	e8 00 00 00 00       	callq  2a35 <init_meta_hybrid+0x4e5>
    2a35:	eb bc                	jmp    29f3 <init_meta_hybrid+0x4a3>
		DMERR("Magic number mismatch");
    2a37:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	r = -1;
    2a3e:	41 83 cd ff          	or     $0xffffffff,%r13d
		DMERR("Magic number mismatch");
    2a42:	e8 00 00 00 00       	callq  2a47 <init_meta_hybrid+0x4f7>
    2a47:	eb aa                	jmp    29f3 <init_meta_hybrid+0x4a3>
		DMERR("Superblock checksum verification failed");
    2a49:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	r = -1;
    2a50:	41 83 cd ff          	or     $0xffffffff,%r13d
		DMERR("Superblock checksum verification failed");
    2a54:	e8 00 00 00 00       	callq  2a59 <init_meta_hybrid+0x509>
    2a59:	eb 98                	jmp    29f3 <init_meta_hybrid+0x4a3>
    2a5b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002a60 <is_deleted_entry_hybrid>:
{
    2a60:	e8 00 00 00 00       	callq  2a65 <is_deleted_entry_hybrid+0x5>
    2a65:	55                   	push   %rbp
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    2a66:	85 f6                	test   %esi,%esi
{
    2a68:	48 89 e5             	mov    %rsp,%rbp
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    2a6b:	74 22                	je     2a8f <is_deleted_entry_hybrid+0x2f>
    2a6d:	80 3f 6b             	cmpb   $0x6b,(%rdi)
    2a70:	75 1d                	jne    2a8f <is_deleted_entry_hybrid+0x2f>
	int i = 0;
    2a72:	31 c0                	xor    %eax,%eax
    2a74:	eb 09                	jmp    2a7f <is_deleted_entry_hybrid+0x1f>
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    2a76:	48 63 d0             	movslq %eax,%rdx
    2a79:	80 3c 17 6b          	cmpb   $0x6b,(%rdi,%rdx,1)
    2a7d:	75 09                	jne    2a88 <is_deleted_entry_hybrid+0x28>
		i++;
    2a7f:	83 c0 01             	add    $0x1,%eax
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    2a82:	39 f0                	cmp    %esi,%eax
    2a84:	89 c1                	mov    %eax,%ecx
    2a86:	75 ee                	jne    2a76 <is_deleted_entry_hybrid+0x16>
	return i == length;
    2a88:	39 ce                	cmp    %ecx,%esi
    2a8a:	0f 94 c0             	sete   %al
}
    2a8d:	5d                   	pop    %rbp
    2a8e:	c3                   	retq   
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    2a8f:	31 c9                	xor    %ecx,%ecx
	return i == length;
    2a91:	39 ce                	cmp    %ecx,%esi
    2a93:	0f 94 c0             	sete   %al
}
    2a96:	5d                   	pop    %rbp
    2a97:	c3                   	retq   
    2a98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    2a9f:	00 

0000000000002aa0 <is_empty_entry_hybrid>:
{
    2aa0:	e8 00 00 00 00       	callq  2aa5 <is_empty_entry_hybrid+0x5>
    2aa5:	55                   	push   %rbp
	while ((i < length) && (ptr[i] == EMPTY_ENTRY))
    2aa6:	85 f6                	test   %esi,%esi
{
    2aa8:	48 89 e5             	mov    %rsp,%rbp
	while ((i < length) && (ptr[i] == EMPTY_ENTRY))
    2aab:	7e 25                	jle    2ad2 <is_empty_entry_hybrid+0x32>
    2aad:	80 3f ff             	cmpb   $0xff,(%rdi)
    2ab0:	75 20                	jne    2ad2 <is_empty_entry_hybrid+0x32>
    2ab2:	48 83 c7 01          	add    $0x1,%rdi
	int i = 0;
    2ab6:	31 c0                	xor    %eax,%eax
    2ab8:	eb 0a                	jmp    2ac4 <is_empty_entry_hybrid+0x24>
    2aba:	48 83 c7 01          	add    $0x1,%rdi
	while ((i < length) && (ptr[i] == EMPTY_ENTRY))
    2abe:	80 7f ff ff          	cmpb   $0xff,-0x1(%rdi)
    2ac2:	75 07                	jne    2acb <is_empty_entry_hybrid+0x2b>
		i++;
    2ac4:	83 c0 01             	add    $0x1,%eax
	while ((i < length) && (ptr[i] == EMPTY_ENTRY))
    2ac7:	39 c6                	cmp    %eax,%esi
    2ac9:	75 ef                	jne    2aba <is_empty_entry_hybrid+0x1a>
	return i == length;
    2acb:	39 c6                	cmp    %eax,%esi
    2acd:	0f 94 c0             	sete   %al
}
    2ad0:	5d                   	pop    %rbp
    2ad1:	c3                   	retq   
	int i = 0;
    2ad2:	31 c0                	xor    %eax,%eax
	return i == length;
    2ad4:	39 c6                	cmp    %eax,%esi
    2ad6:	0f 94 c0             	sete   %al
}
    2ad9:	5d                   	pop    %rbp
    2ada:	c3                   	retq   
    2adb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002ae0 <alloc_data_block_cowbtree>:
/********************************************************
 *		Space Management Functions		*
 ********************************************************/

static int alloc_data_block_cowbtree(struct metadata *md, uint64_t *blockn)
{
    2ae0:	e8 00 00 00 00       	callq  2ae5 <alloc_data_block_cowbtree+0x5>
    2ae5:	55                   	push   %rbp
	return dm_sm_new_block(md->data_sm, blockn);
    2ae6:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
{
    2aea:	48 89 e5             	mov    %rsp,%rbp
	return sm->new_block(sm, b);
    2aed:	48 8b 47 50          	mov    0x50(%rdi),%rax
    2af1:	e8 00 00 00 00       	callq  2af6 <alloc_data_block_cowbtree+0x16>
}
    2af6:	5d                   	pop    %rbp
    2af7:	c3                   	retq   
    2af8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    2aff:	00 

0000000000002b00 <inc_refcount_cowbtree>:

static int inc_refcount_cowbtree(struct metadata *md, uint64_t blockn)
{
    2b00:	e8 00 00 00 00       	callq  2b05 <inc_refcount_cowbtree+0x5>
    2b05:	55                   	push   %rbp
	return dm_sm_inc_block(md->data_sm, blockn);
    2b06:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
{
    2b0a:	48 89 e5             	mov    %rsp,%rbp
	return sm->inc_block(sm, b);
    2b0d:	48 8b 47 40          	mov    0x40(%rdi),%rax
    2b11:	e8 00 00 00 00       	callq  2b16 <inc_refcount_cowbtree+0x16>
}
    2b16:	5d                   	pop    %rbp
    2b17:	c3                   	retq   
    2b18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    2b1f:	00 

0000000000002b20 <dec_refcount_cowbtree>:

static int dec_refcount_cowbtree(struct metadata *md, uint64_t blockn)
{
    2b20:	e8 00 00 00 00       	callq  2b25 <dec_refcount_cowbtree+0x5>
    2b25:	55                   	push   %rbp
	return dm_sm_dec_block(md->data_sm, blockn);
    2b26:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
{
    2b2a:	48 89 e5             	mov    %rsp,%rbp
	return sm->dec_block(sm, b);
    2b2d:	48 8b 47 48          	mov    0x48(%rdi),%rax
    2b31:	e8 00 00 00 00       	callq  2b36 <dec_refcount_cowbtree+0x16>
}
    2b36:	5d                   	pop    %rbp
    2b37:	c3                   	retq   
    2b38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    2b3f:	00 

0000000000002b40 <get_refcount_cowbtree>:

static int get_refcount_cowbtree(struct metadata *md, uint64_t blockn)
{
    2b40:	e8 00 00 00 00       	callq  2b45 <get_refcount_cowbtree+0x5>
    2b45:	55                   	push   %rbp
    2b46:	48 89 e5             	mov    %rsp,%rbp
    2b49:	48 83 ec 10          	sub    $0x10,%rsp
	u32 refcount;
	int r;

	r = dm_sm_get_count(md->data_sm, blockn, &refcount);
    2b4d:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
{
    2b51:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    2b58:	00 00 
    2b5a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    2b5e:	31 c0                	xor    %eax,%eax
	return sm->get_count(sm, b, result);
    2b60:	48 8d 55 f4          	lea    -0xc(%rbp),%rdx
    2b64:	48 8b 47 20          	mov    0x20(%rdi),%rax
    2b68:	e8 00 00 00 00       	callq  2b6d <get_refcount_cowbtree+0x2d>
	if (r < 0)
    2b6d:	85 c0                	test   %eax,%eax
    2b6f:	78 03                	js     2b74 <get_refcount_cowbtree+0x34>
		return r;

	return (int)refcount;
    2b71:	8b 45 f4             	mov    -0xc(%rbp),%eax
}
    2b74:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
    2b78:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
    2b7f:	00 00 
    2b81:	75 02                	jne    2b85 <get_refcount_cowbtree+0x45>
    2b83:	c9                   	leaveq 
    2b84:	c3                   	retq   
    2b85:	e8 00 00 00 00       	callq  2b8a <get_refcount_cowbtree+0x4a>
    2b8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000002b90 <get_bufio_client_cowbtree>:
	struct dm_bufio_client *bufio;
	bool read_only:1;
};

void* get_bufio_client_cowbtree(struct metadata *md)
{
    2b90:	e8 00 00 00 00       	callq  2b95 <get_bufio_client_cowbtree+0x5>
	struct dm_block_manager* bm = md->meta_bm;
	return (void*)(bm->bufio);
    2b95:	48 8b 07             	mov    (%rdi),%rax
{
    2b98:	55                   	push   %rbp
    2b99:	48 89 e5             	mov    %rsp,%rbp
	return (void*)(bm->bufio);
    2b9c:	48 8b 00             	mov    (%rax),%rax
};
    2b9f:	5d                   	pop    %rbp
    2ba0:	c3                   	retq   
    2ba1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2ba8:	00 00 00 00 
    2bac:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000002bb0 <get_private_data_cowbtree>:
{
    2bb0:	e8 00 00 00 00       	callq  2bb5 <get_private_data_cowbtree+0x5>
    2bb5:	55                   	push   %rbp
	if (size > sizeof(md->private_data))
    2bb6:	83 fa 10             	cmp    $0x10,%edx
{
    2bb9:	48 89 e5             	mov    %rsp,%rbp
	if (size > sizeof(md->private_data))
    2bbc:	0f 87 88 00 00 00    	ja     2c4a <get_private_data_cowbtree+0x9a>
	return __builtin_memcpy(p, q, size);
    2bc2:	83 fa 08             	cmp    $0x8,%edx
    2bc5:	48 8b 0e             	mov    (%rsi),%rcx
    2bc8:	48 8d 77 30          	lea    0x30(%rdi),%rsi
    2bcc:	72 45                	jb     2c13 <get_private_data_cowbtree+0x63>
    2bce:	48 8b 47 30          	mov    0x30(%rdi),%rax
    2bd2:	48 89 01             	mov    %rax,(%rcx)
    2bd5:	89 d0                	mov    %edx,%eax
    2bd7:	48 8b 7c 06 f8       	mov    -0x8(%rsi,%rax,1),%rdi
    2bdc:	48 89 7c 01 f8       	mov    %rdi,-0x8(%rcx,%rax,1)
    2be1:	48 8d 41 08          	lea    0x8(%rcx),%rax
    2be5:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
    2be9:	48 29 c1             	sub    %rax,%rcx
    2bec:	01 ca                	add    %ecx,%edx
    2bee:	48 29 ce             	sub    %rcx,%rsi
    2bf1:	83 e2 f8             	and    $0xfffffff8,%edx
    2bf4:	83 fa 08             	cmp    $0x8,%edx
    2bf7:	72 16                	jb     2c0f <get_private_data_cowbtree+0x5f>
    2bf9:	83 e2 f8             	and    $0xfffffff8,%edx
    2bfc:	31 c9                	xor    %ecx,%ecx
    2bfe:	89 cf                	mov    %ecx,%edi
    2c00:	83 c1 08             	add    $0x8,%ecx
    2c03:	4c 8b 04 3e          	mov    (%rsi,%rdi,1),%r8
    2c07:	39 d1                	cmp    %edx,%ecx
    2c09:	4c 89 04 38          	mov    %r8,(%rax,%rdi,1)
    2c0d:	72 ef                	jb     2bfe <get_private_data_cowbtree+0x4e>
	return 0;
    2c0f:	31 c0                	xor    %eax,%eax
}
    2c11:	5d                   	pop    %rbp
    2c12:	c3                   	retq   
    2c13:	f6 c2 04             	test   $0x4,%dl
    2c16:	75 1f                	jne    2c37 <get_private_data_cowbtree+0x87>
    2c18:	85 d2                	test   %edx,%edx
    2c1a:	74 f3                	je     2c0f <get_private_data_cowbtree+0x5f>
    2c1c:	0f b6 47 30          	movzbl 0x30(%rdi),%eax
    2c20:	f6 c2 02             	test   $0x2,%dl
    2c23:	88 01                	mov    %al,(%rcx)
    2c25:	74 e8                	je     2c0f <get_private_data_cowbtree+0x5f>
    2c27:	89 d0                	mov    %edx,%eax
    2c29:	0f b7 54 06 fe       	movzwl -0x2(%rsi,%rax,1),%edx
    2c2e:	66 89 54 01 fe       	mov    %dx,-0x2(%rcx,%rax,1)
	return 0;
    2c33:	31 c0                	xor    %eax,%eax
    2c35:	eb da                	jmp    2c11 <get_private_data_cowbtree+0x61>
    2c37:	8b 47 30             	mov    0x30(%rdi),%eax
    2c3a:	89 01                	mov    %eax,(%rcx)
    2c3c:	89 d0                	mov    %edx,%eax
    2c3e:	8b 54 06 fc          	mov    -0x4(%rsi,%rax,1),%edx
    2c42:	89 54 01 fc          	mov    %edx,-0x4(%rcx,%rax,1)
    2c46:	31 c0                	xor    %eax,%eax
    2c48:	eb c7                	jmp    2c11 <get_private_data_cowbtree+0x61>
		return -1;
    2c4a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
    2c4f:	5d                   	pop    %rbp
    2c50:	c3                   	retq   
    2c51:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2c58:	00 00 00 00 
    2c5c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000002c60 <set_private_data_cowbtree>:
{
    2c60:	e8 00 00 00 00       	callq  2c65 <set_private_data_cowbtree+0x5>
    2c65:	55                   	push   %rbp
	if (size > sizeof(md->private_data))
    2c66:	83 fa 10             	cmp    $0x10,%edx
{
    2c69:	48 89 e5             	mov    %rsp,%rbp
	if (size > sizeof(md->private_data))
    2c6c:	0f 87 85 00 00 00    	ja     2cf7 <set_private_data_cowbtree+0x97>
    2c72:	83 fa 08             	cmp    $0x8,%edx
    2c75:	48 8d 4f 30          	lea    0x30(%rdi),%rcx
    2c79:	72 45                	jb     2cc0 <set_private_data_cowbtree+0x60>
    2c7b:	48 8b 06             	mov    (%rsi),%rax
    2c7e:	48 83 c7 38          	add    $0x38,%rdi
    2c82:	48 89 47 f8          	mov    %rax,-0x8(%rdi)
    2c86:	89 d0                	mov    %edx,%eax
    2c88:	48 83 e7 f8          	and    $0xfffffffffffffff8,%rdi
    2c8c:	4c 8b 44 06 f8       	mov    -0x8(%rsi,%rax,1),%r8
    2c91:	4c 89 44 01 f8       	mov    %r8,-0x8(%rcx,%rax,1)
    2c96:	48 29 f9             	sub    %rdi,%rcx
    2c99:	01 ca                	add    %ecx,%edx
    2c9b:	48 29 ce             	sub    %rcx,%rsi
    2c9e:	83 e2 f8             	and    $0xfffffff8,%edx
    2ca1:	83 fa 08             	cmp    $0x8,%edx
    2ca4:	72 16                	jb     2cbc <set_private_data_cowbtree+0x5c>
    2ca6:	83 e2 f8             	and    $0xfffffff8,%edx
    2ca9:	31 c0                	xor    %eax,%eax
    2cab:	89 c1                	mov    %eax,%ecx
    2cad:	83 c0 08             	add    $0x8,%eax
    2cb0:	4c 8b 04 0e          	mov    (%rsi,%rcx,1),%r8
    2cb4:	39 d0                	cmp    %edx,%eax
    2cb6:	4c 89 04 0f          	mov    %r8,(%rdi,%rcx,1)
    2cba:	72 ef                	jb     2cab <set_private_data_cowbtree+0x4b>
	return 0;
    2cbc:	31 c0                	xor    %eax,%eax
}
    2cbe:	5d                   	pop    %rbp
    2cbf:	c3                   	retq   
    2cc0:	f6 c2 04             	test   $0x4,%dl
    2cc3:	75 1f                	jne    2ce4 <set_private_data_cowbtree+0x84>
    2cc5:	85 d2                	test   %edx,%edx
    2cc7:	74 f3                	je     2cbc <set_private_data_cowbtree+0x5c>
    2cc9:	0f b6 06             	movzbl (%rsi),%eax
    2ccc:	f6 c2 02             	test   $0x2,%dl
    2ccf:	88 47 30             	mov    %al,0x30(%rdi)
    2cd2:	74 e8                	je     2cbc <set_private_data_cowbtree+0x5c>
    2cd4:	89 d0                	mov    %edx,%eax
    2cd6:	0f b7 54 06 fe       	movzwl -0x2(%rsi,%rax,1),%edx
    2cdb:	66 89 54 01 fe       	mov    %dx,-0x2(%rcx,%rax,1)
	return 0;
    2ce0:	31 c0                	xor    %eax,%eax
    2ce2:	eb da                	jmp    2cbe <set_private_data_cowbtree+0x5e>
    2ce4:	8b 06                	mov    (%rsi),%eax
    2ce6:	89 47 30             	mov    %eax,0x30(%rdi)
    2ce9:	89 d0                	mov    %edx,%eax
    2ceb:	8b 54 06 fc          	mov    -0x4(%rsi,%rax,1),%edx
    2cef:	89 54 01 fc          	mov    %edx,-0x4(%rcx,%rax,1)
    2cf3:	31 c0                	xor    %eax,%eax
    2cf5:	eb c7                	jmp    2cbe <set_private_data_cowbtree+0x5e>
		return -1;
    2cf7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
    2cfc:	5d                   	pop    %rbp
    2cfd:	c3                   	retq   
    2cfe:	66 90                	xchg   %ax,%ax

0000000000002d00 <__begin_transaction>:
{
    2d00:	e8 00 00 00 00       	callq  2d05 <__begin_transaction+0x5>
    2d05:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    2d0a:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
	r = dm_bm_read_lock(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
    2d0e:	31 d2                	xor    %edx,%edx
    2d10:	31 f6                	xor    %esi,%esi
{
    2d12:	41 ff 72 f8          	pushq  -0x8(%r10)
    2d16:	55                   	push   %rbp
    2d17:	48 89 e5             	mov    %rsp,%rbp
    2d1a:	41 54                	push   %r12
    2d1c:	41 52                	push   %r10
    2d1e:	53                   	push   %rbx
    2d1f:	48 89 fb             	mov    %rdi,%rbx
	r = dm_bm_read_lock(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
    2d22:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
{
    2d26:	48 83 ec 18          	sub    $0x18,%rsp
	r = dm_bm_read_lock(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
    2d2a:	48 8b 3f             	mov    (%rdi),%rdi
{
    2d2d:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    2d34:	00 00 
    2d36:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    2d3a:	31 c0                	xor    %eax,%eax
	r = dm_bm_read_lock(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
    2d3c:	e8 00 00 00 00       	callq  2d41 <__begin_transaction+0x41>
	if (r)
    2d41:	85 c0                	test   %eax,%eax
	r = dm_bm_read_lock(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
    2d43:	41 89 c4             	mov    %eax,%r12d
	if (r)
    2d46:	74 21                	je     2d69 <__begin_transaction+0x69>
}
    2d48:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
    2d4c:	65 48 33 34 25 28 00 	xor    %gs:0x28,%rsi
    2d53:	00 00 
    2d55:	44 89 e0             	mov    %r12d,%eax
    2d58:	75 6c                	jne    2dc6 <__begin_transaction+0xc6>
    2d5a:	48 83 c4 18          	add    $0x18,%rsp
    2d5e:	5b                   	pop    %rbx
    2d5f:	41 5a                	pop    %r10
    2d61:	41 5c                	pop    %r12
    2d63:	5d                   	pop    %rbp
    2d64:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    2d68:	c3                   	retq   
	disk_super = dm_block_data(sblock);
    2d69:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    2d6d:	e8 00 00 00 00       	callq  2d72 <__begin_transaction+0x72>
	if (md->kvs_linear)
    2d72:	48 8b 53 20          	mov    0x20(%rbx),%rdx
    2d76:	48 85 d2             	test   %rdx,%rdx
    2d79:	74 0b                	je     2d86 <__begin_transaction+0x86>
		md->kvs_linear->root = le64_to_cpu(disk_super->lbn_pbn_root);
    2d7b:	48 8b 88 2d 01 00 00 	mov    0x12d(%rax),%rcx
    2d82:	48 89 4a 60          	mov    %rcx,0x60(%rdx)
	if (md->kvs_sparse) {
    2d86:	48 8b 53 28          	mov    0x28(%rbx),%rdx
    2d8a:	48 85 d2             	test   %rdx,%rdx
    2d8d:	74 16                	je     2da5 <__begin_transaction+0xa5>
		md->kvs_sparse->root = le64_to_cpu(disk_super->hash_pbn_root);
    2d8f:	48 8b 88 35 01 00 00 	mov    0x135(%rax),%rcx
    2d96:	48 89 4a 68          	mov    %rcx,0x68(%rdx)
		md->kvs_sparse->lpc_cur = disk_super->lpc_last;
    2d9a:	0f b6 48 2c          	movzbl 0x2c(%rax),%ecx
    2d9e:	48 8b 53 28          	mov    0x28(%rbx),%rdx
    2da2:	89 4a 70             	mov    %ecx,0x70(%rdx)
    2da5:	48 8b 90 4d 01 00 00 	mov    0x14d(%rax),%rdx
    2dac:	48 8b 80 45 01 00 00 	mov    0x145(%rax),%rax
	dm_bm_unlock(sblock);
    2db3:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    2db7:	48 89 43 30          	mov    %rax,0x30(%rbx)
    2dbb:	48 89 53 38          	mov    %rdx,0x38(%rbx)
    2dbf:	e8 00 00 00 00       	callq  2dc4 <__begin_transaction+0xc4>
	return r;
    2dc4:	eb 82                	jmp    2d48 <__begin_transaction+0x48>
}
    2dc6:	e8 00 00 00 00       	callq  2dcb <__begin_transaction+0xcb>
    2dcb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000002dd0 <kvs_lookup_linear_cowbtree>:
{
    2dd0:	e8 00 00 00 00       	callq  2dd5 <kvs_lookup_linear_cowbtree+0x5>
	if (ksize != kvs->ksize)
    2dd5:	39 57 04             	cmp    %edx,0x4(%rdi)
    2dd8:	75 16                	jne    2df0 <kvs_lookup_linear_cowbtree+0x20>
{
    2dda:	55                   	push   %rbp
    2ddb:	48 89 f2             	mov    %rsi,%rdx
	r = dm_btree_lookup(&(kvcbt->info), kvcbt->root, key, value);
    2dde:	48 8b 77 60          	mov    0x60(%rdi),%rsi
    2de2:	48 83 c7 28          	add    $0x28,%rdi
{
    2de6:	48 89 e5             	mov    %rsp,%rbp
	r = dm_btree_lookup(&(kvcbt->info), kvcbt->root, key, value);
    2de9:	e8 00 00 00 00       	callq  2dee <kvs_lookup_linear_cowbtree+0x1e>
}
    2dee:	5d                   	pop    %rbp
    2def:	c3                   	retq   
    2df0:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    2df5:	c3                   	retq   
    2df6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    2dfd:	00 00 00 

0000000000002e00 <kvs_delete_linear_cowbtree>:
{
    2e00:	e8 00 00 00 00       	callq  2e05 <kvs_delete_linear_cowbtree+0x5>
	if (ksize != kvs->ksize)
    2e05:	39 57 04             	cmp    %edx,0x4(%rdi)
		return -EINVAL;
    2e08:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	if (ksize != kvs->ksize)
    2e0d:	75 29                	jne    2e38 <kvs_delete_linear_cowbtree+0x38>
{
    2e0f:	55                   	push   %rbp
    2e10:	48 89 f2             	mov    %rsi,%rdx
	r = dm_btree_remove(&(kvcbt->info), kvcbt->root, key, &(kvcbt->root));
    2e13:	48 8b 77 60          	mov    0x60(%rdi),%rsi
    2e17:	48 8d 4f 60          	lea    0x60(%rdi),%rcx
    2e1b:	48 83 c7 28          	add    $0x28,%rdi
{
    2e1f:	48 89 e5             	mov    %rsp,%rbp
	r = dm_btree_remove(&(kvcbt->info), kvcbt->root, key, &(kvcbt->root));
    2e22:	e8 00 00 00 00       	callq  2e27 <kvs_delete_linear_cowbtree+0x27>
	if (r == -ENODATA)
    2e27:	83 f8 c3             	cmp    $0xffffffc3,%eax
    2e2a:	74 0e                	je     2e3a <kvs_delete_linear_cowbtree+0x3a>
    2e2c:	85 c0                	test   %eax,%eax
    2e2e:	ba 00 00 00 00       	mov    $0x0,%edx
    2e33:	0f 4f c2             	cmovg  %edx,%eax
}
    2e36:	5d                   	pop    %rbp
    2e37:	c3                   	retq   
    2e38:	f3 c3                	repz retq 
		return -ENODEV;
    2e3a:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
}
    2e3f:	5d                   	pop    %rbp
    2e40:	c3                   	retq   
    2e41:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2e48:	00 00 00 00 
    2e4c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000002e50 <kvs_delete_sparse_cowbtree>:
{
    2e50:	e8 00 00 00 00       	callq  2e55 <kvs_delete_sparse_cowbtree+0x5>
    2e55:	55                   	push   %rbp
    2e56:	48 89 e5             	mov    %rsp,%rbp
    2e59:	41 57                	push   %r15
    2e5b:	41 56                	push   %r14
    2e5d:	41 55                	push   %r13
    2e5f:	41 54                	push   %r12
    2e61:	53                   	push   %rbx
    2e62:	48 83 ec 30          	sub    $0x30,%rsp
    2e66:	48 89 75 b8          	mov    %rsi,-0x48(%rbp)
    2e6a:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    2e71:	00 00 
    2e73:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    2e77:	31 c0                	xor    %eax,%eax
	if (ksize != kvs->ksize)
    2e79:	39 57 04             	cmp    %edx,0x4(%rdi)
    2e7c:	0f 85 4d 01 00 00    	jne    2fcf <kvs_delete_sparse_cowbtree+0x17f>
    2e82:	48 89 fb             	mov    %rdi,%rbx
	cur_entry = kmalloc(kvcbt->entry_size, GFP_NOIO);
    2e85:	8b 7f 28             	mov    0x28(%rdi),%edi
	return __kmalloc(size, flags);
    2e88:	be 00 00 60 00       	mov    $0x600000,%esi
    2e8d:	41 89 d5             	mov    %edx,%r13d
    2e90:	e8 00 00 00 00       	callq  2e95 <kvs_delete_sparse_cowbtree+0x45>
	if (!cur_entry)
    2e95:	48 85 c0             	test   %rax,%rax
    2e98:	49 89 c4             	mov    %rax,%r12
    2e9b:	0f 84 97 00 00 00    	je     2f38 <kvs_delete_sparse_cowbtree+0xe8>
	key_val = (*(uint64_t *)key);
    2ea1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
	r = dm_btree_lookup(&(kvcbt->info), kvcbt->root, &key_val, cur_entry);
    2ea5:	48 8b 73 68          	mov    0x68(%rbx),%rsi
    2ea9:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    2ead:	4c 89 e1             	mov    %r12,%rcx
	key_val = (*(uint64_t *)key);
    2eb0:	48 8b 00             	mov    (%rax),%rax
    2eb3:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	r = dm_btree_lookup(&(kvcbt->info), kvcbt->root, &key_val, cur_entry);
    2eb7:	48 8d 43 30          	lea    0x30(%rbx),%rax
    2ebb:	48 89 c7             	mov    %rax,%rdi
    2ebe:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    2ec2:	e8 00 00 00 00       	callq  2ec7 <kvs_delete_sparse_cowbtree+0x77>
	if (r == -ENODATA) {
    2ec7:	83 f8 c3             	cmp    $0xffffffc3,%eax
	r = dm_btree_lookup(&(kvcbt->info), kvcbt->root, &key_val, cur_entry);
    2eca:	41 89 c6             	mov    %eax,%r14d
	if (r == -ENODATA) {
    2ecd:	0f 84 04 01 00 00    	je     2fd7 <kvs_delete_sparse_cowbtree+0x187>
		if (!memcmp(cur_entry, key, ksize)) {
    2ed3:	49 63 c5             	movslq %r13d,%rax
	while (r == 0) {
    2ed6:	45 85 f6             	test   %r14d,%r14d
		if (!memcmp(cur_entry, key, ksize)) {
    2ed9:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	while (r == 0) {
    2edd:	74 38                	je     2f17 <kvs_delete_sparse_cowbtree+0xc7>
out:
    2edf:	e9 e6 00 00 00       	jmpq   2fca <kvs_delete_sparse_cowbtree+0x17a>
		r = dm_btree_lookup(&(kvcbt->info),
    2ee4:	48 8b 73 68          	mov    0x68(%rbx),%rsi
    2ee8:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    2eec:	48 8d 55 c0          	lea    -0x40(%rbp),%rdx
    2ef0:	48 89 c1             	mov    %rax,%rcx
    2ef3:	e8 00 00 00 00       	callq  2ef8 <kvs_delete_sparse_cowbtree+0xa8>
	return __builtin_memcmp(p, q, size);
    2ef8:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
    2efc:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    2f00:	4c 89 e7             	mov    %r12,%rdi
    2f03:	41 89 c6             	mov    %eax,%r14d
    2f06:	e8 00 00 00 00       	callq  2f0b <kvs_delete_sparse_cowbtree+0xbb>
		if (!memcmp(cur_entry, key, ksize)) {
    2f0b:	85 c0                	test   %eax,%eax
    2f0d:	74 31                	je     2f40 <kvs_delete_sparse_cowbtree+0xf0>
		} else if (r == 0) {
    2f0f:	45 85 f6             	test   %r14d,%r14d
    2f12:	75 6c                	jne    2f80 <kvs_delete_sparse_cowbtree+0x130>
    2f14:	4d 89 fc             	mov    %r15,%r12
		cur_key_val = key_val;
    2f17:	4c 8b 6d c0          	mov    -0x40(%rbp),%r13
		next_entry = kmalloc(kvcbt->entry_size, GFP_NOIO);
    2f1b:	8b 7b 28             	mov    0x28(%rbx),%edi
    2f1e:	be 00 00 60 00       	mov    $0x600000,%esi
		key_val++;
    2f23:	49 8d 45 01          	lea    0x1(%r13),%rax
    2f27:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    2f2b:	e8 00 00 00 00       	callq  2f30 <kvs_delete_sparse_cowbtree+0xe0>
		if (!next_entry)
    2f30:	48 85 c0             	test   %rax,%rax
    2f33:	49 89 c7             	mov    %rax,%r15
    2f36:	75 ac                	jne    2ee4 <kvs_delete_sparse_cowbtree+0x94>
		return -ENOMEM;
    2f38:	41 be f4 ff ff ff    	mov    $0xfffffff4,%r14d
    2f3e:	eb 50                	jmp    2f90 <kvs_delete_sparse_cowbtree+0x140>
	if (ret_next == 0 &&
    2f40:	45 85 f6             	test   %r14d,%r14d
    2f43:	4c 89 6d c8          	mov    %r13,-0x38(%rbp)
    2f47:	4c 8d 6b 68          	lea    0x68(%rbx),%r13
    2f4b:	75 64                	jne    2fb1 <kvs_delete_sparse_cowbtree+0x161>
    2f4d:	49 8b 07             	mov    (%r15),%rax
    2f50:	49 39 04 24          	cmp    %rax,(%r12)
    2f54:	75 5b                	jne    2fb1 <kvs_delete_sparse_cowbtree+0x161>
		memset(cur_entry, DELETED_ENTRY, kvcbt->entry_size);
    2f56:	8b 53 28             	mov    0x28(%rbx),%edx
	return __builtin_memset(p, c, size);
    2f59:	be 6b 00 00 00       	mov    $0x6b,%esi
    2f5e:	4c 89 e7             	mov    %r12,%rdi
    2f61:	e8 00 00 00 00       	callq  2f66 <kvs_delete_sparse_cowbtree+0x116>
		r = dm_btree_insert(&(kvcbt->info), kvcbt->root,
    2f66:	48 8b 73 68          	mov    0x68(%rbx),%rsi
    2f6a:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    2f6e:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
    2f72:	4d 89 e8             	mov    %r13,%r8
    2f75:	4c 89 e1             	mov    %r12,%rcx
    2f78:	e8 00 00 00 00       	callq  2f7d <kvs_delete_sparse_cowbtree+0x12d>
    2f7d:	41 89 c6             	mov    %eax,%r14d
	kfree(cur_entry);
    2f80:	4c 89 e7             	mov    %r12,%rdi
    2f83:	e8 00 00 00 00       	callq  2f88 <kvs_delete_sparse_cowbtree+0x138>
	kfree(next_entry);
    2f88:	4c 89 ff             	mov    %r15,%rdi
    2f8b:	e8 00 00 00 00       	callq  2f90 <kvs_delete_sparse_cowbtree+0x140>
}
    2f90:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    2f94:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
    2f9b:	00 00 
    2f9d:	44 89 f0             	mov    %r14d,%eax
    2fa0:	75 3d                	jne    2fdf <kvs_delete_sparse_cowbtree+0x18f>
    2fa2:	48 83 c4 30          	add    $0x30,%rsp
    2fa6:	5b                   	pop    %rbx
    2fa7:	41 5c                	pop    %r12
    2fa9:	41 5d                	pop    %r13
    2fab:	41 5e                	pop    %r14
    2fad:	41 5f                	pop    %r15
    2faf:	5d                   	pop    %rbp
    2fb0:	c3                   	retq   
		r = dm_btree_remove(&(kvcbt->info),
    2fb1:	48 8b 73 68          	mov    0x68(%rbx),%rsi
    2fb5:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    2fb9:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
    2fbd:	4c 89 e9             	mov    %r13,%rcx
    2fc0:	e8 00 00 00 00       	callq  2fc5 <kvs_delete_sparse_cowbtree+0x175>
    2fc5:	41 89 c6             	mov    %eax,%r14d
    2fc8:	eb b6                	jmp    2f80 <kvs_delete_sparse_cowbtree+0x130>
	char *cur_entry, *next_entry = NULL;
    2fca:	45 31 ff             	xor    %r15d,%r15d
    2fcd:	eb b1                	jmp    2f80 <kvs_delete_sparse_cowbtree+0x130>
		return -EINVAL;
    2fcf:	41 be ea ff ff ff    	mov    $0xffffffea,%r14d
    2fd5:	eb b9                	jmp    2f90 <kvs_delete_sparse_cowbtree+0x140>
		return -ENODEV;
    2fd7:	41 be ed ff ff ff    	mov    $0xffffffed,%r14d
    2fdd:	eb b1                	jmp    2f90 <kvs_delete_sparse_cowbtree+0x140>
}
    2fdf:	e8 00 00 00 00       	callq  2fe4 <kvs_delete_sparse_cowbtree+0x194>
    2fe4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    2feb:	00 00 00 00 
    2fef:	90                   	nop

0000000000002ff0 <kvs_lookup_sparse_cowbtree>:
{
    2ff0:	e8 00 00 00 00       	callq  2ff5 <kvs_lookup_sparse_cowbtree+0x5>
    2ff5:	55                   	push   %rbp
    2ff6:	48 89 e5             	mov    %rsp,%rbp
    2ff9:	41 57                	push   %r15
    2ffb:	41 56                	push   %r14
    2ffd:	41 55                	push   %r13
    2fff:	41 54                	push   %r12
    3001:	53                   	push   %rbx
    3002:	48 63 da             	movslq %edx,%rbx
    3005:	48 83 ec 28          	sub    $0x28,%rsp
    3009:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    300d:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    3014:	00 00 
    3016:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    301a:	31 c0                	xor    %eax,%eax
	if (ksize != kvs->ksize)
    301c:	39 5f 04             	cmp    %ebx,0x4(%rdi)
    301f:	0f 85 b4 00 00 00    	jne    30d9 <kvs_lookup_sparse_cowbtree+0xe9>
    3025:	49 89 ff             	mov    %rdi,%r15
	entry = kmalloc(kvcbt->entry_size, GFP_NOIO);
    3028:	8b 7f 28             	mov    0x28(%rdi),%edi
    302b:	49 89 f5             	mov    %rsi,%r13
    302e:	be 00 00 60 00       	mov    $0x600000,%esi
    3033:	e8 00 00 00 00       	callq  3038 <kvs_lookup_sparse_cowbtree+0x48>
	if (!entry)
    3038:	48 85 c0             	test   %rax,%rax
    303b:	49 89 c4             	mov    %rax,%r12
    303e:	0f 84 9d 00 00 00    	je     30e1 <kvs_lookup_sparse_cowbtree+0xf1>
	key_val = (*(uint64_t *)key);
    3044:	49 8b 45 00          	mov    0x0(%r13),%rax
	for (i = 0; i <= kvcbt->lpc_cur; i++) {
    3048:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
	key_val = (*(uint64_t *)key);
    304f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    3053:	49 8d 47 30          	lea    0x30(%r15),%rax
    3057:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		r = dm_btree_lookup(&(kvcbt->info), kvcbt->root, &key_val,
    305b:	49 8b 77 68          	mov    0x68(%r15),%rsi
    305f:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    3063:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
    3067:	4c 89 e1             	mov    %r12,%rcx
    306a:	e8 00 00 00 00       	callq  306f <kvs_lookup_sparse_cowbtree+0x7f>
		if (r == -ENODATA) {
    306f:	83 f8 c3             	cmp    $0xffffffc3,%eax
    3072:	74 52                	je     30c6 <kvs_lookup_sparse_cowbtree+0xd6>
		} else if (r == 0) {
    3074:	85 c0                	test   %eax,%eax
    3076:	75 4e                	jne    30c6 <kvs_lookup_sparse_cowbtree+0xd6>
	return __builtin_memcmp(p, q, size);
    3078:	48 89 da             	mov    %rbx,%rdx
    307b:	4c 89 ee             	mov    %r13,%rsi
    307e:	4c 89 e7             	mov    %r12,%rdi
    3081:	e8 00 00 00 00       	callq  3086 <kvs_lookup_sparse_cowbtree+0x96>
			if (!memcmp(entry, key, ksize)) {
    3086:	85 c0                	test   %eax,%eax
    3088:	41 89 c6             	mov    %eax,%r14d
    308b:	75 61                	jne    30ee <kvs_lookup_sparse_cowbtree+0xfe>
				memcpy(value, entry + ksize, kvs->vsize);
    308d:	41 8b 17             	mov    (%r15),%edx
	return __builtin_memcpy(p, q, size);
    3090:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    3094:	49 8d 34 1c          	lea    (%r12,%rbx,1),%rsi
    3098:	e8 00 00 00 00       	callq  309d <kvs_lookup_sparse_cowbtree+0xad>
				kfree(entry);
    309d:	4c 89 e7             	mov    %r12,%rdi
    30a0:	e8 00 00 00 00       	callq  30a5 <kvs_lookup_sparse_cowbtree+0xb5>
}
    30a5:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    30a9:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
    30b0:	00 00 
    30b2:	44 89 f0             	mov    %r14d,%eax
    30b5:	75 32                	jne    30e9 <kvs_lookup_sparse_cowbtree+0xf9>
    30b7:	48 83 c4 28          	add    $0x28,%rsp
    30bb:	5b                   	pop    %rbx
    30bc:	41 5c                	pop    %r12
    30be:	41 5d                	pop    %r13
    30c0:	41 5e                	pop    %r14
    30c2:	41 5f                	pop    %r15
    30c4:	5d                   	pop    %rbp
    30c5:	c3                   	retq   
			kfree(entry);
    30c6:	4c 89 e7             	mov    %r12,%rdi
    30c9:	89 45 c0             	mov    %eax,-0x40(%rbp)
    30cc:	e8 00 00 00 00       	callq  30d1 <kvs_lookup_sparse_cowbtree+0xe1>
		r = dm_btree_lookup(&(kvcbt->info), kvcbt->root, &key_val,
    30d1:	8b 45 c0             	mov    -0x40(%rbp),%eax
    30d4:	41 89 c6             	mov    %eax,%r14d
			return r;
    30d7:	eb cc                	jmp    30a5 <kvs_lookup_sparse_cowbtree+0xb5>
		return -EINVAL;
    30d9:	41 be ea ff ff ff    	mov    $0xffffffea,%r14d
    30df:	eb c4                	jmp    30a5 <kvs_lookup_sparse_cowbtree+0xb5>
		return -ENOMEM;
    30e1:	41 be f4 ff ff ff    	mov    $0xfffffff4,%r14d
    30e7:	eb bc                	jmp    30a5 <kvs_lookup_sparse_cowbtree+0xb5>
}
    30e9:	e8 00 00 00 00       	callq  30ee <kvs_lookup_sparse_cowbtree+0xfe>
			DMWARN("kvs_lookup_sparse_cowbtree: hash collision for "
    30ee:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    30f2:	4c 89 e2             	mov    %r12,%rdx
    30f5:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    30fc:	e8 00 00 00 00       	callq  3101 <kvs_lookup_sparse_cowbtree+0x111>
	for (i = 0; i <= kvcbt->lpc_cur; i++) {
    3101:	83 45 b4 01          	addl   $0x1,-0x4c(%rbp)
			key_val++;
    3105:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
	for (i = 0; i <= kvcbt->lpc_cur; i++) {
    310a:	8b 45 b4             	mov    -0x4c(%rbp),%eax
    310d:	41 39 47 70          	cmp    %eax,0x70(%r15)
    3111:	0f 83 44 ff ff ff    	jae    305b <kvs_lookup_sparse_cowbtree+0x6b>
	kfree(entry);
    3117:	4c 89 e7             	mov    %r12,%rdi
	return r;
    311a:	45 31 f6             	xor    %r14d,%r14d
	kfree(entry);
    311d:	e8 00 00 00 00       	callq  3122 <kvs_lookup_sparse_cowbtree+0x132>
	return r;
    3122:	eb 81                	jmp    30a5 <kvs_lookup_sparse_cowbtree+0xb5>
    3124:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    312b:	00 00 00 00 
    312f:	90                   	nop

0000000000003130 <kvs_iterate_sparse_cowbtree>:
{
    3130:	e8 00 00 00 00       	callq  3135 <kvs_iterate_sparse_cowbtree+0x5>
    3135:	55                   	push   %rbp
    3136:	48 89 e5             	mov    %rsp,%rbp
    3139:	41 57                	push   %r15
    313b:	41 56                	push   %r14
    313d:	41 55                	push   %r13
    313f:	41 54                	push   %r12
    3141:	49 89 fe             	mov    %rdi,%r14
    3144:	53                   	push   %rbx
    3145:	48 83 ec 40          	sub    $0x40,%rsp
	entry = kmalloc(kvs->ksize + kvs->vsize, GFP_NOIO);
    3149:	8b 3f                	mov    (%rdi),%edi
    314b:	41 03 7e 04          	add    0x4(%r14),%edi
{
    314f:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
    3153:	be 00 00 60 00       	mov    $0x600000,%esi
    3158:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
    315c:	65 48 8b 1c 25 28 00 	mov    %gs:0x28,%rbx
    3163:	00 00 
    3165:	48 89 5d d0          	mov    %rbx,-0x30(%rbp)
    3169:	31 db                	xor    %ebx,%ebx
    316b:	e8 00 00 00 00       	callq  3170 <kvs_iterate_sparse_cowbtree+0x40>
	if (!entry)
    3170:	48 85 c0             	test   %rax,%rax
    3173:	48 89 c3             	mov    %rax,%rbx
    3176:	0f 84 58 01 00 00    	je     32d4 <kvs_iterate_sparse_cowbtree+0x1a4>
	key = kmalloc(kvs->ksize, GFP_NOIO);
    317c:	41 8b 7e 04          	mov    0x4(%r14),%edi
    3180:	be 00 00 60 00       	mov    $0x600000,%esi
    3185:	e8 00 00 00 00       	callq  318a <kvs_iterate_sparse_cowbtree+0x5a>
	if (!key)
    318a:	48 85 c0             	test   %rax,%rax
    318d:	49 89 c4             	mov    %rax,%r12
    3190:	0f 84 49 01 00 00    	je     32df <kvs_iterate_sparse_cowbtree+0x1af>
	value = kmalloc(kvs->vsize, GFP_NOIO);
    3196:	41 8b 3e             	mov    (%r14),%edi
    3199:	be 00 00 60 00       	mov    $0x600000,%esi
	int r = 0;
    319e:	45 31 ff             	xor    %r15d,%r15d
    31a1:	e8 00 00 00 00       	callq  31a6 <kvs_iterate_sparse_cowbtree+0x76>
	if (!value)
    31a6:	48 85 c0             	test   %rax,%rax
    31a9:	49 89 c5             	mov    %rax,%r13
    31ac:	0f 84 e5 00 00 00    	je     3297 <kvs_iterate_sparse_cowbtree+0x167>
	r = dm_btree_find_lowest_key(&(kvcbt->info), kvcbt->root, &lowest);
    31b2:	49 8d 4e 30          	lea    0x30(%r14),%rcx
    31b6:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
    31ba:	49 8b 76 68          	mov    0x68(%r14),%rsi
    31be:	48 89 fa             	mov    %rdi,%rdx
    31c1:	48 89 cf             	mov    %rcx,%rdi
    31c4:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    31c8:	e8 00 00 00 00       	callq  31cd <kvs_iterate_sparse_cowbtree+0x9d>
	if (r <= 0)
    31cd:	85 c0                	test   %eax,%eax
	r = dm_btree_find_lowest_key(&(kvcbt->info), kvcbt->root, &lowest);
    31cf:	41 89 c7             	mov    %eax,%r15d
	if (r <= 0)
    31d2:	0f 8e bf 00 00 00    	jle    3297 <kvs_iterate_sparse_cowbtree+0x167>
	r = dm_btree_find_highest_key(&(kvcbt->info), kvcbt->root, &highest);
    31d8:	4c 8d 4d c8          	lea    -0x38(%rbp),%r9
    31dc:	49 8b 76 68          	mov    0x68(%r14),%rsi
    31e0:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    31e4:	4c 89 ca             	mov    %r9,%rdx
    31e7:	e8 00 00 00 00       	callq  31ec <kvs_iterate_sparse_cowbtree+0xbc>
	if (r <= 0)
    31ec:	85 c0                	test   %eax,%eax
	r = dm_btree_find_highest_key(&(kvcbt->info), kvcbt->root, &highest);
    31ee:	41 89 c7             	mov    %eax,%r15d
	if (r <= 0)
    31f1:	0f 8e a0 00 00 00    	jle    3297 <kvs_iterate_sparse_cowbtree+0x167>
	if(tdc->gc_last_fp >= highest || tdc->gc_last_fp <= lowest)
    31f7:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    31fb:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    31ff:	48 8b 90 38 02 00 00 	mov    0x238(%rax),%rdx
    3206:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    320a:	48 39 c2             	cmp    %rax,%rdx
    320d:	73 09                	jae    3218 <kvs_iterate_sparse_cowbtree+0xe8>
    320f:	48 39 f2             	cmp    %rsi,%rdx
    3212:	0f 87 4c 01 00 00    	ja     3364 <kvs_iterate_sparse_cowbtree+0x234>
		tdc->gc_last_fp = lowest;
    3218:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    321c:	48 89 b1 38 02 00 00 	mov    %rsi,0x238(%rcx)
	lowest = tdc->gc_last_fp;
    3223:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
	while (lowest <= highest) {
    3227:	48 39 f0             	cmp    %rsi,%rax
    322a:	0f 82 20 01 00 00    	jb     3350 <kvs_iterate_sparse_cowbtree+0x220>
		r = dm_btree_lookup_next(&(kvcbt->info), kvcbt->root,
    3230:	49 8b 76 68          	mov    0x68(%r14),%rsi
    3234:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    3238:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    323c:	49 89 d8             	mov    %rbx,%r8
    323f:	48 89 ca             	mov    %rcx,%rdx
    3242:	e8 00 00 00 00       	callq  3247 <kvs_iterate_sparse_cowbtree+0x117>
    3247:	41 89 c7             	mov    %eax,%r15d
		lowest++;
    324a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
		if (r || is_deleted_entry(entry, kvs->ksize + kvs->vsize))
    324e:	45 85 ff             	test   %r15d,%r15d
		lowest++;
    3251:	48 8d 70 01          	lea    0x1(%rax),%rsi
    3255:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
		if (r || is_deleted_entry(entry, kvs->ksize + kvs->vsize))
    3259:	75 27                	jne    3282 <kvs_iterate_sparse_cowbtree+0x152>
    325b:	45 8b 5e 04          	mov    0x4(%r14),%r11d
    325f:	41 8b 0e             	mov    (%r14),%ecx
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    3262:	44 89 df             	mov    %r11d,%edi
    3265:	01 cf                	add    %ecx,%edi
    3267:	74 19                	je     3282 <kvs_iterate_sparse_cowbtree+0x152>
    3269:	80 3b 6b             	cmpb   $0x6b,(%rbx)
    326c:	75 79                	jne    32e7 <kvs_iterate_sparse_cowbtree+0x1b7>
	int i = 0;
    326e:	31 c0                	xor    %eax,%eax
    3270:	eb 09                	jmp    327b <kvs_iterate_sparse_cowbtree+0x14b>
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    3272:	48 63 d0             	movslq %eax,%rdx
    3275:	80 3c 13 6b          	cmpb   $0x6b,(%rbx,%rdx,1)
    3279:	75 6c                	jne    32e7 <kvs_iterate_sparse_cowbtree+0x1b7>
		i++;
    327b:	83 c0 01             	add    $0x1,%eax
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    327e:	39 c7                	cmp    %eax,%edi
    3280:	75 f0                	jne    3272 <kvs_iterate_sparse_cowbtree+0x142>
    3282:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    3286:	eb 9f                	jmp    3227 <kvs_iterate_sparse_cowbtree+0xf7>
			tdc->gc_last_fp = lowest;
    3288:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
    328c:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
    3290:	48 89 81 38 02 00 00 	mov    %rax,0x238(%rcx)
	kfree(value);
    3297:	4c 89 ef             	mov    %r13,%rdi
    329a:	e8 00 00 00 00       	callq  329f <kvs_iterate_sparse_cowbtree+0x16f>
	kfree(key);
    329f:	4c 89 e7             	mov    %r12,%rdi
    32a2:	e8 00 00 00 00       	callq  32a7 <kvs_iterate_sparse_cowbtree+0x177>
	kfree(entry);
    32a7:	48 89 df             	mov    %rbx,%rdi
    32aa:	e8 00 00 00 00       	callq  32af <kvs_iterate_sparse_cowbtree+0x17f>
}
    32af:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
    32b3:	65 48 33 1c 25 28 00 	xor    %gs:0x28,%rbx
    32ba:	00 00 
    32bc:	44 89 f8             	mov    %r15d,%eax
    32bf:	0f 85 af 00 00 00    	jne    3374 <kvs_iterate_sparse_cowbtree+0x244>
    32c5:	48 83 c4 40          	add    $0x40,%rsp
    32c9:	5b                   	pop    %rbx
    32ca:	41 5c                	pop    %r12
    32cc:	41 5d                	pop    %r13
    32ce:	41 5e                	pop    %r14
    32d0:	41 5f                	pop    %r15
    32d2:	5d                   	pop    %rbp
    32d3:	c3                   	retq   
	char *entry, *key = NULL, *value = NULL;
    32d4:	45 31 ed             	xor    %r13d,%r13d
    32d7:	45 31 e4             	xor    %r12d,%r12d
	int r = 0;
    32da:	45 31 ff             	xor    %r15d,%r15d
    32dd:	eb b8                	jmp    3297 <kvs_iterate_sparse_cowbtree+0x167>
	char *entry, *key = NULL, *value = NULL;
    32df:	45 31 ed             	xor    %r13d,%r13d
	int r = 0;
    32e2:	45 31 ff             	xor    %r15d,%r15d
    32e5:	eb b0                	jmp    3297 <kvs_iterate_sparse_cowbtree+0x167>
		memcpy(key, entry, kvs->ksize);
    32e7:	45 89 d8             	mov    %r11d,%r8d
    32ea:	48 89 de             	mov    %rbx,%rsi
    32ed:	4c 89 e7             	mov    %r12,%rdi
    32f0:	4c 89 c2             	mov    %r8,%rdx
    32f3:	89 4d ac             	mov    %ecx,-0x54(%rbp)
    32f6:	44 89 5d a8          	mov    %r11d,-0x58(%rbp)
    32fa:	4c 89 45 a0          	mov    %r8,-0x60(%rbp)
    32fe:	e8 00 00 00 00       	callq  3303 <kvs_iterate_sparse_cowbtree+0x1d3>
		memcpy(value, (void *)(entry + kvs->ksize), kvs->vsize);
    3303:	4c 8b 45 a0          	mov    -0x60(%rbp),%r8
    3307:	8b 55 ac             	mov    -0x54(%rbp),%edx
    330a:	4c 89 ef             	mov    %r13,%rdi
    330d:	4a 8d 34 03          	lea    (%rbx,%r8,1),%rsi
    3311:	e8 00 00 00 00       	callq  3316 <kvs_iterate_sparse_cowbtree+0x1e6>
		r = fn((void *)key, kvs->ksize, (void *)value,
    3316:	44 8b 5d a8          	mov    -0x58(%rbp),%r11d
    331a:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
    331e:	4c 89 ea             	mov    %r13,%rdx
    3321:	8b 4d ac             	mov    -0x54(%rbp),%ecx
    3324:	4c 89 e7             	mov    %r12,%rdi
    3327:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    332b:	44 89 de             	mov    %r11d,%esi
    332e:	e8 00 00 00 00       	callq  3333 <kvs_iterate_sparse_cowbtree+0x203>
		if (r == 1) {
    3333:	83 f8 01             	cmp    $0x1,%eax
    3336:	0f 84 4c ff ff ff    	je     3288 <kvs_iterate_sparse_cowbtree+0x158>
		if (r)
    333c:	85 c0                	test   %eax,%eax
    333e:	75 2c                	jne    336c <kvs_iterate_sparse_cowbtree+0x23c>
    3340:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
    3344:	45 31 ff             	xor    %r15d,%r15d
    3347:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    334b:	e9 d7 fe ff ff       	jmpq   3227 <kvs_iterate_sparse_cowbtree+0xf7>
	tdc->gc_last_fp = 0;
    3350:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
    3354:	48 c7 80 38 02 00 00 	movq   $0x0,0x238(%rax)
    335b:	00 00 00 00 
    335f:	e9 33 ff ff ff       	jmpq   3297 <kvs_iterate_sparse_cowbtree+0x167>
    3364:	48 89 d6             	mov    %rdx,%rsi
    3367:	e9 b7 fe ff ff       	jmpq   3223 <kvs_iterate_sparse_cowbtree+0xf3>
		r = fn((void *)key, kvs->ksize, (void *)value,
    336c:	41 89 c7             	mov    %eax,%r15d
    336f:	e9 23 ff ff ff       	jmpq   3297 <kvs_iterate_sparse_cowbtree+0x167>
}
    3374:	e8 00 00 00 00       	callq  3379 <kvs_iterate_sparse_cowbtree+0x249>
    3379:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000003380 <kvs_insert_sparse_cowbtree>:
{
    3380:	e8 00 00 00 00       	callq  3385 <kvs_insert_sparse_cowbtree+0x5>
    3385:	55                   	push   %rbp
    3386:	48 89 e5             	mov    %rsp,%rbp
    3389:	41 57                	push   %r15
    338b:	41 56                	push   %r14
    338d:	41 55                	push   %r13
    338f:	41 54                	push   %r12
    3391:	53                   	push   %rbx
    3392:	48 63 da             	movslq %edx,%rbx
    3395:	48 83 ec 28          	sub    $0x28,%rsp
    3399:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
    339d:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    33a4:	00 00 
    33a6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    33aa:	31 c0                	xor    %eax,%eax
	if (ksize != kvs->ksize)
    33ac:	39 5f 04             	cmp    %ebx,0x4(%rdi)
    33af:	0f 85 fd 00 00 00    	jne    34b2 <kvs_insert_sparse_cowbtree+0x132>
	if (vsize != kvs->vsize)
    33b5:	44 39 07             	cmp    %r8d,(%rdi)
    33b8:	49 89 fe             	mov    %rdi,%r14
    33bb:	45 89 c4             	mov    %r8d,%r12d
    33be:	0f 85 ee 00 00 00    	jne    34b2 <kvs_insert_sparse_cowbtree+0x132>
	entry = kmalloc(kvcbt->entry_size, GFP_NOIO);
    33c4:	8b 7f 28             	mov    0x28(%rdi),%edi
    33c7:	49 89 f5             	mov    %rsi,%r13
    33ca:	be 00 00 60 00       	mov    $0x600000,%esi
    33cf:	e8 00 00 00 00       	callq  33d4 <kvs_insert_sparse_cowbtree+0x54>
	if (!entry)
    33d4:	48 85 c0             	test   %rax,%rax
    33d7:	49 89 c7             	mov    %rax,%r15
    33da:	0f 84 d9 00 00 00    	je     34b9 <kvs_insert_sparse_cowbtree+0x139>
	key_val = (*(uint64_t *)key);
    33e0:	49 8b 45 00          	mov    0x0(%r13),%rax
	for (i = 0; i <= kvcbt->lpc_max; i++) {
    33e4:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%rbp)
	key_val = (*(uint64_t *)key);
    33eb:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    33ef:	49 8d 46 30          	lea    0x30(%r14),%rax
    33f3:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		r = dm_btree_lookup(&(kvcbt->info), kvcbt->root, &key_val,
    33f7:	49 8b 76 68          	mov    0x68(%r14),%rsi
    33fb:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    33ff:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
    3403:	4c 89 f9             	mov    %r15,%rcx
    3406:	e8 00 00 00 00       	callq  340b <kvs_insert_sparse_cowbtree+0x8b>
		if (r == -ENODATA ||
    340b:	83 f8 c3             	cmp    $0xffffffc3,%eax
    340e:	74 23                	je     3433 <kvs_insert_sparse_cowbtree+0xb3>
			is_deleted_entry(entry, kvcbt->entry_size)) {
    3410:	41 8b 76 28          	mov    0x28(%r14),%esi
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    3414:	85 f6                	test   %esi,%esi
    3416:	74 1b                	je     3433 <kvs_insert_sparse_cowbtree+0xb3>
    3418:	41 80 3f 6b          	cmpb   $0x6b,(%r15)
    341c:	75 64                	jne    3482 <kvs_insert_sparse_cowbtree+0x102>
	int i = 0;
    341e:	31 d2                	xor    %edx,%edx
    3420:	eb 0a                	jmp    342c <kvs_insert_sparse_cowbtree+0xac>
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    3422:	48 63 ca             	movslq %edx,%rcx
    3425:	41 80 3c 0f 6b       	cmpb   $0x6b,(%r15,%rcx,1)
    342a:	75 56                	jne    3482 <kvs_insert_sparse_cowbtree+0x102>
		i++;
    342c:	83 c2 01             	add    $0x1,%edx
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    342f:	39 d6                	cmp    %edx,%esi
    3431:	75 ef                	jne    3422 <kvs_insert_sparse_cowbtree+0xa2>
    3433:	48 89 da             	mov    %rbx,%rdx
    3436:	4c 89 ee             	mov    %r13,%rsi
    3439:	4c 89 ff             	mov    %r15,%rdi
    343c:	e8 00 00 00 00       	callq  3441 <kvs_insert_sparse_cowbtree+0xc1>
    3441:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
			memcpy(entry + ksize, value, vsize);
    3445:	49 8d 3c 1f          	lea    (%r15,%rbx,1),%rdi
    3449:	49 63 d4             	movslq %r12d,%rdx
    344c:	e8 00 00 00 00       	callq  3451 <kvs_insert_sparse_cowbtree+0xd1>
			r = dm_btree_insert(&(kvcbt->info), kvcbt->root,
    3451:	49 8b 76 68          	mov    0x68(%r14),%rsi
    3455:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
    3459:	4d 8d 46 68          	lea    0x68(%r14),%r8
    345d:	48 8d 55 c8          	lea    -0x38(%rbp),%rdx
    3461:	4c 89 f9             	mov    %r15,%rcx
    3464:	e8 00 00 00 00       	callq  3469 <kvs_insert_sparse_cowbtree+0xe9>
			kfree(entry);
    3469:	4c 89 ff             	mov    %r15,%rdi
    346c:	e8 00 00 00 00       	callq  3471 <kvs_insert_sparse_cowbtree+0xf1>
			if (i > kvcbt->lpc_cur) {
    3471:	8b 45 b4             	mov    -0x4c(%rbp),%eax
    3474:	41 39 46 70          	cmp    %eax,0x70(%r14)
    3478:	0f 82 91 00 00 00    	jb     350f <kvs_insert_sparse_cowbtree+0x18f>
			return 0;
    347e:	31 c0                	xor    %eax,%eax
    3480:	eb 12                	jmp    3494 <kvs_insert_sparse_cowbtree+0x114>
		} else if (r >= 0) {
    3482:	85 c0                	test   %eax,%eax
    3484:	79 3a                	jns    34c0 <kvs_insert_sparse_cowbtree+0x140>
			kfree(entry);
    3486:	4c 89 ff             	mov    %r15,%rdi
    3489:	89 45 c0             	mov    %eax,-0x40(%rbp)
    348c:	e8 00 00 00 00       	callq  3491 <kvs_insert_sparse_cowbtree+0x111>
			return r;
    3491:	8b 45 c0             	mov    -0x40(%rbp),%eax
}
    3494:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
    3498:	65 48 33 1c 25 28 00 	xor    %gs:0x28,%rbx
    349f:	00 00 
    34a1:	75 67                	jne    350a <kvs_insert_sparse_cowbtree+0x18a>
    34a3:	48 83 c4 28          	add    $0x28,%rsp
    34a7:	5b                   	pop    %rbx
    34a8:	41 5c                	pop    %r12
    34aa:	41 5d                	pop    %r13
    34ac:	41 5e                	pop    %r14
    34ae:	41 5f                	pop    %r15
    34b0:	5d                   	pop    %rbp
    34b1:	c3                   	retq   
		return -EINVAL;
    34b2:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    34b7:	eb db                	jmp    3494 <kvs_insert_sparse_cowbtree+0x114>
		return -ENOMEM;
    34b9:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
    34be:	eb d4                	jmp    3494 <kvs_insert_sparse_cowbtree+0x114>
			DMINFO("Collision detected for key: %s",(char *)key);
    34c0:	4c 89 ee             	mov    %r13,%rsi
    34c3:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    34ca:	e8 00 00 00 00       	callq  34cf <kvs_insert_sparse_cowbtree+0x14f>
	for (i = 0; i <= kvcbt->lpc_max; i++) {
    34cf:	83 45 b4 01          	addl   $0x1,-0x4c(%rbp)
    34d3:	41 8b 76 74          	mov    0x74(%r14),%esi
    34d7:	8b 45 b4             	mov    -0x4c(%rbp),%eax
			key_val++;
    34da:	48 83 45 c8 01       	addq   $0x1,-0x38(%rbp)
	for (i = 0; i <= kvcbt->lpc_max; i++) {
    34df:	39 c6                	cmp    %eax,%esi
    34e1:	0f 83 10 ff ff ff    	jae    33f7 <kvs_insert_sparse_cowbtree+0x77>
	DMINFO("Linear probing hard limit hit for insert hence"
    34e7:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    34ee:	e8 00 00 00 00       	callq  34f3 <kvs_insert_sparse_cowbtree+0x173>
	kvcbt->lpc_cur = kvcbt->lpc_max;
    34f3:	41 8b 46 74          	mov    0x74(%r14),%eax
	kfree(entry);
    34f7:	4c 89 ff             	mov    %r15,%rdi
	kvcbt->lpc_cur = kvcbt->lpc_max;
    34fa:	41 89 46 70          	mov    %eax,0x70(%r14)
	kfree(entry);
    34fe:	e8 00 00 00 00       	callq  3503 <kvs_insert_sparse_cowbtree+0x183>
	return -ENOSPC;
    3503:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
    3508:	eb 8a                	jmp    3494 <kvs_insert_sparse_cowbtree+0x114>
}
    350a:	e8 00 00 00 00       	callq  350f <kvs_insert_sparse_cowbtree+0x18f>
				DMINFO("Changing linear probing to %d", i);
    350f:	89 c3                	mov    %eax,%ebx
    3511:	89 c6                	mov    %eax,%esi
    3513:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    351a:	e8 00 00 00 00       	callq  351f <kvs_insert_sparse_cowbtree+0x19f>
				kvcbt->lpc_cur = i;
    351f:	41 89 5e 70          	mov    %ebx,0x70(%r14)
			return 0;
    3523:	31 c0                	xor    %eax,%eax
    3525:	e9 6a ff ff ff       	jmpq   3494 <kvs_insert_sparse_cowbtree+0x114>
    352a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000003530 <kvs_insert_linear_cowbtree>:
{
    3530:	e8 00 00 00 00       	callq  3535 <kvs_insert_linear_cowbtree+0x5>
    3535:	55                   	push   %rbp
    3536:	48 89 e5             	mov    %rsp,%rbp
    3539:	48 83 ec 10          	sub    $0x10,%rsp
    353d:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    3544:	00 00 
    3546:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    354a:	31 c0                	xor    %eax,%eax
	if (ksize != kvs->ksize)
    354c:	39 57 04             	cmp    %edx,0x4(%rdi)
    354f:	75 39                	jne    358a <kvs_insert_linear_cowbtree+0x5a>
	if (vsize != kvs->vsize)
    3551:	44 39 07             	cmp    %r8d,(%rdi)
    3554:	49 89 fa             	mov    %rdi,%r10
		return -EINVAL;
    3557:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	if (vsize != kvs->vsize)
    355c:	75 1b                	jne    3579 <kvs_insert_linear_cowbtree+0x49>
    355e:	49 89 f3             	mov    %rsi,%r11
	return dm_btree_insert_notify(&(kvcbt->info), kvcbt->root, key,
    3561:	48 8b 77 60          	mov    0x60(%rdi),%rsi
    3565:	4c 8d 4d f4          	lea    -0xc(%rbp),%r9
    3569:	48 8d 7f 28          	lea    0x28(%rdi),%rdi
    356d:	4d 8d 42 60          	lea    0x60(%r10),%r8
    3571:	4c 89 da             	mov    %r11,%rdx
    3574:	e8 00 00 00 00       	callq  3579 <kvs_insert_linear_cowbtree+0x49>
}
    3579:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
    357d:	65 48 33 34 25 28 00 	xor    %gs:0x28,%rsi
    3584:	00 00 
    3586:	75 09                	jne    3591 <kvs_insert_linear_cowbtree+0x61>
    3588:	c9                   	leaveq 
    3589:	c3                   	retq   
		return -EINVAL;
    358a:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    358f:	eb e8                	jmp    3579 <kvs_insert_linear_cowbtree+0x49>
}
    3591:	e8 00 00 00 00       	callq  3596 <kvs_insert_linear_cowbtree+0x66>
    3596:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    359d:	00 00 00 

00000000000035a0 <__commit_transaction>:
{
    35a0:	e8 00 00 00 00       	callq  35a5 <__commit_transaction+0x5>
    35a5:	4c 8d 54 24 08       	lea    0x8(%rsp),%r10
    35aa:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    35ae:	41 ff 72 f8          	pushq  -0x8(%r10)
    35b2:	55                   	push   %rbp
    35b3:	48 89 e5             	mov    %rsp,%rbp
    35b6:	41 55                	push   %r13
    35b8:	41 54                	push   %r12
    35ba:	41 52                	push   %r10
    35bc:	53                   	push   %rbx
    35bd:	48 89 fb             	mov    %rdi,%rbx
    35c0:	41 89 f4             	mov    %esi,%r12d
    35c3:	48 83 ec 30          	sub    $0x30,%rsp
	r = dm_sm_commit(md->data_sm);
    35c7:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
{
    35cb:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    35d2:	00 00 
    35d4:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    35d8:	31 c0                	xor    %eax,%eax
	return sm->commit(sm);
    35da:	48 8b 47 38          	mov    0x38(%rdi),%rax
    35de:	e8 00 00 00 00       	callq  35e3 <__commit_transaction+0x43>
	if (r < 0)
    35e3:	85 c0                	test   %eax,%eax
    35e5:	78 4b                	js     3632 <__commit_transaction+0x92>
	r = dm_tm_pre_commit(md->tm);
    35e7:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
    35eb:	e8 00 00 00 00       	callq  35f0 <__commit_transaction+0x50>
	if (r < 0)
    35f0:	85 c0                	test   %eax,%eax
    35f2:	78 3e                	js     3632 <__commit_transaction+0x92>
	r = dm_sm_root_size(md->meta_sm, &metadata_len);
    35f4:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
	return sm->root_size(sm, result);
    35f8:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
    35fc:	48 8b 47 58          	mov    0x58(%rdi),%rax
    3600:	e8 00 00 00 00       	callq  3605 <__commit_transaction+0x65>
	if (r < 0)
    3605:	85 c0                	test   %eax,%eax
    3607:	78 29                	js     3632 <__commit_transaction+0x92>
	r = dm_sm_root_size(md->data_sm, &data_len);
    3609:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    360d:	48 8d 75 c8          	lea    -0x38(%rbp),%rsi
    3611:	48 8b 47 58          	mov    0x58(%rdi),%rax
    3615:	e8 00 00 00 00       	callq  361a <__commit_transaction+0x7a>
	if (r < 0)
    361a:	85 c0                	test   %eax,%eax
    361c:	78 14                	js     3632 <__commit_transaction+0x92>
	r = dm_bm_write_lock(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
    361e:	48 8b 3b             	mov    (%rbx),%rdi
    3621:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
    3625:	31 d2                	xor    %edx,%edx
    3627:	31 f6                	xor    %esi,%esi
    3629:	e8 00 00 00 00       	callq  362e <__commit_transaction+0x8e>
	if (r)
    362e:	85 c0                	test   %eax,%eax
    3630:	74 24                	je     3656 <__commit_transaction+0xb6>
}
    3632:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
    3636:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
    363d:	00 00 
    363f:	0f 85 ee 00 00 00    	jne    3733 <__commit_transaction+0x193>
    3645:	48 83 c4 30          	add    $0x30,%rsp
    3649:	5b                   	pop    %rbx
    364a:	41 5a                	pop    %r10
    364c:	41 5c                	pop    %r12
    364e:	41 5d                	pop    %r13
    3650:	5d                   	pop    %rbp
    3651:	49 8d 62 f8          	lea    -0x8(%r10),%rsp
    3655:	c3                   	retq   
	disk_super = dm_block_data(sblock);
    3656:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    365a:	e8 00 00 00 00       	callq  365f <__commit_transaction+0xbf>
	if (clean_shutdown_flag)
    365f:	45 84 e4             	test   %r12b,%r12b
	disk_super = dm_block_data(sblock);
    3662:	49 89 c5             	mov    %rax,%r13
	if (clean_shutdown_flag)
    3665:	0f 85 ab 00 00 00    	jne    3716 <__commit_transaction+0x176>
		disk_super->flags &= ~(1 << CLEAN_SHUTDOWN);
    366b:	83 60 10 fe          	andl   $0xfffffffe,0x10(%rax)
	if (md->kvs_linear)
    366f:	48 8b 43 20          	mov    0x20(%rbx),%rax
    3673:	48 85 c0             	test   %rax,%rax
    3676:	74 0b                	je     3683 <__commit_transaction+0xe3>
		disk_super->lbn_pbn_root = cpu_to_le64(md->kvs_linear->root);
    3678:	48 8b 40 60          	mov    0x60(%rax),%rax
    367c:	49 89 85 2d 01 00 00 	mov    %rax,0x12d(%r13)
	if (md->kvs_sparse) {
    3683:	48 8b 43 28          	mov    0x28(%rbx),%rax
    3687:	48 85 c0             	test   %rax,%rax
    368a:	74 16                	je     36a2 <__commit_transaction+0x102>
		disk_super->hash_pbn_root = cpu_to_le64(md->kvs_sparse->root);
    368c:	48 8b 40 68          	mov    0x68(%rax),%rax
    3690:	49 89 85 35 01 00 00 	mov    %rax,0x135(%r13)
		disk_super->lpc_last = md->kvs_sparse->lpc_cur;
    3697:	48 8b 43 28          	mov    0x28(%rbx),%rax
    369b:	8b 40 70             	mov    0x70(%rax),%eax
    369e:	41 88 45 2c          	mov    %al,0x2c(%r13)
	r = dm_sm_copy_root(md->meta_sm,
    36a2:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
			    &disk_super->metadata_space_map_root, metadata_len);
    36a6:	49 8d 75 2d          	lea    0x2d(%r13),%rsi
	return sm->copy_root(sm, copy_to_here_le, len);
    36aa:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    36ae:	48 8b 47 60          	mov    0x60(%rdi),%rax
    36b2:	e8 00 00 00 00       	callq  36b7 <__commit_transaction+0x117>
	if (r < 0)
    36b7:	85 c0                	test   %eax,%eax
    36b9:	78 64                	js     371f <__commit_transaction+0x17f>
	r = dm_sm_copy_root(md->data_sm, &disk_super->data_space_map_root,
    36bb:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    36bf:	49 8d b5 ad 00 00 00 	lea    0xad(%r13),%rsi
    36c6:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
    36ca:	48 8b 47 60          	mov    0x60(%rdi),%rax
    36ce:	e8 00 00 00 00       	callq  36d3 <__commit_transaction+0x133>
	if (r < 0)
    36d3:	85 c0                	test   %eax,%eax
    36d5:	78 48                	js     371f <__commit_transaction+0x17f>
    36d7:	48 8b 53 38          	mov    0x38(%rbx),%rdx
    36db:	48 8b 43 30          	mov    0x30(%rbx),%rax
	disk_super->csum = cpu_to_le32(dm_bm_checksum(&disk_super->flags,
    36df:	49 8d 7d 10          	lea    0x10(%r13),%rdi
    36e3:	be 59 01 00 00       	mov    $0x159,%esi
    36e8:	49 89 95 4d 01 00 00 	mov    %rdx,0x14d(%r13)
    36ef:	49 89 85 45 01 00 00 	mov    %rax,0x145(%r13)
    36f6:	ba 87 e4 02 00       	mov    $0x2e487,%edx
    36fb:	e8 00 00 00 00       	callq  3700 <__commit_transaction+0x160>
    3700:	41 89 45 00          	mov    %eax,0x0(%r13)
	r = dm_tm_commit(md->tm, sblock);
    3704:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
    3708:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    370c:	e8 00 00 00 00       	callq  3711 <__commit_transaction+0x171>
    3711:	e9 1c ff ff ff       	jmpq   3632 <__commit_transaction+0x92>
		disk_super->flags |= (1 << CLEAN_SHUTDOWN);
    3716:	83 48 10 01          	orl    $0x1,0x10(%rax)
    371a:	e9 50 ff ff ff       	jmpq   366f <__commit_transaction+0xcf>
	dm_bm_unlock(sblock);
    371f:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
    3723:	89 45 bc             	mov    %eax,-0x44(%rbp)
    3726:	e8 00 00 00 00       	callq  372b <__commit_transaction+0x18b>
    372b:	8b 45 bc             	mov    -0x44(%rbp),%eax
	return r;
    372e:	e9 ff fe ff ff       	jmpq   3632 <__commit_transaction+0x92>
}
    3733:	e8 00 00 00 00       	callq  3738 <__commit_transaction+0x198>
    3738:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    373f:	00 

0000000000003740 <flush_meta_cowbtree>:
{
    3740:	e8 00 00 00 00       	callq  3745 <flush_meta_cowbtree+0x5>
    3745:	55                   	push   %rbp
	r = __commit_transaction(md, clean_shutdown_flag);
    3746:	31 f6                	xor    %esi,%esi
{
    3748:	48 89 e5             	mov    %rsp,%rbp
    374b:	53                   	push   %rbx
    374c:	48 89 fb             	mov    %rdi,%rbx
	r = __commit_transaction(md, clean_shutdown_flag);
    374f:	e8 4c fe ff ff       	callq  35a0 <__commit_transaction>
	if (r < 0)
    3754:	85 c0                	test   %eax,%eax
    3756:	78 08                	js     3760 <flush_meta_cowbtree+0x20>
	r = __begin_transaction(md);
    3758:	48 89 df             	mov    %rbx,%rdi
    375b:	e8 a0 f5 ff ff       	callq  2d00 <__begin_transaction>
}
    3760:	5b                   	pop    %rbx
    3761:	5d                   	pop    %rbp
    3762:	c3                   	retq   
    3763:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    376a:	00 00 00 00 
    376e:	66 90                	xchg   %ax,%ax

0000000000003770 <exit_meta_cowbtree>:
{
    3770:	e8 00 00 00 00       	callq  3775 <exit_meta_cowbtree+0x5>
    3775:	55                   	push   %rbp
	ret = __commit_transaction(md, clean_shutdown_flag);
    3776:	be 01 00 00 00       	mov    $0x1,%esi
{
    377b:	48 89 e5             	mov    %rsp,%rbp
    377e:	53                   	push   %rbx
    377f:	48 89 fb             	mov    %rdi,%rbx
	ret = __commit_transaction(md, clean_shutdown_flag);
    3782:	e8 19 fe ff ff       	callq  35a0 <__commit_transaction>
	if (ret < 0)
    3787:	85 c0                	test   %eax,%eax
    3789:	78 46                	js     37d1 <exit_meta_cowbtree+0x61>
	dm_sm_destroy(md->data_sm);
    378b:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
	sm->destroy(sm);
    378f:	48 8b 07             	mov    (%rdi),%rax
    3792:	e8 00 00 00 00       	callq  3797 <exit_meta_cowbtree+0x27>
	dm_tm_destroy(md->tm);
    3797:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
    379b:	e8 00 00 00 00       	callq  37a0 <exit_meta_cowbtree+0x30>
	dm_sm_destroy(md->meta_sm);
    37a0:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
    37a4:	48 8b 07             	mov    (%rdi),%rax
    37a7:	e8 00 00 00 00       	callq  37ac <exit_meta_cowbtree+0x3c>
	dm_block_manager_destroy(md->meta_bm);
    37ac:	48 8b 3b             	mov    (%rbx),%rdi
    37af:	e8 00 00 00 00       	callq  37b4 <exit_meta_cowbtree+0x44>
	kfree(md->kvs_linear);
    37b4:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
    37b8:	e8 00 00 00 00       	callq  37bd <exit_meta_cowbtree+0x4d>
	kfree(md->kvs_sparse);
    37bd:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
    37c1:	e8 00 00 00 00       	callq  37c6 <exit_meta_cowbtree+0x56>
	kfree(md);
    37c6:	48 89 df             	mov    %rbx,%rdi
    37c9:	e8 00 00 00 00       	callq  37ce <exit_meta_cowbtree+0x5e>
}
    37ce:	5b                   	pop    %rbx
    37cf:	5d                   	pop    %rbp
    37d0:	c3                   	retq   
		DMWARN("%s: __commit_transaction() failed, error = %d.",
    37d1:	89 c2                	mov    %eax,%edx
    37d3:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    37da:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    37e1:	e8 00 00 00 00       	callq  37e6 <exit_meta_cowbtree+0x76>
    37e6:	eb a3                	jmp    378b <exit_meta_cowbtree+0x1b>
    37e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    37ef:	00 

00000000000037f0 <kvs_create_sparse_cowbtree>:
{
    37f0:	e8 00 00 00 00       	callq  37f5 <kvs_create_sparse_cowbtree+0x5>
	if (!vsize || !ksize)
    37f5:	85 d2                	test   %edx,%edx
    37f7:	74 14                	je     380d <kvs_create_sparse_cowbtree+0x1d>
    37f9:	85 f6                	test   %esi,%esi
    37fb:	74 10                	je     380d <kvs_create_sparse_cowbtree+0x1d>
	if (md->kvs_sparse)
    37fd:	48 83 7f 28 00       	cmpq   $0x0,0x28(%rdi)
		return ERR_PTR(-EBUSY);
    3802:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax
	if (md->kvs_sparse)
    3809:	74 0a                	je     3815 <kvs_create_sparse_cowbtree+0x25>
}
    380b:	f3 c3                	repz retq 
		return ERR_PTR(-ENOTSUPP);
    380d:	48 c7 c0 f4 fd ff ff 	mov    $0xfffffffffffffdf4,%rax
    3814:	c3                   	retq   
{
    3815:	55                   	push   %rbp
    3816:	48 89 e5             	mov    %rsp,%rbp
    3819:	41 57                	push   %r15
    381b:	41 56                	push   %r14
    381d:	41 55                	push   %r13
    381f:	41 54                	push   %r12
    3821:	49 89 fe             	mov    %rdi,%r14
    3824:	53                   	push   %rbx
    3825:	41 89 f5             	mov    %esi,%r13d
    3828:	89 d3                	mov    %edx,%ebx
			return kmem_cache_alloc_trace(kmalloc_caches[index],
    382a:	be 00 00 60 00       	mov    $0x600000,%esi
    382f:	ba 78 00 00 00       	mov    $0x78,%edx
    3834:	45 89 c4             	mov    %r8d,%r12d
    3837:	48 83 ec 08          	sub    $0x8,%rsp
    383b:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 3842 <kvs_create_sparse_cowbtree+0x52>
    3842:	e8 00 00 00 00       	callq  3847 <kvs_create_sparse_cowbtree+0x57>
    3847:	49 89 c7             	mov    %rax,%r15
		return ERR_PTR(-ENOMEM);
    384a:	48 c7 c0 f4 ff ff ff 	mov    $0xfffffffffffffff4,%rax
	if (!kvs)
    3851:	4d 85 ff             	test   %r15,%r15
    3854:	0f 84 9b 00 00 00    	je     38f5 <kvs_create_sparse_cowbtree+0x105>
	kvs->info.tm = md->tm;
    385a:	49 8b 46 08          	mov    0x8(%r14),%rax
	kvs->entry_size = vsize + ksize;
    385e:	42 8d 14 2b          	lea    (%rbx,%r13,1),%edx
	if (!unformatted) {
    3862:	45 84 e4             	test   %r12b,%r12b
	kvs->ckvs.vsize = vsize;
    3865:	41 89 1f             	mov    %ebx,(%r15)
	kvs->ckvs.ksize = ksize;
    3868:	45 89 6f 04          	mov    %r13d,0x4(%r15)
	kvs->entry_size = vsize + ksize;
    386c:	41 89 57 28          	mov    %edx,0x28(%r15)
	kvs->info.levels = 1;
    3870:	41 c7 47 38 01 00 00 	movl   $0x1,0x38(%r15)
    3877:	00 
	kvs->info.tm = md->tm;
    3878:	49 89 47 30          	mov    %rax,0x30(%r15)
	kvs->lpc_cur = 0;
    387c:	48 b8 00 00 00 00 05 	movabs $0x500000000,%rax
    3883:	00 00 00 
	kvs->info.value_type.context = NULL;
    3886:	49 c7 47 40 00 00 00 	movq   $0x0,0x40(%r15)
    388d:	00 
	kvs->info.value_type.size = kvs->entry_size;
    388e:	41 89 57 48          	mov    %edx,0x48(%r15)
	kvs->info.value_type.inc = NULL;
    3892:	49 c7 47 50 00 00 00 	movq   $0x0,0x50(%r15)
    3899:	00 
	kvs->info.value_type.dec = NULL;
    389a:	49 c7 47 58 00 00 00 	movq   $0x0,0x58(%r15)
    38a1:	00 
	kvs->info.value_type.equal = NULL;
    38a2:	49 c7 47 60 00 00 00 	movq   $0x0,0x60(%r15)
    38a9:	00 
	kvs->lpc_cur = 0;
    38aa:	49 89 47 70          	mov    %rax,0x70(%r15)
	if (!unformatted) {
    38ae:	74 54                	je     3904 <kvs_create_sparse_cowbtree+0x114>
		r = dm_btree_empty(&(kvs->info), &(kvs->root), 2);
    38b0:	49 8d 77 68          	lea    0x68(%r15),%rsi
    38b4:	49 8d 7f 30          	lea    0x30(%r15),%rdi
    38b8:	ba 02 00 00 00       	mov    $0x2,%edx
    38bd:	e8 00 00 00 00       	callq  38c2 <kvs_create_sparse_cowbtree+0xd2>
		if (r < 0) {
    38c2:	85 c0                	test   %eax,%eax
    38c4:	78 6c                	js     3932 <kvs_create_sparse_cowbtree+0x142>
		flush_meta_cowbtree(md);
    38c6:	4c 89 f7             	mov    %r14,%rdi
    38c9:	e8 72 fe ff ff       	callq  3740 <flush_meta_cowbtree>
		kvs->ckvs.kvs_insert = kvs_insert_sparse_cowbtree;
    38ce:	49 c7 47 18 00 00 00 	movq   $0x0,0x18(%r15)
    38d5:	00 
		kvs->ckvs.kvs_lookup = kvs_lookup_sparse_cowbtree;
    38d6:	49 c7 47 10 00 00 00 	movq   $0x0,0x10(%r15)
    38dd:	00 
		kvs->ckvs.kvs_delete = kvs_delete_sparse_cowbtree;
    38de:	49 c7 47 08 00 00 00 	movq   $0x0,0x8(%r15)
    38e5:	00 
		kvs->ckvs.kvs_iterate = kvs_iterate_sparse_cowbtree;
    38e6:	49 c7 47 20 00 00 00 	movq   $0x0,0x20(%r15)
    38ed:	00 
		md->kvs_sparse = kvs;
    38ee:	4d 89 7e 28          	mov    %r15,0x28(%r14)
	return &(kvs->ckvs);
    38f2:	4c 89 f8             	mov    %r15,%rax
}
    38f5:	48 83 c4 08          	add    $0x8,%rsp
    38f9:	5b                   	pop    %rbx
    38fa:	41 5c                	pop    %r12
    38fc:	41 5d                	pop    %r13
    38fe:	41 5e                	pop    %r14
    3900:	41 5f                	pop    %r15
    3902:	5d                   	pop    %rbp
    3903:	c3                   	retq   
		md->kvs_sparse = kvs;
    3904:	4d 89 7e 28          	mov    %r15,0x28(%r14)
		__begin_transaction(md);
    3908:	4c 89 f7             	mov    %r14,%rdi
		kvs->ckvs.kvs_insert = kvs_insert_sparse_cowbtree;
    390b:	49 c7 47 18 00 00 00 	movq   $0x0,0x18(%r15)
    3912:	00 
		kvs->ckvs.kvs_lookup = kvs_lookup_sparse_cowbtree;
    3913:	49 c7 47 10 00 00 00 	movq   $0x0,0x10(%r15)
    391a:	00 
		kvs->ckvs.kvs_delete = kvs_delete_sparse_cowbtree;
    391b:	49 c7 47 08 00 00 00 	movq   $0x0,0x8(%r15)
    3922:	00 
		kvs->ckvs.kvs_iterate = kvs_iterate_sparse_cowbtree;
    3923:	49 c7 47 20 00 00 00 	movq   $0x0,0x20(%r15)
    392a:	00 
		__begin_transaction(md);
    392b:	e8 d0 f3 ff ff       	callq  2d00 <__begin_transaction>
    3930:	eb c0                	jmp    38f2 <kvs_create_sparse_cowbtree+0x102>
			kvs = ERR_PTR(r);
    3932:	48 98                	cltq   
	kfree(kvs);
    3934:	48 89 c7             	mov    %rax,%rdi
    3937:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    393b:	e8 00 00 00 00       	callq  3940 <kvs_create_sparse_cowbtree+0x150>
    3940:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    3944:	eb af                	jmp    38f5 <kvs_create_sparse_cowbtree+0x105>
    3946:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    394d:	00 00 00 

0000000000003950 <kvs_create_linear_cowbtree>:
{
    3950:	e8 00 00 00 00       	callq  3955 <kvs_create_linear_cowbtree+0x5>
	if (ksize != 8)
    3955:	85 d2                	test   %edx,%edx
    3957:	74 05                	je     395e <kvs_create_linear_cowbtree+0xe>
    3959:	83 fe 08             	cmp    $0x8,%esi
    395c:	74 08                	je     3966 <kvs_create_linear_cowbtree+0x16>
		return ERR_PTR(-ENOTSUPP);
    395e:	48 c7 c0 f4 fd ff ff 	mov    $0xfffffffffffffdf4,%rax
    3965:	c3                   	retq   
	if (md->kvs_linear)
    3966:	48 83 7f 20 00       	cmpq   $0x0,0x20(%rdi)
		return ERR_PTR(-EBUSY);
    396b:	48 c7 c0 f0 ff ff ff 	mov    $0xfffffffffffffff0,%rax
	if (md->kvs_linear)
    3972:	74 02                	je     3976 <kvs_create_linear_cowbtree+0x26>
}
    3974:	f3 c3                	repz retq 
{
    3976:	55                   	push   %rbp
    3977:	be 00 00 60 00       	mov    $0x600000,%esi
    397c:	48 89 e5             	mov    %rsp,%rbp
    397f:	41 56                	push   %r14
    3981:	41 55                	push   %r13
    3983:	41 54                	push   %r12
    3985:	53                   	push   %rbx
    3986:	49 89 fd             	mov    %rdi,%r13
    3989:	89 d3                	mov    %edx,%ebx
    398b:	ba 68 00 00 00       	mov    $0x68,%edx
    3990:	45 89 c4             	mov    %r8d,%r12d
    3993:	48 83 ec 08          	sub    $0x8,%rsp
    3997:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 399e <kvs_create_linear_cowbtree+0x4e>
    399e:	e8 00 00 00 00       	callq  39a3 <kvs_create_linear_cowbtree+0x53>
    39a3:	49 89 c6             	mov    %rax,%r14
		return ERR_PTR(-ENOMEM);
    39a6:	48 c7 c0 f4 ff ff ff 	mov    $0xfffffffffffffff4,%rax
	if (!kvs)
    39ad:	4d 85 f6             	test   %r14,%r14
    39b0:	74 73                	je     3a25 <kvs_create_linear_cowbtree+0xd5>
	kvs->info.tm = md->tm;
    39b2:	49 8b 45 08          	mov    0x8(%r13),%rax
	if (!unformatted) {
    39b6:	45 84 e4             	test   %r12b,%r12b
	kvs->ckvs.ksize = ksize;
    39b9:	41 c7 46 04 08 00 00 	movl   $0x8,0x4(%r14)
    39c0:	00 
	kvs->ckvs.vsize = vsize;
    39c1:	41 89 1e             	mov    %ebx,(%r14)
	kvs->info.levels = 1;
    39c4:	41 c7 46 30 01 00 00 	movl   $0x1,0x30(%r14)
    39cb:	00 
	kvs->info.value_type.context = NULL;
    39cc:	49 c7 46 38 00 00 00 	movq   $0x0,0x38(%r14)
    39d3:	00 
	kvs->info.value_type.size = vsize;
    39d4:	41 89 5e 40          	mov    %ebx,0x40(%r14)
	kvs->info.tm = md->tm;
    39d8:	49 89 46 28          	mov    %rax,0x28(%r14)
	kvs->info.value_type.inc = NULL;
    39dc:	49 c7 46 48 00 00 00 	movq   $0x0,0x48(%r14)
    39e3:	00 
	kvs->info.value_type.dec = NULL;
    39e4:	49 c7 46 50 00 00 00 	movq   $0x0,0x50(%r14)
    39eb:	00 
	kvs->info.value_type.equal = NULL;
    39ec:	49 c7 46 58 00 00 00 	movq   $0x0,0x58(%r14)
    39f3:	00 
	if (!unformatted) {
    39f4:	75 3c                	jne    3a32 <kvs_create_linear_cowbtree+0xe2>
		md->kvs_linear = kvs;
    39f6:	4d 89 75 20          	mov    %r14,0x20(%r13)
		__begin_transaction(md);
    39fa:	4c 89 ef             	mov    %r13,%rdi
		kvs->ckvs.kvs_insert = kvs_insert_linear_cowbtree;
    39fd:	49 c7 46 18 00 00 00 	movq   $0x0,0x18(%r14)
    3a04:	00 
		kvs->ckvs.kvs_lookup = kvs_lookup_linear_cowbtree;
    3a05:	49 c7 46 10 00 00 00 	movq   $0x0,0x10(%r14)
    3a0c:	00 
		kvs->ckvs.kvs_delete = kvs_delete_linear_cowbtree;
    3a0d:	49 c7 46 08 00 00 00 	movq   $0x0,0x8(%r14)
    3a14:	00 
		kvs->ckvs.kvs_iterate = NULL;
    3a15:	49 c7 46 20 00 00 00 	movq   $0x0,0x20(%r14)
    3a1c:	00 
		__begin_transaction(md);
    3a1d:	e8 de f2 ff ff       	callq  2d00 <__begin_transaction>
	return &(kvs->ckvs);
    3a22:	4c 89 f0             	mov    %r14,%rax
}
    3a25:	48 83 c4 08          	add    $0x8,%rsp
    3a29:	5b                   	pop    %rbx
    3a2a:	41 5c                	pop    %r12
    3a2c:	41 5d                	pop    %r13
    3a2e:	41 5e                	pop    %r14
    3a30:	5d                   	pop    %rbp
    3a31:	c3                   	retq   
		r = dm_btree_empty(&(kvs->info), &(kvs->root), 1);
    3a32:	49 8d 76 60          	lea    0x60(%r14),%rsi
    3a36:	49 8d 7e 28          	lea    0x28(%r14),%rdi
    3a3a:	ba 01 00 00 00       	mov    $0x1,%edx
    3a3f:	e8 00 00 00 00       	callq  3a44 <kvs_create_linear_cowbtree+0xf4>
		if (r < 0) {
    3a44:	85 c0                	test   %eax,%eax
    3a46:	78 2e                	js     3a76 <kvs_create_linear_cowbtree+0x126>
		flush_meta_cowbtree(md);
    3a48:	4c 89 ef             	mov    %r13,%rdi
    3a4b:	e8 f0 fc ff ff       	callq  3740 <flush_meta_cowbtree>
		kvs->ckvs.kvs_insert = kvs_insert_linear_cowbtree;
    3a50:	49 c7 46 18 00 00 00 	movq   $0x0,0x18(%r14)
    3a57:	00 
		kvs->ckvs.kvs_lookup = kvs_lookup_linear_cowbtree;
    3a58:	49 c7 46 10 00 00 00 	movq   $0x0,0x10(%r14)
    3a5f:	00 
		kvs->ckvs.kvs_delete = kvs_delete_linear_cowbtree;
    3a60:	49 c7 46 08 00 00 00 	movq   $0x0,0x8(%r14)
    3a67:	00 
		kvs->ckvs.kvs_iterate = NULL;
    3a68:	49 c7 46 20 00 00 00 	movq   $0x0,0x20(%r14)
    3a6f:	00 
		md->kvs_linear = kvs;
    3a70:	4d 89 75 20          	mov    %r14,0x20(%r13)
    3a74:	eb ac                	jmp    3a22 <kvs_create_linear_cowbtree+0xd2>
			kvs = ERR_PTR(r);
    3a76:	48 98                	cltq   
	kfree(kvs);
    3a78:	48 89 c7             	mov    %rax,%rdi
    3a7b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    3a7f:	e8 00 00 00 00       	callq  3a84 <kvs_create_linear_cowbtree+0x134>
    3a84:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    3a88:	eb 9b                	jmp    3a25 <kvs_create_linear_cowbtree+0xd5>
    3a8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000003a90 <init_meta_cowbtree>:
{
    3a90:	e8 00 00 00 00       	callq  3a95 <init_meta_cowbtree+0x5>
    3a95:	55                   	push   %rbp
    3a96:	48 89 e5             	mov    %rsp,%rbp
    3a99:	41 57                	push   %r15
    3a9b:	41 56                	push   %r14
    3a9d:	41 55                	push   %r13
    3a9f:	41 54                	push   %r12
    3aa1:	49 89 fd             	mov    %rdi,%r13
    3aa4:	53                   	push   %rbx
	DMINFO("Initializing COWBTREE backend");
    3aa5:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
{
    3aac:	49 89 f6             	mov    %rsi,%r14
		return ERR_PTR(-ENOMEM);
    3aaf:	48 c7 c3 f4 ff ff ff 	mov    $0xfffffffffffffff4,%rbx
{
    3ab6:	48 83 ec 38          	sub    $0x38,%rsp
    3aba:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    3ac1:	00 00 
    3ac3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    3ac7:	31 c0                	xor    %eax,%eax
	DMINFO("Initializing COWBTREE backend");
    3ac9:	e8 00 00 00 00       	callq  3ace <init_meta_cowbtree+0x3e>
    3ace:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 3ad5 <init_meta_cowbtree+0x45>
    3ad5:	ba 40 00 00 00       	mov    $0x40,%edx
    3ada:	be 00 80 60 00       	mov    $0x608000,%esi
    3adf:	e8 00 00 00 00       	callq  3ae4 <init_meta_cowbtree+0x54>
	if (!md)
    3ae4:	48 85 c0             	test   %rax,%rax
    3ae7:	74 57                	je     3b40 <init_meta_cowbtree+0xb0>
	meta_bm = dm_block_manager_create(p->metadata_bdev, METADATA_BSIZE,
    3ae9:	49 8b 7d 00          	mov    0x0(%r13),%rdi
    3aed:	ba 05 00 00 00       	mov    $0x5,%edx
    3af2:	be 00 10 00 00       	mov    $0x1000,%esi
    3af7:	48 89 c3             	mov    %rax,%rbx
    3afa:	e8 00 00 00 00       	callq  3aff <init_meta_cowbtree+0x6f>
	if (IS_ERR(meta_bm)) {
    3aff:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
	meta_bm = dm_block_manager_create(p->metadata_bdev, METADATA_BSIZE,
    3b05:	49 89 c4             	mov    %rax,%r12
	if (IS_ERR(meta_bm)) {
    3b08:	0f 87 dc 01 00 00    	ja     3cea <init_meta_cowbtree+0x25a>
	unsigned int sb_block_size = dm_bm_block_size(bm) / sizeof(__le64);
    3b0e:	48 89 c7             	mov    %rax,%rdi
    3b11:	e8 00 00 00 00       	callq  3b16 <init_meta_cowbtree+0x86>
	r = dm_bm_read_lock(bm, METADATA_SUPERBLOCK_LOCATION, NULL, &b);
    3b16:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
    3b1a:	31 d2                	xor    %edx,%edx
    3b1c:	31 f6                	xor    %esi,%esi
    3b1e:	4c 89 e7             	mov    %r12,%rdi
	unsigned int sb_block_size = dm_bm_block_size(bm) / sizeof(__le64);
    3b21:	41 89 c7             	mov    %eax,%r15d
	r = dm_bm_read_lock(bm, METADATA_SUPERBLOCK_LOCATION, NULL, &b);
    3b24:	e8 00 00 00 00       	callq  3b29 <init_meta_cowbtree+0x99>
	if (r)
    3b29:	85 c0                	test   %eax,%eax
    3b2b:	74 38                	je     3b65 <init_meta_cowbtree+0xd5>
		md = ERR_PTR(ret);
    3b2d:	48 63 d8             	movslq %eax,%rbx
	dm_block_manager_destroy(meta_bm);
    3b30:	4c 89 e7             	mov    %r12,%rdi
    3b33:	e8 00 00 00 00       	callq  3b38 <init_meta_cowbtree+0xa8>
	kfree(md);
    3b38:	48 89 df             	mov    %rbx,%rdi
    3b3b:	e8 00 00 00 00       	callq  3b40 <init_meta_cowbtree+0xb0>
}
    3b40:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    3b44:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
    3b4b:	00 00 
    3b4d:	48 89 d8             	mov    %rbx,%rax
    3b50:	0f 85 0e 02 00 00    	jne    3d64 <init_meta_cowbtree+0x2d4>
    3b56:	48 83 c4 38          	add    $0x38,%rsp
    3b5a:	5b                   	pop    %rbx
    3b5b:	41 5c                	pop    %r12
    3b5d:	41 5d                	pop    %r13
    3b5f:	41 5e                	pop    %r14
    3b61:	41 5f                	pop    %r15
    3b63:	5d                   	pop    %rbp
    3b64:	c3                   	retq   
	data_le = dm_block_data(b);
    3b65:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
	unsigned int sb_block_size = dm_bm_block_size(bm) / sizeof(__le64);
    3b69:	41 c1 ef 03          	shr    $0x3,%r15d
	data_le = dm_block_data(b);
    3b6d:	e8 00 00 00 00       	callq  3b72 <init_meta_cowbtree+0xe2>
	for (i = 0; i < sb_block_size; i++) {
    3b72:	45 85 ff             	test   %r15d,%r15d
	*result = true;
    3b75:	41 c6 06 01          	movb   $0x1,(%r14)
	for (i = 0; i < sb_block_size; i++) {
    3b79:	74 2d                	je     3ba8 <init_meta_cowbtree+0x118>
		if (data_le[i] != zero) {
    3b7b:	48 83 38 00          	cmpq   $0x0,(%rax)
    3b7f:	0f 85 5c 01 00 00    	jne    3ce1 <init_meta_cowbtree+0x251>
    3b85:	41 8d 4f ff          	lea    -0x1(%r15),%ecx
    3b89:	48 8d 50 08          	lea    0x8(%rax),%rdx
    3b8d:	48 8d 44 c8 08       	lea    0x8(%rax,%rcx,8),%rax
    3b92:	eb 0f                	jmp    3ba3 <init_meta_cowbtree+0x113>
    3b94:	48 83 c2 08          	add    $0x8,%rdx
    3b98:	48 83 7a f8 00       	cmpq   $0x0,-0x8(%rdx)
    3b9d:	0f 85 3e 01 00 00    	jne    3ce1 <init_meta_cowbtree+0x251>
	for (i = 0; i < sb_block_size; i++) {
    3ba3:	48 39 d0             	cmp    %rdx,%rax
    3ba6:	75 ec                	jne    3b94 <init_meta_cowbtree+0x104>
	dm_bm_unlock(b);
    3ba8:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    3bac:	e8 00 00 00 00       	callq  3bb1 <init_meta_cowbtree+0x121>
	if (!*unformatted) {
    3bb1:	41 80 3e 00          	cmpb   $0x0,(%r14)
    3bb5:	0f 84 ae 01 00 00    	je     3d69 <init_meta_cowbtree+0x2d9>
	ret = dm_tm_create_with_sm(meta_bm, METADATA_SUPERBLOCK_LOCATION,
    3bbb:	48 8d 4d a8          	lea    -0x58(%rbp),%rcx
    3bbf:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    3bc3:	31 f6                	xor    %esi,%esi
    3bc5:	4c 89 e7             	mov    %r12,%rdi
    3bc8:	e8 00 00 00 00       	callq  3bcd <init_meta_cowbtree+0x13d>
	if (ret < 0) {
    3bcd:	85 c0                	test   %eax,%eax
    3bcf:	0f 88 58 ff ff ff    	js     3b2d <init_meta_cowbtree+0x9d>
	data_sm = dm_sm_disk_create(tm, p->blocks);
    3bd5:	49 8b 75 08          	mov    0x8(%r13),%rsi
    3bd9:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    3bdd:	e8 00 00 00 00       	callq  3be2 <init_meta_cowbtree+0x152>
	if (IS_ERR(data_sm)) {
    3be2:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
	data_sm = dm_sm_disk_create(tm, p->blocks);
    3be8:	49 89 c5             	mov    %rax,%r13
	if (IS_ERR(data_sm)) {
    3beb:	0f 87 01 01 00 00    	ja     3cf2 <init_meta_cowbtree+0x262>
	md->tm = tm;
    3bf1:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
	md->meta_sm = meta_sm;
    3bf5:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
	return sm->root_size(sm, result);
    3bf9:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
	md->meta_bm = meta_bm;
    3bfd:	4c 89 23             	mov    %r12,(%rbx)
	md->data_sm = data_sm;
    3c00:	4c 89 6b 10          	mov    %r13,0x10(%rbx)
	md->tm = tm;
    3c04:	48 89 43 08          	mov    %rax,0x8(%rbx)
	md->meta_sm = meta_sm;
    3c08:	48 89 7b 18          	mov    %rdi,0x18(%rbx)
    3c0c:	48 8b 47 58          	mov    0x58(%rdi),%rax
    3c10:	e8 00 00 00 00       	callq  3c15 <init_meta_cowbtree+0x185>
	if (r < 0)
    3c15:	85 c0                	test   %eax,%eax
    3c17:	0f 88 9b 00 00 00    	js     3cb8 <init_meta_cowbtree+0x228>
	r = dm_sm_root_size(md->data_sm, &data_len);
    3c1d:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    3c21:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
    3c25:	48 8b 47 58          	mov    0x58(%rdi),%rax
    3c29:	e8 00 00 00 00       	callq  3c2e <init_meta_cowbtree+0x19e>
	if (r < 0)
    3c2e:	85 c0                	test   %eax,%eax
    3c30:	0f 88 82 00 00 00    	js     3cb8 <init_meta_cowbtree+0x228>
	r = dm_sm_commit(md->data_sm);
    3c36:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
	return sm->commit(sm);
    3c3a:	48 8b 47 38          	mov    0x38(%rdi),%rax
    3c3e:	e8 00 00 00 00       	callq  3c43 <init_meta_cowbtree+0x1b3>
	if (r < 0)
    3c43:	85 c0                	test   %eax,%eax
    3c45:	78 71                	js     3cb8 <init_meta_cowbtree+0x228>
	r = dm_tm_pre_commit(md->tm);
    3c47:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
    3c4b:	e8 00 00 00 00       	callq  3c50 <init_meta_cowbtree+0x1c0>
	if (r < 0)
    3c50:	85 c0                	test   %eax,%eax
    3c52:	78 64                	js     3cb8 <init_meta_cowbtree+0x228>
	r = dm_bm_write_lock_zero(md->meta_bm, METADATA_SUPERBLOCK_LOCATION,
    3c54:	48 8b 3b             	mov    (%rbx),%rdi
    3c57:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
    3c5b:	31 d2                	xor    %edx,%edx
    3c5d:	31 f6                	xor    %esi,%esi
    3c5f:	e8 00 00 00 00       	callq  3c64 <init_meta_cowbtree+0x1d4>
	if (r < 0)
    3c64:	85 c0                	test   %eax,%eax
    3c66:	78 50                	js     3cb8 <init_meta_cowbtree+0x228>
	disk_super = dm_block_data(sblock);
    3c68:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    3c6c:	e8 00 00 00 00       	callq  3c71 <init_meta_cowbtree+0x1e1>
	r = dm_sm_copy_root(md->meta_sm, &disk_super->metadata_space_map_root,
    3c71:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
    3c75:	48 8d 70 2d          	lea    0x2d(%rax),%rsi
	disk_super = dm_block_data(sblock);
    3c79:	49 89 c6             	mov    %rax,%r14
	return sm->copy_root(sm, copy_to_here_le, len);
    3c7c:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
    3c80:	48 8b 47 60          	mov    0x60(%rdi),%rax
    3c84:	e8 00 00 00 00       	callq  3c89 <init_meta_cowbtree+0x1f9>
	if (r < 0)
    3c89:	85 c0                	test   %eax,%eax
    3c8b:	78 1c                	js     3ca9 <init_meta_cowbtree+0x219>
	r = dm_sm_copy_root(md->data_sm, &disk_super->data_space_map_root,
    3c8d:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    3c91:	49 8d b6 ad 00 00 00 	lea    0xad(%r14),%rsi
    3c98:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    3c9c:	48 8b 47 60          	mov    0x60(%rdi),%rax
    3ca0:	e8 00 00 00 00       	callq  3ca5 <init_meta_cowbtree+0x215>
	if (r < 0)
    3ca5:	85 c0                	test   %eax,%eax
    3ca7:	79 4e                	jns    3cf7 <init_meta_cowbtree+0x267>
	dm_bm_unlock(sblock);
    3ca9:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    3cad:	89 45 a4             	mov    %eax,-0x5c(%rbp)
    3cb0:	e8 00 00 00 00       	callq  3cb5 <init_meta_cowbtree+0x225>
    3cb5:	8b 45 a4             	mov    -0x5c(%rbp),%eax
		md = ERR_PTR(ret);
    3cb8:	48 63 d8             	movslq %eax,%rbx
	sm->destroy(sm);
    3cbb:	4c 89 ef             	mov    %r13,%rdi
    3cbe:	49 8b 45 00          	mov    0x0(%r13),%rax
    3cc2:	e8 00 00 00 00       	callq  3cc7 <init_meta_cowbtree+0x237>
	dm_tm_destroy(tm);
    3cc7:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
    3ccb:	e8 00 00 00 00       	callq  3cd0 <init_meta_cowbtree+0x240>
	dm_sm_destroy(meta_sm);
    3cd0:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
    3cd4:	48 8b 07             	mov    (%rdi),%rax
    3cd7:	e8 00 00 00 00       	callq  3cdc <init_meta_cowbtree+0x24c>
    3cdc:	e9 4f fe ff ff       	jmpq   3b30 <init_meta_cowbtree+0xa0>
			*result = false;
    3ce1:	41 c6 06 00          	movb   $0x0,(%r14)
    3ce5:	e9 be fe ff ff       	jmpq   3ba8 <init_meta_cowbtree+0x118>
		md = (struct metadata *)meta_bm;
    3cea:	48 89 c3             	mov    %rax,%rbx
    3ced:	e9 46 fe ff ff       	jmpq   3b38 <init_meta_cowbtree+0xa8>
		md = (struct metadata *)data_sm;
    3cf2:	48 89 c3             	mov    %rax,%rbx
    3cf5:	eb d0                	jmp    3cc7 <init_meta_cowbtree+0x237>
	disk_super->data_block_size = cpu_to_le32(METADATA_BSIZE);
    3cf7:	48 b8 00 10 00 00 00 	movabs $0x100000001000,%rax
    3cfe:	10 00 00 
	disk_super->magic = cpu_to_le32(DM_DEDUP_MAGIC);
    3d01:	49 c7 46 04 70 75 44 	movq   $0x44447570,0x4(%r14)
    3d08:	44 
	disk_super->version = DM_DEDUP_VERSION;
    3d09:	41 c7 46 0c 01 00 00 	movl   $0x1,0xc(%r14)
    3d10:	00 
	disk_super->data_block_size = cpu_to_le32(METADATA_BSIZE);
    3d11:	49 89 86 3d 01 00 00 	mov    %rax,0x13d(%r14)
	disk_super->blocknr = cpu_to_le64(dm_block_location(sblock));
    3d18:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    3d1c:	e8 00 00 00 00       	callq  3d21 <init_meta_cowbtree+0x291>
	disk_super->flags &= ~(1 << CLEAN_SHUTDOWN);
    3d21:	41 83 66 10 fe       	andl   $0xfffffffe,0x10(%r14)
	disk_super->blocknr = cpu_to_le64(dm_block_location(sblock));
    3d26:	49 89 46 14          	mov    %rax,0x14(%r14)
	return dm_tm_commit(md->tm, sblock);
    3d2a:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
    3d2e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    3d32:	e8 00 00 00 00       	callq  3d37 <init_meta_cowbtree+0x2a7>
	if (ret < 0) {
    3d37:	85 c0                	test   %eax,%eax
    3d39:	0f 88 79 ff ff ff    	js     3cb8 <init_meta_cowbtree+0x228>
	ret = __begin_transaction(md);
    3d3f:	48 89 df             	mov    %rbx,%rdi
    3d42:	e8 b9 ef ff ff       	callq  2d00 <__begin_transaction>
	if (ret < 0) {
    3d47:	85 c0                	test   %eax,%eax
    3d49:	0f 88 69 ff ff ff    	js     3cb8 <init_meta_cowbtree+0x228>
	md->kvs_linear = NULL;
    3d4f:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
    3d56:	00 
	md->kvs_sparse = NULL;
    3d57:	48 c7 43 28 00 00 00 	movq   $0x0,0x28(%rbx)
    3d5e:	00 
	return md;
    3d5f:	e9 dc fd ff ff       	jmpq   3b40 <init_meta_cowbtree+0xb0>
}
    3d64:	e8 00 00 00 00       	callq  3d69 <init_meta_cowbtree+0x2d9>
		DMINFO("Reconstruct DDUP device");
    3d69:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    3d70:	e8 00 00 00 00       	callq  3d75 <init_meta_cowbtree+0x2e5>
	r = dm_bm_read_lock(bm, METADATA_SUPERBLOCK_LOCATION,
    3d75:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
    3d79:	31 d2                	xor    %edx,%edx
    3d7b:	31 f6                	xor    %esi,%esi
    3d7d:	4c 89 e7             	mov    %r12,%rdi
    3d80:	e8 00 00 00 00       	callq  3d85 <init_meta_cowbtree+0x2f5>
	if (r)
    3d85:	85 c0                	test   %eax,%eax
	r = dm_bm_read_lock(bm, METADATA_SUPERBLOCK_LOCATION,
    3d87:	41 89 c5             	mov    %eax,%r13d
	if (r)
    3d8a:	0f 84 89 00 00 00    	je     3e19 <init_meta_cowbtree+0x389>
		if (ret < 0) {
    3d90:	45 85 ed             	test   %r13d,%r13d
    3d93:	0f 88 81 01 00 00    	js     3f1a <init_meta_cowbtree+0x48a>
		ret = dm_bm_read_lock(meta_bm, METADATA_SUPERBLOCK_LOCATION,
    3d99:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
    3d9d:	31 d2                	xor    %edx,%edx
    3d9f:	31 f6                	xor    %esi,%esi
		md->meta_bm = meta_bm;
    3da1:	4c 89 23             	mov    %r12,(%rbx)
		ret = dm_bm_read_lock(meta_bm, METADATA_SUPERBLOCK_LOCATION,
    3da4:	4c 89 e7             	mov    %r12,%rdi
    3da7:	e8 00 00 00 00       	callq  3dac <init_meta_cowbtree+0x31c>
		if (ret < 0) {
    3dac:	85 c0                	test   %eax,%eax
    3dae:	0f 88 55 01 00 00    	js     3f09 <init_meta_cowbtree+0x479>
		disk_super = dm_block_data(sblock);
    3db4:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    3db8:	e8 00 00 00 00       	callq  3dbd <init_meta_cowbtree+0x32d>
		ret = dm_tm_open_with_sm(meta_bm, METADATA_SUPERBLOCK_LOCATION,
    3dbd:	4c 8d 4b 18          	lea    0x18(%rbx),%r9
					 disk_super->metadata_space_map_root,
    3dc1:	48 8d 50 2d          	lea    0x2d(%rax),%rdx
		ret = dm_tm_open_with_sm(meta_bm, METADATA_SUPERBLOCK_LOCATION,
    3dc5:	4c 8d 43 08          	lea    0x8(%rbx),%r8
    3dc9:	31 f6                	xor    %esi,%esi
    3dcb:	b9 80 00 00 00       	mov    $0x80,%ecx
    3dd0:	4c 89 e7             	mov    %r12,%rdi
		disk_super = dm_block_data(sblock);
    3dd3:	49 89 c5             	mov    %rax,%r13
		ret = dm_tm_open_with_sm(meta_bm, METADATA_SUPERBLOCK_LOCATION,
    3dd6:	e8 00 00 00 00       	callq  3ddb <init_meta_cowbtree+0x34b>
		if (ret < 0) {
    3ddb:	85 c0                	test   %eax,%eax
    3ddd:	0f 88 15 01 00 00    	js     3ef8 <init_meta_cowbtree+0x468>
		md->data_sm = dm_sm_disk_open(md->tm,
    3de3:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
					      disk_super->data_space_map_root,
    3de7:	49 8d b5 ad 00 00 00 	lea    0xad(%r13),%rsi
		md->data_sm = dm_sm_disk_open(md->tm,
    3dee:	ba 80 00 00 00       	mov    $0x80,%edx
    3df3:	e8 00 00 00 00       	callq  3df8 <init_meta_cowbtree+0x368>
		if (IS_ERR(md->data_sm)) {
    3df8:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
		md->data_sm = dm_sm_disk_open(md->tm,
    3dfe:	48 89 43 10          	mov    %rax,0x10(%rbx)
		if (IS_ERR(md->data_sm)) {
    3e02:	0f 87 df 00 00 00    	ja     3ee7 <init_meta_cowbtree+0x457>
		dm_bm_unlock(sblock);
    3e08:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
	struct dm_space_map *data_sm = NULL;
    3e0c:	45 31 ed             	xor    %r13d,%r13d
		dm_bm_unlock(sblock);
    3e0f:	e8 00 00 00 00       	callq  3e14 <init_meta_cowbtree+0x384>
    3e14:	e9 26 ff ff ff       	jmpq   3d3f <init_meta_cowbtree+0x2af>
	disk_super = dm_block_data(sblock);
    3e19:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    3e1d:	e8 00 00 00 00       	callq  3e22 <init_meta_cowbtree+0x392>
	csum_le = cpu_to_le32(dm_bm_checksum(&disk_super->flags,
    3e22:	48 8d 78 10          	lea    0x10(%rax),%rdi
	disk_super = dm_block_data(sblock);
    3e26:	49 89 c6             	mov    %rax,%r14
	csum_le = cpu_to_le32(dm_bm_checksum(&disk_super->flags,
    3e29:	ba 87 e4 02 00       	mov    $0x2e487,%edx
    3e2e:	be 59 01 00 00       	mov    $0x159,%esi
    3e33:	e8 00 00 00 00       	callq  3e38 <init_meta_cowbtree+0x3a8>
	if (csum_le != disk_super->csum) {
    3e38:	41 3b 06             	cmp    (%r14),%eax
    3e3b:	0f 85 94 00 00 00    	jne    3ed5 <init_meta_cowbtree+0x445>
	if (le64_to_cpu(disk_super->magic) != DM_DEDUP_MAGIC) {
    3e41:	49 81 7e 04 70 75 44 	cmpq   $0x44447570,0x4(%r14)
    3e48:	44 
    3e49:	75 78                	jne    3ec3 <init_meta_cowbtree+0x433>
	if (disk_super->version != DM_DEDUP_VERSION) {
    3e4b:	41 83 7e 0c 01       	cmpl   $0x1,0xc(%r14)
    3e50:	75 5f                	jne    3eb1 <init_meta_cowbtree+0x421>
	if (le32_to_cpu(disk_super->data_block_size) != METADATA_BSIZE) {
    3e52:	41 81 be 3d 01 00 00 	cmpl   $0x1000,0x13d(%r14)
    3e59:	00 10 00 00 
    3e5d:	75 40                	jne    3e9f <init_meta_cowbtree+0x40f>
	if (le32_to_cpu(disk_super->metadata_block_size) != METADATA_BSIZE) {
    3e5f:	41 81 be 41 01 00 00 	cmpl   $0x1000,0x141(%r14)
    3e66:	00 10 00 00 
    3e6a:	75 21                	jne    3e8d <init_meta_cowbtree+0x3fd>
	if (!(disk_super->flags & (1 << CLEAN_SHUTDOWN)))
    3e6c:	41 f6 46 10 01       	testb  $0x1,0x10(%r14)
    3e71:	75 0c                	jne    3e7f <init_meta_cowbtree+0x3ef>
		DMWARN("Possible data Inconsistency. Run dmdedup_corruption_check tool");
    3e73:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    3e7a:	e8 00 00 00 00       	callq  3e7f <init_meta_cowbtree+0x3ef>
	dm_bm_unlock(sblock);
    3e7f:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    3e83:	e8 00 00 00 00       	callq  3e88 <init_meta_cowbtree+0x3f8>
    3e88:	e9 03 ff ff ff       	jmpq   3d90 <init_meta_cowbtree+0x300>
		DMERR("Metadata block size mismatch");
    3e8d:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	r = -1;
    3e94:	41 83 cd ff          	or     $0xffffffff,%r13d
		DMERR("Metadata block size mismatch");
    3e98:	e8 00 00 00 00       	callq  3e9d <init_meta_cowbtree+0x40d>
    3e9d:	eb e0                	jmp    3e7f <init_meta_cowbtree+0x3ef>
		DMERR("Data block size mismatch");
    3e9f:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	r = -1;
    3ea6:	41 83 cd ff          	or     $0xffffffff,%r13d
		DMERR("Data block size mismatch");
    3eaa:	e8 00 00 00 00       	callq  3eaf <init_meta_cowbtree+0x41f>
    3eaf:	eb ce                	jmp    3e7f <init_meta_cowbtree+0x3ef>
		DMERR("Version number mismatch");
    3eb1:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	r = -1;
    3eb8:	41 83 cd ff          	or     $0xffffffff,%r13d
		DMERR("Version number mismatch");
    3ebc:	e8 00 00 00 00       	callq  3ec1 <init_meta_cowbtree+0x431>
    3ec1:	eb bc                	jmp    3e7f <init_meta_cowbtree+0x3ef>
		DMERR("Magic number mismatch");
    3ec3:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	r = -1;
    3eca:	41 83 cd ff          	or     $0xffffffff,%r13d
		DMERR("Magic number mismatch");
    3ece:	e8 00 00 00 00       	callq  3ed3 <init_meta_cowbtree+0x443>
    3ed3:	eb aa                	jmp    3e7f <init_meta_cowbtree+0x3ef>
		DMERR("Superblock checksum verification failed");
    3ed5:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	r = -1;
    3edc:	41 83 cd ff          	or     $0xffffffff,%r13d
		DMERR("Superblock checksum verification failed");
    3ee0:	e8 00 00 00 00       	callq  3ee5 <init_meta_cowbtree+0x455>
    3ee5:	eb 98                	jmp    3e7f <init_meta_cowbtree+0x3ef>
			DMERR("dm_disk_open failed");
    3ee7:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    3eee:	e8 00 00 00 00       	callq  3ef3 <init_meta_cowbtree+0x463>
    3ef3:	e9 10 ff ff ff       	jmpq   3e08 <init_meta_cowbtree+0x378>
			DMERR("could not open_with_sm superblock");
    3ef8:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    3eff:	e8 00 00 00 00       	callq  3f04 <init_meta_cowbtree+0x474>
    3f04:	e9 da fe ff ff       	jmpq   3de3 <init_meta_cowbtree+0x353>
			DMERR("could not read_lock superblock");
    3f09:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    3f10:	e8 00 00 00 00       	callq  3f15 <init_meta_cowbtree+0x485>
    3f15:	e9 9a fe ff ff       	jmpq   3db4 <init_meta_cowbtree+0x324>
			DMERR("superblock verification failed");
    3f1a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    3f21:	e8 00 00 00 00       	callq  3f26 <init_meta_cowbtree+0x496>
    3f26:	e9 6e fe ff ff       	jmpq   3d99 <init_meta_cowbtree+0x309>
    3f2b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003f30 <is_deleted_entry>:
{
    3f30:	e8 00 00 00 00       	callq  3f35 <is_deleted_entry+0x5>
    3f35:	55                   	push   %rbp
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    3f36:	85 f6                	test   %esi,%esi
{
    3f38:	48 89 e5             	mov    %rsp,%rbp
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    3f3b:	74 22                	je     3f5f <is_deleted_entry+0x2f>
    3f3d:	80 3f 6b             	cmpb   $0x6b,(%rdi)
    3f40:	75 1d                	jne    3f5f <is_deleted_entry+0x2f>
	int i = 0;
    3f42:	31 c0                	xor    %eax,%eax
    3f44:	eb 09                	jmp    3f4f <is_deleted_entry+0x1f>
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    3f46:	48 63 d0             	movslq %eax,%rdx
    3f49:	80 3c 17 6b          	cmpb   $0x6b,(%rdi,%rdx,1)
    3f4d:	75 09                	jne    3f58 <is_deleted_entry+0x28>
		i++;
    3f4f:	83 c0 01             	add    $0x1,%eax
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    3f52:	39 f0                	cmp    %esi,%eax
    3f54:	89 c1                	mov    %eax,%ecx
    3f56:	75 ee                	jne    3f46 <is_deleted_entry+0x16>
	return i == length;
    3f58:	39 ce                	cmp    %ecx,%esi
    3f5a:	0f 94 c0             	sete   %al
}
    3f5d:	5d                   	pop    %rbp
    3f5e:	c3                   	retq   
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    3f5f:	31 c9                	xor    %ecx,%ecx
	return i == length;
    3f61:	39 ce                	cmp    %ecx,%esi
    3f63:	0f 94 c0             	sete   %al
}
    3f66:	5d                   	pop    %rbp
    3f67:	c3                   	retq   
    3f68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    3f6f:	00 

0000000000003f70 <slot_to_desc.part.2>:
 * of critical path.
 *
 * Returns NULL on failure.
 * Returns valid pointer on success.
 */
static struct shash_desc *slot_to_desc(struct hash_desc_table *desc_table,
    3f70:	e8 00 00 00 00       	callq  3f75 <slot_to_desc.part.2+0x5>
    3f75:	55                   	push   %rbp
    3f76:	48 89 e5             	mov    %rsp,%rbp
    3f79:	0f 0b                	ud2    
    3f7b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000003f80 <put_slot>:
	return num;
}

/* Marks the slot free in bitmap. */
static void put_slot(struct hash_desc_table *desc_table, unsigned long slot)
{
    3f80:	e8 00 00 00 00       	callq  3f85 <put_slot+0x5>
    3f85:	55                   	push   %rbp
	BUG_ON(slot >= DEDUP_HASH_DESC_COUNT);
    3f86:	48 83 fe 7f          	cmp    $0x7f,%rsi
{
    3f8a:	48 89 e5             	mov    %rsp,%rbp
	BUG_ON(slot >= DEDUP_HASH_DESC_COUNT);
    3f8d:	77 14                	ja     3fa3 <put_slot+0x23>
	BUG_ON(desc_table->free_bitmap[slot]);
    3f8f:	80 bc 37 00 04 00 00 	cmpb   $0x0,0x400(%rdi,%rsi,1)
    3f96:	00 
    3f97:	75 0c                	jne    3fa5 <put_slot+0x25>
	desc_table->free_bitmap[slot] = true;
    3f99:	c6 84 37 00 04 00 00 	movb   $0x1,0x400(%rdi,%rsi,1)
    3fa0:	01 
}
    3fa1:	5d                   	pop    %rbp
    3fa2:	c3                   	retq   
    3fa3:	0f 0b                	ud2    
	BUG_ON(slot >= DEDUP_HASH_DESC_COUNT);
    3fa5:	0f 0b                	ud2    
    3fa7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    3fae:	00 00 

0000000000003fb0 <desc_table_init>:
{
    3fb0:	e8 00 00 00 00       	callq  3fb5 <desc_table_init+0x5>
    3fb5:	55                   	push   %rbp
    3fb6:	ba 88 04 00 00       	mov    $0x488,%edx
    3fbb:	be 00 00 60 00       	mov    $0x600000,%esi
    3fc0:	48 89 e5             	mov    %rsp,%rbp
    3fc3:	41 57                	push   %r15
    3fc5:	49 89 ff             	mov    %rdi,%r15
    3fc8:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 3fcf <desc_table_init+0x1f>
    3fcf:	41 56                	push   %r14
    3fd1:	41 55                	push   %r13
    3fd3:	41 54                	push   %r12
		return ERR_PTR(-ENOMEM);
    3fd5:	49 c7 c5 f4 ff ff ff 	mov    $0xfffffffffffffff4,%r13
{
    3fdc:	53                   	push   %rbx
    3fdd:	e8 00 00 00 00       	callq  3fe2 <desc_table_init+0x32>
	if (!desc_table)
    3fe2:	48 85 c0             	test   %rax,%rax
    3fe5:	0f 84 85 00 00 00    	je     4070 <desc_table_init+0xc0>
    3feb:	49 89 c6             	mov    %rax,%r14
    3fee:	31 db                	xor    %ebx,%ebx
    3ff0:	eb 29                	jmp    401b <desc_table_init+0x6b>
                                             + crypto_shash_descsize(item),
    3ff2:	8b 38                	mov    (%rax),%edi
	return __kmalloc(size, flags);
    3ff4:	be 00 00 60 00       	mov    $0x600000,%esi
               desc_table->desc[i] = kmalloc(sizeof(struct shash_desc)
    3ff9:	48 83 c7 10          	add    $0x10,%rdi
    3ffd:	e8 00 00 00 00       	callq  4002 <desc_table_init+0x52>
               if (!desc_table->desc[i]) {
    4002:	48 85 c0             	test   %rax,%rax
               desc_table->desc[i] = kmalloc(sizeof(struct shash_desc)
    4005:	49 89 04 de          	mov    %rax,(%r14,%rbx,8)
               if (!desc_table->desc[i]) {
    4009:	74 73                	je     407e <desc_table_init+0xce>
    400b:	48 83 c3 01          	add    $0x1,%rbx
               desc_table->desc[i]->tfm = item;
    400f:	4c 89 28             	mov    %r13,(%rax)
	for (i = 0; i < DEDUP_HASH_DESC_COUNT; i++) {
    4012:	48 81 fb 80 00 00 00 	cmp    $0x80,%rbx
    4019:	74 7b                	je     4096 <desc_table_init+0xe6>
               item = crypto_alloc_shash(hash_alg, 0, 0);
    401b:	31 d2                	xor    %edx,%edx
    401d:	31 f6                	xor    %esi,%esi
		desc_table->free_bitmap[i] = true;
    401f:	41 c6 84 1e 00 04 00 	movb   $0x1,0x400(%r14,%rbx,1)
    4026:	00 01 
               item = crypto_alloc_shash(hash_alg, 0, 0);
    4028:	4c 89 ff             	mov    %r15,%rdi
    402b:	e8 00 00 00 00       	callq  4030 <desc_table_init+0x80>
               if (IS_ERR(item)) {
    4030:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
               item = crypto_alloc_shash(hash_alg, 0, 0);
    4036:	49 89 c5             	mov    %rax,%r13
               if (IS_ERR(item)) {
    4039:	76 b7                	jbe    3ff2 <desc_table_init+0x42>
                       i--;
    403b:	8d 5b ff             	lea    -0x1(%rbx),%ebx
                       goto error;
    403e:	eb 23                	jmp    4063 <desc_table_init+0xb3>
    4040:	48 63 c3             	movslq %ebx,%rax
       for ( ; i >= 0; i--) {
    4043:	83 eb 01             	sub    $0x1,%ebx
    4046:	4d 8d 24 c6          	lea    (%r14,%rax,8),%r12
               crypto_free_shash(desc_table->desc[i]->tfm);
    404a:	49 8b 04 24          	mov    (%r12),%rax
    404e:	48 8b 38             	mov    (%rax),%rdi
struct crypto_shash *crypto_alloc_shash(const char *alg_name, u32 type,
					u32 mask);

static inline struct crypto_tfm *crypto_shash_tfm(struct crypto_shash *tfm)
{
	return &tfm->base;
    4051:	48 8d 77 08          	lea    0x8(%rdi),%rsi
 * crypto_free_shash() - zeroize and free the message digest handle
 * @tfm: cipher handle to be freed
 */
static inline void crypto_free_shash(struct crypto_shash *tfm)
{
	crypto_destroy_tfm(tfm, crypto_shash_tfm(tfm));
    4055:	e8 00 00 00 00       	callq  405a <desc_table_init+0xaa>
               kfree(desc_table->desc[i]);
    405a:	49 8b 3c 24          	mov    (%r12),%rdi
    405e:	e8 00 00 00 00       	callq  4063 <desc_table_init+0xb3>
       for ( ; i >= 0; i--) {
    4063:	83 fb ff             	cmp    $0xffffffff,%ebx
    4066:	75 d8                	jne    4040 <desc_table_init+0x90>
       kfree(desc_table);
    4068:	4c 89 f7             	mov    %r14,%rdi
    406b:	e8 00 00 00 00       	callq  4070 <desc_table_init+0xc0>
}
    4070:	5b                   	pop    %rbx
    4071:	4c 89 e8             	mov    %r13,%rax
    4074:	41 5c                	pop    %r12
    4076:	41 5d                	pop    %r13
    4078:	41 5e                	pop    %r14
    407a:	41 5f                	pop    %r15
    407c:	5d                   	pop    %rbp
    407d:	c3                   	retq   
	return &tfm->base;
    407e:	49 8d 75 08          	lea    0x8(%r13),%rsi
	crypto_destroy_tfm(tfm, crypto_shash_tfm(tfm));
    4082:	4c 89 ef             	mov    %r13,%rdi
                       i--;
    4085:	8d 5b ff             	lea    -0x1(%rbx),%ebx
                       out = ERR_PTR(-ENOMEM);
    4088:	49 c7 c5 f4 ff ff ff 	mov    $0xfffffffffffffff4,%r13
    408f:	e8 00 00 00 00       	callq  4094 <desc_table_init+0xe4>
                       goto error;
    4094:	eb cd                	jmp    4063 <desc_table_init+0xb3>
{
	switch (size) {
	case 1: *(volatile __u8 *)p = *(__u8 *)res; break;
	case 2: *(volatile __u16 *)p = *(__u16 *)res; break;
	case 4: *(volatile __u32 *)p = *(__u32 *)res; break;
	case 8: *(volatile __u64 *)p = *(__u64 *)res; break;
    4096:	49 c7 86 80 04 00 00 	movq   $0x0,0x480(%r14)
    409d:	00 00 00 00 
	return desc_table;
    40a1:	4d 89 f5             	mov    %r14,%r13
    40a4:	eb ca                	jmp    4070 <desc_table_init+0xc0>
    40a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    40ad:	00 00 00 

00000000000040b0 <desc_table_deinit>:
{
    40b0:	e8 00 00 00 00       	callq  40b5 <desc_table_deinit+0x5>
    40b5:	55                   	push   %rbp
    40b6:	48 89 e5             	mov    %rsp,%rbp
    40b9:	41 55                	push   %r13
    40bb:	41 54                	push   %r12
    40bd:	4c 8d a7 00 04 00 00 	lea    0x400(%rdi),%r12
    40c4:	53                   	push   %rbx
    40c5:	49 89 fd             	mov    %rdi,%r13
    40c8:	48 89 fb             	mov    %rdi,%rbx
               crypto_free_shash(desc_table->desc[i]->tfm);
    40cb:	48 8b 03             	mov    (%rbx),%rax
    40ce:	48 83 c3 08          	add    $0x8,%rbx
    40d2:	48 8b 38             	mov    (%rax),%rdi
	return &tfm->base;
    40d5:	48 8d 77 08          	lea    0x8(%rdi),%rsi
	crypto_destroy_tfm(tfm, crypto_shash_tfm(tfm));
    40d9:	e8 00 00 00 00       	callq  40de <desc_table_deinit+0x2e>
               kfree(desc_table->desc[i]);
    40de:	48 8b 7b f8          	mov    -0x8(%rbx),%rdi
    40e2:	e8 00 00 00 00       	callq  40e7 <desc_table_deinit+0x37>
	for (i = 0; i < DEDUP_HASH_DESC_COUNT; i++) {
    40e7:	4c 39 e3             	cmp    %r12,%rbx
    40ea:	75 df                	jne    40cb <desc_table_deinit+0x1b>
	kfree(desc_table);
    40ec:	4c 89 ef             	mov    %r13,%rdi
    40ef:	e8 00 00 00 00       	callq  40f4 <desc_table_deinit+0x44>
}
    40f4:	5b                   	pop    %rbx
    40f5:	41 5c                	pop    %r12
    40f7:	41 5d                	pop    %r13
    40f9:	5d                   	pop    %rbp
    40fa:	c3                   	retq   
    40fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000004100 <get_hash_digestsize>:

/* It returns size of message digest cipher. */
unsigned int get_hash_digestsize(struct hash_desc_table *desc_table)
{
    4100:	e8 00 00 00 00       	callq  4105 <get_hash_digestsize+0x5>
    4105:	55                   	push   %rbp
    4106:	48 8d 87 80 04 00 00 	lea    0x480(%rdi),%rax
    410d:	ba 80 00 00 00       	mov    $0x80,%edx
 *
 * Atomically adds @i to @v and returns @i + @v
 */
static __always_inline long arch_atomic64_add_return(long i, atomic64_t *v)
{
	return i + xadd(&v->counter, i);
    4112:	b9 01 00 00 00       	mov    $0x1,%ecx
    4117:	48 89 e5             	mov    %rsp,%rbp
    411a:	53                   	push   %rbx
    411b:	eb 05                	jmp    4122 <get_hash_digestsize+0x22>
		if (count == DEDUP_HASH_DESC_COUNT)
    411d:	83 ea 01             	sub    $0x1,%edx
    4120:	74 39                	je     415b <get_hash_digestsize+0x5b>
    4122:	48 89 ce             	mov    %rcx,%rsi
    4125:	f0 48 0f c1 30       	lock xadd %rsi,(%rax)
    412a:	48 83 c6 01          	add    $0x1,%rsi
		num = num % DEDUP_HASH_DESC_COUNT;
    412e:	83 e6 7f             	and    $0x7f,%esi
	} while (!desc_table->free_bitmap[num]);
    4131:	80 bc 37 00 04 00 00 	cmpb   $0x0,0x400(%rdi,%rsi,1)
    4138:	00 
    4139:	74 e2                	je     411d <get_hash_digestsize+0x1d>
	desc_table->free_bitmap[num] = false;
    413b:	c6 84 37 00 04 00 00 	movb   $0x0,0x400(%rdi,%rsi,1)
    4142:	00 
       unsigned int ret;

	slot = get_next_slot(desc_table);
	desc = slot_to_desc(desc_table, slot);

       ret = crypto_shash_digestsize(desc->tfm);
    4143:	48 8b 04 f7          	mov    (%rdi,%rsi,8),%rax
	return container_of(alg, struct shash_alg, base);
}

static inline struct shash_alg *crypto_shash_alg(struct crypto_shash *tfm)
{
	return __crypto_shash_alg(crypto_shash_tfm(tfm)->__crt_alg);
    4147:	48 8b 00             	mov    (%rax),%rax
 *
 * Return: digest size of cipher
 */
static inline unsigned int crypto_shash_digestsize(struct crypto_shash *tfm)
{
	return crypto_shash_alg(tfm)->digestsize;
    414a:	48 8b 40 40          	mov    0x40(%rax),%rax
    414e:	8b 58 f8             	mov    -0x8(%rax),%ebx
       put_slot(desc_table, slot);
    4151:	e8 2a fe ff ff       	callq  3f80 <put_slot>
       return ret;
}
    4156:	89 d8                	mov    %ebx,%eax
    4158:	5b                   	pop    %rbx
    4159:	5d                   	pop    %rbp
    415a:	c3                   	retq   
    415b:	e8 10 fe ff ff       	callq  3f70 <slot_to_desc.part.2>

0000000000004160 <compute_hash_bio>:
 * Returns -ERR code on failure.
 * Returns 0 on success.
 */
int compute_hash_bio(struct hash_desc_table *desc_table,
		     struct bio *bio, char *hash)
{
    4160:	e8 00 00 00 00       	callq  4165 <compute_hash_bio+0x5>
    4165:	55                   	push   %rbp
    4166:	49 89 f3             	mov    %rsi,%r11
    4169:	48 8d 87 80 04 00 00 	lea    0x480(%rdi),%rax
    4170:	b9 01 00 00 00       	mov    $0x1,%ecx
    4175:	48 89 e5             	mov    %rsp,%rbp
    4178:	41 57                	push   %r15
    417a:	41 56                	push   %r14
    417c:	41 55                	push   %r13
    417e:	41 54                	push   %r12
    4180:	49 89 ff             	mov    %rdi,%r15
    4183:	53                   	push   %rbx
    4184:	48 83 ec 30          	sub    $0x30,%rsp
    4188:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
    418c:	ba 80 00 00 00       	mov    $0x80,%edx
    4191:	eb 09                	jmp    419c <compute_hash_bio+0x3c>
		if (count == DEDUP_HASH_DESC_COUNT)
    4193:	83 ea 01             	sub    $0x1,%edx
    4196:	0f 84 78 01 00 00    	je     4314 <compute_hash_bio+0x1b4>
    419c:	48 89 cb             	mov    %rcx,%rbx
    419f:	f0 48 0f c1 18       	lock xadd %rbx,(%rax)
    41a4:	48 83 c3 01          	add    $0x1,%rbx
		num = num % DEDUP_HASH_DESC_COUNT;
    41a8:	83 e3 7f             	and    $0x7f,%ebx
	} while (!desc_table->free_bitmap[num]);
    41ab:	41 80 bc 1f 00 04 00 	cmpb   $0x0,0x400(%r15,%rbx,1)
    41b2:	00 00 
    41b4:	74 dd                	je     4193 <compute_hash_bio+0x33>
	desc_table->free_bitmap[num] = false;
    41b6:	41 c6 84 1f 00 04 00 	movb   $0x0,0x400(%r15,%rbx,1)
    41bd:	00 00 
       return desc_table->desc[slot];
    41bf:	49 8b 3c df          	mov    (%r15,%rbx,8),%rdi
    41c3:	4c 89 5d d0          	mov    %r11,-0x30(%rbp)
 * Return: 0 if the message digest initialization was successful; < 0 if an
 *	   error occurred
 */
static inline int crypto_shash_init(struct shash_desc *desc)
{
	struct crypto_shash *tfm = desc->tfm;
    41c7:	48 8b 07             	mov    (%rdi),%rax
    41ca:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)

	if (crypto_shash_get_flags(tfm) & CRYPTO_TFM_NEED_KEY)
    41ce:	f6 40 08 01          	testb  $0x1,0x8(%rax)
    41d2:	0f 85 69 01 00 00    	jne    4341 <compute_hash_bio+0x1e1>
		return -ENOKEY;

	return crypto_shash_alg(tfm)->init(desc);
    41d8:	48 8b 40 40          	mov    0x40(%rax),%rax
    41dc:	48 8b 40 b0          	mov    -0x50(%rax),%rax
    41e0:	e8 00 00 00 00       	callq  41e5 <compute_hash_bio+0x85>

	slot = get_next_slot(desc_table);
	desc = slot_to_desc(desc_table, slot);

       ret = crypto_shash_init(desc);
	if (ret)
    41e5:	85 c0                	test   %eax,%eax
    41e7:	89 45 c4             	mov    %eax,-0x3c(%rbp)
    41ea:	0f 85 f0 00 00 00    	jne    42e0 <compute_hash_bio+0x180>
		goto out;
	__bio_for_each_segment(bvec, bio, iter, bio->bi_iter) {
    41f0:	4c 8b 5d d0          	mov    -0x30(%rbp),%r11
	return false;
}

static inline bool bio_no_advance_iter(struct bio *bio)
{
	return bio_op(bio) == REQ_OP_DISCARD ||
    41f4:	48 89 5d b0          	mov    %rbx,-0x50(%rbp)
    41f8:	4c 89 7d a8          	mov    %r15,-0x58(%rbp)
    41fc:	45 8b 53 48          	mov    0x48(%r11),%r10d
    4200:	45 8b 6b 44          	mov    0x44(%r11),%r13d
    4204:	4d 89 df             	mov    %r11,%r15
    4207:	45 8b 73 50          	mov    0x50(%r11),%r14d
    420b:	44 89 d3             	mov    %r10d,%ebx
    420e:	45 85 ed             	test   %r13d,%r13d
    4211:	0f 84 b4 00 00 00    	je     42cb <compute_hash_bio+0x16b>
    4217:	89 d9                	mov    %ebx,%ecx
	   crypto_shash_update(desc,
	   page_address(bvec.bv_page)+bvec.bv_offset,
    4219:	44 89 f7             	mov    %r14d,%edi
	__bio_for_each_segment(bvec, bio, iter, bio->bi_iter) {
    421c:	48 89 c8             	mov    %rcx,%rax
    421f:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    4223:	48 c1 e0 04          	shl    $0x4,%rax
    4227:	49 03 87 a0 00 00 00 	add    0xa0(%r15),%rax
    422e:	44 8b 60 08          	mov    0x8(%rax),%r12d
 */
#include <linux/vmstat.h>

static __always_inline void *lowmem_page_address(const struct page *page)
{
	return page_to_virt(page);
    4232:	48 8b 30             	mov    (%rax),%rsi
    4235:	45 29 f4             	sub    %r14d,%r12d
    4238:	45 39 ec             	cmp    %r13d,%r12d
    423b:	45 0f 47 e5          	cmova  %r13d,%r12d
    423f:	48 2b 35 00 00 00 00 	sub    0x0(%rip),%rsi        # 4246 <compute_hash_bio+0xe6>
	   page_address(bvec.bv_page)+bvec.bv_offset,
    4246:	03 78 0c             	add    0xc(%rax),%edi
	   crypto_shash_update(desc,
    4249:	44 89 e2             	mov    %r12d,%edx
    424c:	48 c1 fe 06          	sar    $0x6,%rsi
    4250:	48 c1 e6 0c          	shl    $0xc,%rsi
    4254:	48 03 35 00 00 00 00 	add    0x0(%rip),%rsi        # 425b <compute_hash_bio+0xfb>
	   page_address(bvec.bv_page)+bvec.bv_offset,
    425b:	48 01 fe             	add    %rdi,%rsi
	   crypto_shash_update(desc,
    425e:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    4262:	e8 00 00 00 00       	callq  4267 <compute_hash_bio+0x107>
    4267:	41 0f b6 47 10       	movzbl 0x10(%r15),%eax
    426c:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    4270:	83 f8 0a             	cmp    $0xa,%eax
    4273:	0f 86 84 00 00 00    	jbe    42fd <compute_hash_bio+0x19d>
})

static inline bool bvec_iter_advance(const struct bio_vec *bv,
		struct bvec_iter *iter, unsigned bytes)
{
	if (WARN_ONCE(bytes > iter->bi_size,
    4279:	45 39 ec             	cmp    %r13d,%r12d
    427c:	0f 87 97 00 00 00    	ja     4319 <compute_hash_bio+0x1b9>
		     "Attempted to advance past end of bvec iter\n")) {
		iter->bi_size = 0;
		return false;
	}

	while (bytes) {
    4282:	45 85 e4             	test   %r12d,%r12d
    4285:	74 87                	je     420e <compute_hash_bio+0xae>

	if (bio_no_advance_iter(bio)) {
		iter->bi_size -= bytes;
		iter->bi_done += bytes;
	} else {
		bvec_iter_advance(bio->bi_io_vec, iter, bytes);
    4287:	49 8b b7 a0 00 00 00 	mov    0xa0(%r15),%rsi
		unsigned iter_len = bvec_iter_len(bv, *iter);
    428e:	48 c1 e1 04          	shl    $0x4,%rcx
    4292:	8b 54 0e 08          	mov    0x8(%rsi,%rcx,1),%edx
		unsigned len = min(bytes, iter_len);
    4296:	44 89 e1             	mov    %r12d,%ecx
		unsigned iter_len = bvec_iter_len(bv, *iter);
    4299:	89 d0                	mov    %edx,%eax
    429b:	44 29 f0             	sub    %r14d,%eax
		unsigned len = min(bytes, iter_len);
    429e:	45 39 e5             	cmp    %r12d,%r13d
    42a1:	41 0f 46 cd          	cmovbe %r13d,%ecx
    42a5:	39 c8                	cmp    %ecx,%eax
    42a7:	0f 47 c1             	cmova  %ecx,%eax

		bytes -= len;
		iter->bi_size -= len;
		iter->bi_bvec_done += len;
    42aa:	41 01 c6             	add    %eax,%r14d
		bytes -= len;
    42ad:	41 29 c4             	sub    %eax,%r12d
		iter->bi_size -= len;
    42b0:	41 29 c5             	sub    %eax,%r13d
		iter->bi_done += len;

		if (iter->bi_bvec_done == __bvec_iter_bvec(bv, *iter)->bv_len) {
    42b3:	44 39 f2             	cmp    %r14d,%edx
    42b6:	75 06                	jne    42be <compute_hash_bio+0x15e>
			iter->bi_bvec_done = 0;
			iter->bi_idx++;
    42b8:	83 c3 01             	add    $0x1,%ebx
			iter->bi_bvec_done = 0;
    42bb:	45 31 f6             	xor    %r14d,%r14d
	while (bytes) {
    42be:	45 85 e4             	test   %r12d,%r12d
    42c1:	0f 84 47 ff ff ff    	je     420e <compute_hash_bio+0xae>
    42c7:	89 d9                	mov    %ebx,%ecx
    42c9:	eb c3                	jmp    428e <compute_hash_bio+0x12e>
    42cb:	48 8b 5d b0          	mov    -0x50(%rbp),%rbx
    42cf:	4c 8b 7d a8          	mov    -0x58(%rbp),%r15
	   bvec.bv_len);
	}
    crypto_shash_final(desc, hash);
    42d3:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
    42d7:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
    42db:	e8 00 00 00 00       	callq  42e0 <compute_hash_bio+0x180>

out:
	put_slot(desc_table, slot);
    42e0:	48 89 de             	mov    %rbx,%rsi
    42e3:	4c 89 ff             	mov    %r15,%rdi
    42e6:	e8 95 fc ff ff       	callq  3f80 <put_slot>
	return ret;
}
    42eb:	8b 45 c4             	mov    -0x3c(%rbp),%eax
    42ee:	48 83 c4 30          	add    $0x30,%rsp
    42f2:	5b                   	pop    %rbx
    42f3:	41 5c                	pop    %r12
    42f5:	41 5d                	pop    %r13
    42f7:	41 5e                	pop    %r14
    42f9:	41 5f                	pop    %r15
    42fb:	5d                   	pop    %rbp
    42fc:	c3                   	retq   
	       bio_op(bio) == REQ_OP_WRITE_SAME ||
    42fd:	bf a8 06 00 00       	mov    $0x6a8,%edi
    4302:	48 0f a3 c7          	bt     %rax,%rdi
    4306:	0f 83 6d ff ff ff    	jae    4279 <compute_hash_bio+0x119>
		iter->bi_size -= bytes;
    430c:	45 29 e5             	sub    %r12d,%r13d
    430f:	e9 fa fe ff ff       	jmpq   420e <compute_hash_bio+0xae>
    4314:	e8 57 fc ff ff       	callq  3f70 <slot_to_desc.part.2>
	if (WARN_ONCE(bytes > iter->bi_size,
    4319:	80 3d 00 00 00 00 00 	cmpb   $0x0,0x0(%rip)        # 4320 <compute_hash_bio+0x1c0>
    4320:	48 8b 5d b0          	mov    -0x50(%rbp),%rbx
    4324:	4c 8b 7d a8          	mov    -0x58(%rbp),%r15
    4328:	75 a9                	jne    42d3 <compute_hash_bio+0x173>
    432a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    4331:	c6 05 00 00 00 00 01 	movb   $0x1,0x0(%rip)        # 4338 <compute_hash_bio+0x1d8>
    4338:	e8 00 00 00 00       	callq  433d <compute_hash_bio+0x1dd>
    433d:	0f 0b                	ud2    
    433f:	eb 92                	jmp    42d3 <compute_hash_bio+0x173>
		return -ENOKEY;
    4341:	c7 45 c4 82 ff ff ff 	movl   $0xffffff82,-0x3c(%rbp)
    4348:	eb 96                	jmp    42e0 <compute_hash_bio+0x180>
    434a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000004350 <flush_meta_inram>:

	kfree(md);
}

static int flush_meta_inram(struct metadata *md)
{
    4350:	e8 00 00 00 00       	callq  4355 <flush_meta_inram+0x5>
    4355:	55                   	push   %rbp
	return 0;
}
    4356:	31 c0                	xor    %eax,%eax
{
    4358:	48 89 e5             	mov    %rsp,%rbp
}
    435b:	5d                   	pop    %rbp
    435c:	c3                   	retq   
    435d:	0f 1f 00             	nopl   (%rax)

0000000000004360 <alloc_data_block_inram>:
	current_head += 1;
	return dm_sector_div64(current_head, smax);
}

static int alloc_data_block_inram(struct metadata *md, uint64_t *blockn)
{
    4360:	e8 00 00 00 00       	callq  4365 <alloc_data_block_inram+0x5>
	u64 head, tail;

	head = md->allocptr;
    4365:	4c 8b 47 10          	mov    0x10(%rdi),%r8
{
    4369:	55                   	push   %rbp
	tail = md->allocptr;

	do {
		if (!md->smap[head]) {
    436a:	4c 8b 0f             	mov    (%rdi),%r9
{
    436d:	48 89 e5             	mov    %rsp,%rbp
	head = md->allocptr;
    4370:	4c 89 c2             	mov    %r8,%rdx
    4373:	eb 0b                	jmp    4380 <alloc_data_block_inram+0x20>
    4375:	31 d2                	xor    %edx,%edx
    4377:	48 f7 77 08          	divq   0x8(%rdi)
			return 0;
		}

		head = next_head(head, md->smax);

	} while (head != tail);
    437b:	49 39 d0             	cmp    %rdx,%r8
    437e:	74 27                	je     43a7 <alloc_data_block_inram+0x47>
		if (!md->smap[head]) {
    4380:	49 8d 0c 91          	lea    (%r9,%rdx,4),%rcx
    4384:	48 8d 42 01          	lea    0x1(%rdx),%rax
    4388:	44 8b 11             	mov    (%rcx),%r10d
    438b:	45 85 d2             	test   %r10d,%r10d
    438e:	75 e5                	jne    4375 <alloc_data_block_inram+0x15>
			md->smap[head] = 1;
    4390:	c7 01 01 00 00 00    	movl   $0x1,(%rcx)
			*blockn = head;
    4396:	48 89 16             	mov    %rdx,(%rsi)
    4399:	31 d2                	xor    %edx,%edx
    439b:	48 f7 77 08          	divq   0x8(%rdi)

	return -ENOSPC;
}
    439f:	5d                   	pop    %rbp
			return 0;
    43a0:	31 c0                	xor    %eax,%eax
			md->allocptr = next_head(head, md->smax);
    43a2:	48 89 57 10          	mov    %rdx,0x10(%rdi)
}
    43a6:	c3                   	retq   
	return -ENOSPC;
    43a7:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
}
    43ac:	5d                   	pop    %rbp
    43ad:	c3                   	retq   
    43ae:	66 90                	xchg   %ax,%ax

00000000000043b0 <inc_refcount_inram>:

static int inc_refcount_inram(struct metadata *md, uint64_t blockn)
{
    43b0:	e8 00 00 00 00       	callq  43b5 <inc_refcount_inram+0x5>
	if (blockn >= md->smax)
    43b5:	48 39 77 08          	cmp    %rsi,0x8(%rdi)
{
    43b9:	55                   	push   %rbp
    43ba:	48 89 e5             	mov    %rsp,%rbp
	if (blockn >= md->smax)
    43bd:	76 17                	jbe    43d6 <inc_refcount_inram+0x26>
		return -ERANGE;

	if (md->smap[blockn] != UINT32_MAX)
    43bf:	48 8b 07             	mov    (%rdi),%rax
    43c2:	48 8d 14 b0          	lea    (%rax,%rsi,4),%rdx
    43c6:	8b 02                	mov    (%rdx),%eax
    43c8:	83 f8 ff             	cmp    $0xffffffff,%eax
    43cb:	74 10                	je     43dd <inc_refcount_inram+0x2d>
		md->smap[blockn]++;
    43cd:	83 c0 01             	add    $0x1,%eax
    43d0:	89 02                	mov    %eax,(%rdx)
	else
		return -E2BIG;

	return 0;
    43d2:	31 c0                	xor    %eax,%eax
}
    43d4:	5d                   	pop    %rbp
    43d5:	c3                   	retq   
		return -ERANGE;
    43d6:	b8 de ff ff ff       	mov    $0xffffffde,%eax
}
    43db:	5d                   	pop    %rbp
    43dc:	c3                   	retq   
		return -E2BIG;
    43dd:	b8 f9 ff ff ff       	mov    $0xfffffff9,%eax
}
    43e2:	5d                   	pop    %rbp
    43e3:	c3                   	retq   
    43e4:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    43eb:	00 00 00 00 
    43ef:	90                   	nop

00000000000043f0 <dec_refcount_inram>:

static int dec_refcount_inram(struct metadata *md, uint64_t blockn)
{
    43f0:	e8 00 00 00 00       	callq  43f5 <dec_refcount_inram+0x5>
	if (blockn >= md->smax)
    43f5:	48 39 77 08          	cmp    %rsi,0x8(%rdi)
{
    43f9:	55                   	push   %rbp
    43fa:	48 89 e5             	mov    %rsp,%rbp
	if (blockn >= md->smax)
    43fd:	76 16                	jbe    4415 <dec_refcount_inram+0x25>
		return -ERANGE;

	if (md->smap[blockn])
    43ff:	48 8b 07             	mov    (%rdi),%rax
    4402:	48 8d 14 b0          	lea    (%rax,%rsi,4),%rdx
    4406:	8b 02                	mov    (%rdx),%eax
    4408:	85 c0                	test   %eax,%eax
    440a:	74 10                	je     441c <dec_refcount_inram+0x2c>
		md->smap[blockn]--;
    440c:	83 e8 01             	sub    $0x1,%eax
    440f:	89 02                	mov    %eax,(%rdx)
	else
		return -EFAULT;

	return 0;
    4411:	31 c0                	xor    %eax,%eax
}
    4413:	5d                   	pop    %rbp
    4414:	c3                   	retq   
		return -ERANGE;
    4415:	b8 de ff ff ff       	mov    $0xffffffde,%eax
}
    441a:	5d                   	pop    %rbp
    441b:	c3                   	retq   
		return -EFAULT;
    441c:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
}
    4421:	5d                   	pop    %rbp
    4422:	c3                   	retq   
    4423:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    442a:	00 00 00 00 
    442e:	66 90                	xchg   %ax,%ax

0000000000004430 <get_refcount_inram>:

static int get_refcount_inram(struct metadata *md, uint64_t blockn)
{
    4430:	e8 00 00 00 00       	callq  4435 <get_refcount_inram+0x5>
	if (blockn >= md->smax)
    4435:	48 39 77 08          	cmp    %rsi,0x8(%rdi)
{
    4439:	55                   	push   %rbp
    443a:	48 89 e5             	mov    %rsp,%rbp
	if (blockn >= md->smax)
    443d:	76 08                	jbe    4447 <get_refcount_inram+0x17>
		return -ERANGE;

	return md->smap[blockn];
    443f:	48 8b 07             	mov    (%rdi),%rax
}
    4442:	5d                   	pop    %rbp
	return md->smap[blockn];
    4443:	8b 04 b0             	mov    (%rax,%rsi,4),%eax
}
    4446:	c3                   	retq   
		return -ERANGE;
    4447:	b8 de ff ff ff       	mov    $0xffffffde,%eax
}
    444c:	5d                   	pop    %rbp
    444d:	c3                   	retq   
    444e:	66 90                	xchg   %ax,%ax

0000000000004450 <kvs_iterate_linear_inram>:
static int kvs_iterate_linear_inram(struct kvstore *kvs,
				    int (*iteration_action)
				    (void *key, int32_t ksize,
				     void *value, int32_t vsize,
				     void *data), void *data)
{
    4450:	e8 00 00 00 00       	callq  4455 <kvs_iterate_linear_inram+0x5>
    4455:	55                   	push   %rbp
    4456:	48 89 e5             	mov    %rsp,%rbp
    4459:	41 55                	push   %r13
    445b:	41 54                	push   %r12
    445d:	53                   	push   %rbx
    445e:	48 83 ec 10          	sub    $0x10,%rsp
	int ret = 0;
	u64 i = 0;
    4462:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
    4469:	00 
{
    446a:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    4471:	00 00 
    4473:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    4477:	31 c0                	xor    %eax,%eax
	struct kvstore_inram *kvinram = NULL;
	bool ret_empty;

	kvinram = container_of(kvs, struct kvstore_inram, ckvs);

	for (i = 0; i < kvinram->kmax; i++) {
    4479:	8b 47 28             	mov    0x28(%rdi),%eax
    447c:	85 c0                	test   %eax,%eax
    447e:	74 50                	je     44d0 <kvs_iterate_linear_inram+0x80>
    4480:	48 89 f3             	mov    %rsi,%rbx
    4483:	49 89 fd             	mov    %rdi,%r13
    4486:	49 89 d4             	mov    %rdx,%r12
    4489:	31 f6                	xor    %esi,%esi
    448b:	eb 29                	jmp    44b6 <kvs_iterate_linear_inram+0x66>

		ret_empty = is_empty(ptr, kvs->vsize);

		if (!ret_empty) {
			ret = 0;
			ret = iteration_action((void *)&i, kvs->ksize,
    448d:	41 8b 75 04          	mov    0x4(%r13),%esi
    4491:	4d 89 e0             	mov    %r12,%r8
    4494:	48 8d 7d d8          	lea    -0x28(%rbp),%rdi
    4498:	e8 00 00 00 00       	callq  449d <kvs_iterate_linear_inram+0x4d>
					       (void *)ptr, kvs->vsize, data);
			if (ret < 0)
    449d:	85 c0                	test   %eax,%eax
    449f:	78 31                	js     44d2 <kvs_iterate_linear_inram+0x82>
	for (i = 0; i < kvinram->kmax; i++) {
    44a1:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
    44a5:	41 8b 55 28          	mov    0x28(%r13),%edx
    44a9:	48 8d 77 01          	lea    0x1(%rdi),%rsi
    44ad:	48 39 d6             	cmp    %rdx,%rsi
    44b0:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
    44b4:	73 1c                	jae    44d2 <kvs_iterate_linear_inram+0x82>
		ptr = kvinram->store + (i * kvs->vsize);
    44b6:	41 8b 55 00          	mov    0x0(%r13),%edx
    44ba:	48 89 d1             	mov    %rdx,%rcx
    44bd:	48 0f af d6          	imul   %rsi,%rdx
    44c1:	49 03 55 30          	add    0x30(%r13),%rdx
		if (!ret_empty) {
    44c5:	85 c9                	test   %ecx,%ecx
    44c7:	75 c4                	jne    448d <kvs_iterate_linear_inram+0x3d>
				goto out;
		} else {
			ret = 1;
    44c9:	b8 01 00 00 00       	mov    $0x1,%eax
    44ce:	eb d1                	jmp    44a1 <kvs_iterate_linear_inram+0x51>
	int ret = 0;
    44d0:	31 c0                	xor    %eax,%eax
		}
	}

out:
	return ret;
}
    44d2:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
    44d6:	65 48 33 1c 25 28 00 	xor    %gs:0x28,%rbx
    44dd:	00 00 
    44df:	75 0b                	jne    44ec <kvs_iterate_linear_inram+0x9c>
    44e1:	48 83 c4 10          	add    $0x10,%rsp
    44e5:	5b                   	pop    %rbx
    44e6:	41 5c                	pop    %r12
    44e8:	41 5d                	pop    %r13
    44ea:	5d                   	pop    %rbp
    44eb:	c3                   	retq   
    44ec:	e8 00 00 00 00       	callq  44f1 <kvs_iterate_linear_inram+0xa1>
    44f1:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    44f8:	00 00 00 00 
    44fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000004500 <kvs_iterate_sparse_inram>:
static int kvs_iterate_sparse_inram(struct kvstore *kvs,
				    int (*iteration_action)
				    (void *key, int32_t ksize,
				     void *value, int32_t vsize,
				     void *data), void *data)
{
    4500:	e8 00 00 00 00       	callq  4505 <kvs_iterate_sparse_inram+0x5>
    4505:	55                   	push   %rbp
	int err = 0;
	u32 kvalue_size, head = 0;
	char *ptr = NULL;
	struct kvstore_inram *kvinram = NULL;

	BUG_ON(!kvs);
    4506:	48 85 ff             	test   %rdi,%rdi
{
    4509:	48 89 e5             	mov    %rsp,%rbp
    450c:	41 57                	push   %r15
    450e:	41 56                	push   %r14
    4510:	41 55                	push   %r13
    4512:	41 54                	push   %r12
    4514:	53                   	push   %rbx
	BUG_ON(!kvs);
    4515:	0f 84 89 00 00 00    	je     45a4 <kvs_iterate_sparse_inram+0xa4>
    451b:	48 89 f3             	mov    %rsi,%rbx

	kvinram = container_of(kvs, struct kvstore_inram, ckvs);

	kvalue_size = kvs->vsize + kvs->ksize;
    451e:	44 8b 77 04          	mov    0x4(%rdi),%r14d
    4522:	49 89 d4             	mov    %rdx,%r12
    4525:	49 89 ff             	mov    %rdi,%r15
    4528:	44 03 37             	add    (%rdi),%r14d
	u32 kvalue_size, head = 0;
    452b:	45 31 ed             	xor    %r13d,%r13d
	int err = 0;
    452e:	31 f6                	xor    %esi,%esi
    4530:	eb 18                	jmp    454a <kvs_iterate_sparse_inram+0x4a>

			if (err < 0)
				goto out;
		}

		head = next_head(head, kvinram->kmax);
    4532:	41 8b 4f 28          	mov    0x28(%r15),%ecx
    4536:	44 89 e8             	mov    %r13d,%eax
    4539:	31 d2                	xor    %edx,%edx
	current_head += 1;
    453b:	48 83 c0 01          	add    $0x1,%rax
    453f:	48 f7 f1             	div    %rcx
	} while (head);
    4542:	48 85 d2             	test   %rdx,%rdx
		head = next_head(head, kvinram->kmax);
    4545:	41 89 d5             	mov    %edx,%r13d
	} while (head);
    4548:	74 4d                	je     4597 <kvs_iterate_sparse_inram+0x97>
		if (!is_empty(ptr, kvalue_size) &&
    454a:	45 85 f6             	test   %r14d,%r14d
    454d:	74 e3                	je     4532 <kvs_iterate_sparse_inram+0x32>
		ptr = kvinram->store + (head * kvalue_size);
    454f:	44 89 ef             	mov    %r13d,%edi
    4552:	41 0f af fe          	imul   %r14d,%edi
    4556:	49 03 7f 30          	add    0x30(%r15),%rdi
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    455a:	45 85 f6             	test   %r14d,%r14d
    455d:	7e 1d                	jle    457c <kvs_iterate_sparse_inram+0x7c>
    455f:	80 3f 6b             	cmpb   $0x6b,(%rdi)
    4562:	75 18                	jne    457c <kvs_iterate_sparse_inram+0x7c>
    4564:	48 8d 4f 01          	lea    0x1(%rdi),%rcx
	int i = 0;
    4568:	31 c0                	xor    %eax,%eax
		i++;
    456a:	83 c0 01             	add    $0x1,%eax
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    456d:	44 39 f0             	cmp    %r14d,%eax
    4570:	74 c0                	je     4532 <kvs_iterate_sparse_inram+0x32>
    4572:	48 83 c1 01          	add    $0x1,%rcx
    4576:	80 79 ff 6b          	cmpb   $0x6b,-0x1(%rcx)
    457a:	74 ee                	je     456a <kvs_iterate_sparse_inram+0x6a>
					       (void *)(ptr + kvs->ksize),
    457c:	41 8b 57 04          	mov    0x4(%r15),%edx
			err = iteration_action((void *)ptr, kvs->ksize,
    4580:	4d 89 e0             	mov    %r12,%r8
    4583:	41 8b 0f             	mov    (%r15),%ecx
					       (void *)(ptr + kvs->ksize),
    4586:	48 89 d6             	mov    %rdx,%rsi
    4589:	48 01 fa             	add    %rdi,%rdx
			err = iteration_action((void *)ptr, kvs->ksize,
    458c:	e8 00 00 00 00       	callq  4591 <kvs_iterate_sparse_inram+0x91>
			if (err < 0)
    4591:	85 c0                	test   %eax,%eax
			err = iteration_action((void *)ptr, kvs->ksize,
    4593:	89 c6                	mov    %eax,%esi
			if (err < 0)
    4595:	79 9b                	jns    4532 <kvs_iterate_sparse_inram+0x32>

out:
	return err;
}
    4597:	5b                   	pop    %rbx
    4598:	89 f0                	mov    %esi,%eax
    459a:	41 5c                	pop    %r12
    459c:	41 5d                	pop    %r13
    459e:	41 5e                	pop    %r14
    45a0:	41 5f                	pop    %r15
    45a2:	5d                   	pop    %rbp
    45a3:	c3                   	retq   
    45a4:	0f 0b                	ud2    
    45a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    45ad:	00 00 00 

00000000000045b0 <kvs_lookup_sparse_inram>:
{
    45b0:	e8 00 00 00 00       	callq  45b5 <kvs_lookup_sparse_inram+0x5>
    45b5:	55                   	push   %rbp
    45b6:	48 89 e5             	mov    %rsp,%rbp
    45b9:	41 57                	push   %r15
    45bb:	41 56                	push   %r14
    45bd:	41 55                	push   %r13
    45bf:	41 54                	push   %r12
    45c1:	53                   	push   %rbx
    45c2:	48 83 ec 20          	sub    $0x20,%rsp
	if (ksize != kvs->ksize)
    45c6:	44 8b 77 04          	mov    0x4(%rdi),%r14d
	u64 idxhead = *((uint64_t *)key);
    45ca:	48 8b 06             	mov    (%rsi),%rax
	if (ksize != kvs->ksize)
    45cd:	41 39 d6             	cmp    %edx,%r14d
    45d0:	0f 85 92 00 00 00    	jne    4668 <kvs_lookup_sparse_inram+0xb8>
	head = do_div(idxhead, kvinram->kmax);
    45d6:	44 8b 67 28          	mov    0x28(%rdi),%r12d
    45da:	31 d2                	xor    %edx,%edx
    45dc:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
	entry_size = kvs->vsize + kvs->ksize;
    45e0:	8b 0f                	mov    (%rdi),%ecx
    45e2:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
	head = do_div(idxhead, kvinram->kmax);
    45e6:	49 f7 f4             	div    %r12
		ptr = kvinram->store + entry_size * head;
    45e9:	48 8b 47 30          	mov    0x30(%rdi),%rax
	entry_size = kvs->vsize + kvs->ksize;
    45ed:	89 4d c0             	mov    %ecx,-0x40(%rbp)
    45f0:	45 8d 2c 0e          	lea    (%r14,%rcx,1),%r13d
		ptr = kvinram->store + entry_size * head;
    45f4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	head = do_div(idxhead, kvinram->kmax);
    45f8:	89 55 c4             	mov    %edx,-0x3c(%rbp)
    45fb:	41 89 d7             	mov    %edx,%r15d
    45fe:	eb 27                	jmp    4627 <kvs_lookup_sparse_inram+0x77>
	return __builtin_memcmp(p, q, size);
    4600:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    4604:	4c 89 f2             	mov    %r14,%rdx
    4607:	48 89 df             	mov    %rbx,%rdi
    460a:	e8 00 00 00 00       	callq  460f <kvs_lookup_sparse_inram+0x5f>
		if (memcmp(ptr, key, kvs->ksize)) {
    460f:	85 c0                	test   %eax,%eax
    4611:	74 3c                	je     464f <kvs_lookup_sparse_inram+0x9f>
			head = next_head(head, kvinram->kmax);
    4613:	44 89 f8             	mov    %r15d,%eax
    4616:	31 d2                	xor    %edx,%edx
	current_head += 1;
    4618:	48 83 c0 01          	add    $0x1,%rax
    461c:	49 f7 f4             	div    %r12
	} while (head != tail);
    461f:	39 55 c4             	cmp    %edx,-0x3c(%rbp)
			head = next_head(head, kvinram->kmax);
    4622:	41 89 d7             	mov    %edx,%r15d
	} while (head != tail);
    4625:	74 10                	je     4637 <kvs_lookup_sparse_inram+0x87>
		ptr = kvinram->store + entry_size * head;
    4627:	44 89 fb             	mov    %r15d,%ebx
    462a:	41 0f af dd          	imul   %r13d,%ebx
    462e:	48 03 5d d0          	add    -0x30(%rbp),%rbx
		if (is_empty(ptr, entry_size))
    4632:	45 85 ed             	test   %r13d,%r13d
    4635:	75 c9                	jne    4600 <kvs_lookup_sparse_inram+0x50>
			return r;
    4637:	41 b8 c3 ff ff ff    	mov    $0xffffffc3,%r8d
}
    463d:	48 83 c4 20          	add    $0x20,%rsp
    4641:	44 89 c0             	mov    %r8d,%eax
    4644:	5b                   	pop    %rbx
    4645:	41 5c                	pop    %r12
    4647:	41 5d                	pop    %r13
    4649:	41 5e                	pop    %r14
    464b:	41 5f                	pop    %r15
    464d:	5d                   	pop    %rbp
    464e:	c3                   	retq   
			memcpy(value, ptr + kvs->ksize, kvs->vsize);
    464f:	8b 55 c0             	mov    -0x40(%rbp),%edx
	return __builtin_memcpy(p, q, size);
    4652:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
    4656:	4a 8d 34 33          	lea    (%rbx,%r14,1),%rsi
    465a:	89 45 d0             	mov    %eax,-0x30(%rbp)
    465d:	e8 00 00 00 00       	callq  4662 <kvs_lookup_sparse_inram+0xb2>
			return 0;
    4662:	44 8b 45 d0          	mov    -0x30(%rbp),%r8d
    4666:	eb d5                	jmp    463d <kvs_lookup_sparse_inram+0x8d>
		return -EINVAL;
    4668:	41 b8 ea ff ff ff    	mov    $0xffffffea,%r8d
    466e:	eb cd                	jmp    463d <kvs_lookup_sparse_inram+0x8d>

0000000000004670 <kvs_insert_sparse_inram>:
{
    4670:	e8 00 00 00 00       	callq  4675 <kvs_insert_sparse_inram+0x5>
    4675:	55                   	push   %rbp
	BUG_ON(!kvs);
    4676:	48 85 ff             	test   %rdi,%rdi
{
    4679:	48 89 e5             	mov    %rsp,%rbp
    467c:	41 56                	push   %r14
    467e:	41 55                	push   %r13
    4680:	41 54                	push   %r12
    4682:	53                   	push   %rbx
	u64 idxhead = *((uint64_t *)key);
    4683:	48 8b 06             	mov    (%rsi),%rax
	BUG_ON(!kvs);
    4686:	0f 84 aa 00 00 00    	je     4736 <kvs_insert_sparse_inram+0xc6>
	if (ksize > kvs->ksize)
    468c:	44 8b 77 04          	mov    0x4(%rdi),%r14d
    4690:	41 39 d6             	cmp    %edx,%r14d
    4693:	0f 82 9f 00 00 00    	jb     4738 <kvs_insert_sparse_inram+0xc8>
	head = do_div(idxhead, kvinram->kmax);
    4699:	8b 5f 28             	mov    0x28(%rdi),%ebx
    469c:	31 d2                	xor    %edx,%edx
	entry_size = kvs->vsize + kvs->ksize;
    469e:	44 8b 17             	mov    (%rdi),%r10d
		ptr = kvinram->store + entry_size * head;
    46a1:	4c 8b 67 30          	mov    0x30(%rdi),%r12
	entry_size = kvs->vsize + kvs->ksize;
    46a5:	45 01 f2             	add    %r14d,%r10d
	head = do_div(idxhead, kvinram->kmax);
    46a8:	48 f7 f3             	div    %rbx
    46ab:	41 89 d5             	mov    %edx,%r13d
    46ae:	41 89 d1             	mov    %edx,%r9d
		ptr = kvinram->store + entry_size * head;
    46b1:	45 89 cb             	mov    %r9d,%r11d
    46b4:	45 0f af da          	imul   %r10d,%r11d
    46b8:	4d 01 e3             	add    %r12,%r11
		if (is_empty(ptr, entry_size) || is_deleted(ptr, entry_size)) {
    46bb:	41 83 fa 00          	cmp    $0x0,%r10d
    46bf:	74 23                	je     46e4 <kvs_insert_sparse_inram+0x74>
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    46c1:	7e 51                	jle    4714 <kvs_insert_sparse_inram+0xa4>
    46c3:	41 80 3b 6b          	cmpb   $0x6b,(%r11)
    46c7:	75 4b                	jne    4714 <kvs_insert_sparse_inram+0xa4>
    46c9:	4d 8d 43 01          	lea    0x1(%r11),%r8
	int i = 0;
    46cd:	31 c0                	xor    %eax,%eax
    46cf:	eb 0b                	jmp    46dc <kvs_insert_sparse_inram+0x6c>
    46d1:	49 83 c0 01          	add    $0x1,%r8
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    46d5:	41 80 78 ff 6b       	cmpb   $0x6b,-0x1(%r8)
    46da:	75 38                	jne    4714 <kvs_insert_sparse_inram+0xa4>
		i++;
    46dc:	83 c0 01             	add    $0x1,%eax
	while ((i < length) && (ptr[i] == DELETED_ENTRY))
    46df:	41 39 c2             	cmp    %eax,%r10d
    46e2:	75 ed                	jne    46d1 <kvs_insert_sparse_inram+0x61>
    46e4:	49 89 fc             	mov    %rdi,%r12
			memcpy(ptr, key, kvs->ksize);
    46e7:	44 89 f2             	mov    %r14d,%edx
    46ea:	4c 89 df             	mov    %r11,%rdi
    46ed:	48 89 cb             	mov    %rcx,%rbx
    46f0:	e8 00 00 00 00       	callq  46f5 <kvs_insert_sparse_inram+0x85>
			memcpy(ptr + kvs->ksize, value, kvs->vsize);
    46f5:	41 8b 7c 24 04       	mov    0x4(%r12),%edi
    46fa:	41 8b 14 24          	mov    (%r12),%edx
    46fe:	48 89 de             	mov    %rbx,%rsi
    4701:	48 01 c7             	add    %rax,%rdi
    4704:	e8 00 00 00 00       	callq  4709 <kvs_insert_sparse_inram+0x99>
			return 0;
    4709:	31 c0                	xor    %eax,%eax
}
    470b:	5b                   	pop    %rbx
    470c:	41 5c                	pop    %r12
    470e:	41 5d                	pop    %r13
    4710:	41 5e                	pop    %r14
    4712:	5d                   	pop    %rbp
    4713:	c3                   	retq   
		head = next_head(head, kvinram->kmax);
    4714:	44 89 c8             	mov    %r9d,%eax
    4717:	31 d2                	xor    %edx,%edx
	current_head += 1;
    4719:	48 83 c0 01          	add    $0x1,%rax
    471d:	48 f7 f3             	div    %rbx
	} while (head != tail);
    4720:	41 39 d5             	cmp    %edx,%r13d
		head = next_head(head, kvinram->kmax);
    4723:	41 89 d1             	mov    %edx,%r9d
	} while (head != tail);
    4726:	75 89                	jne    46b1 <kvs_insert_sparse_inram+0x41>
}
    4728:	5b                   	pop    %rbx
	return -ENOSPC;
    4729:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
}
    472e:	41 5c                	pop    %r12
    4730:	41 5d                	pop    %r13
    4732:	41 5e                	pop    %r14
    4734:	5d                   	pop    %rbp
    4735:	c3                   	retq   
    4736:	0f 0b                	ud2    
		return -EINVAL;
    4738:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    473d:	eb cc                	jmp    470b <kvs_insert_sparse_inram+0x9b>
    473f:	90                   	nop

0000000000004740 <kvs_lookup_linear_inram>:
{
    4740:	e8 00 00 00 00       	callq  4745 <kvs_lookup_linear_inram+0x5>
	if (ksize != kvs->ksize)
    4745:	39 57 04             	cmp    %edx,0x4(%rdi)
    4748:	75 3b                	jne    4785 <kvs_lookup_linear_inram+0x45>
{
    474a:	55                   	push   %rbp
    474b:	48 89 e5             	mov    %rsp,%rbp
    474e:	41 54                	push   %r12
    4750:	53                   	push   %rbx
	if (idx > kvinram->kmax)
    4751:	8b 57 28             	mov    0x28(%rdi),%edx
	idx = *((uint64_t *)key);
    4754:	48 8b 36             	mov    (%rsi),%rsi
    4757:	48 89 fb             	mov    %rdi,%rbx
	if (idx > kvinram->kmax)
    475a:	48 39 f2             	cmp    %rsi,%rdx
    475d:	72 2c                	jb     478b <kvs_lookup_linear_inram+0x4b>
	ptr = kvinram->store + kvs->vsize * idx;
    475f:	8b 17                	mov    (%rdi),%edx
    4761:	48 0f af f2          	imul   %rdx,%rsi
    4765:	48 03 73 30          	add    0x30(%rbx),%rsi
	if (is_empty(ptr, kvs->vsize))
    4769:	85 d2                	test   %edx,%edx
    476b:	74 25                	je     4792 <kvs_lookup_linear_inram+0x52>
    476d:	48 89 cf             	mov    %rcx,%rdi
    4770:	4d 89 c4             	mov    %r8,%r12
    4773:	e8 00 00 00 00       	callq  4778 <kvs_lookup_linear_inram+0x38>
	*vsize = kvs->vsize;
    4778:	8b 03                	mov    (%rbx),%eax
    477a:	41 89 04 24          	mov    %eax,(%r12)
	return 0;
    477e:	31 c0                	xor    %eax,%eax
}
    4780:	5b                   	pop    %rbx
    4781:	41 5c                	pop    %r12
    4783:	5d                   	pop    %rbp
    4784:	c3                   	retq   
		return -EINVAL;
    4785:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
}
    478a:	c3                   	retq   
		return -ERANGE;
    478b:	b8 de ff ff ff       	mov    $0xffffffde,%eax
    4790:	eb ee                	jmp    4780 <kvs_lookup_linear_inram+0x40>
		return r;
    4792:	b8 c3 ff ff ff       	mov    $0xffffffc3,%eax
    4797:	eb e7                	jmp    4780 <kvs_lookup_linear_inram+0x40>
    4799:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000047a0 <kvs_insert_linear_inram>:
{
    47a0:	e8 00 00 00 00       	callq  47a5 <kvs_insert_linear_inram+0x5>
	if (ksize != kvs->ksize)
    47a5:	39 57 04             	cmp    %edx,0x4(%rdi)
    47a8:	75 2d                	jne    47d7 <kvs_insert_linear_inram+0x37>
	if (vsize != kvs->vsize)
    47aa:	8b 17                	mov    (%rdi),%edx
    47ac:	44 39 c2             	cmp    %r8d,%edx
    47af:	75 26                	jne    47d7 <kvs_insert_linear_inram+0x37>
	idx = *((uint64_t *)key);
    47b1:	48 8b 06             	mov    (%rsi),%rax
	if (idx > kvinram->kmax)
    47b4:	8b 77 28             	mov    0x28(%rdi),%esi
    47b7:	48 39 c6             	cmp    %rax,%rsi
    47ba:	72 21                	jb     47dd <kvs_insert_linear_inram+0x3d>
	ptr = kvinram->store + kvs->vsize * idx;
    47bc:	48 0f af c2          	imul   %rdx,%rax
{
    47c0:	55                   	push   %rbp
    47c1:	48 89 ce             	mov    %rcx,%rsi
	ptr = kvinram->store + kvs->vsize * idx;
    47c4:	48 03 47 30          	add    0x30(%rdi),%rax
{
    47c8:	48 89 e5             	mov    %rsp,%rbp
	ptr = kvinram->store + kvs->vsize * idx;
    47cb:	48 89 c7             	mov    %rax,%rdi
    47ce:	e8 00 00 00 00       	callq  47d3 <kvs_insert_linear_inram+0x33>
	return 0;
    47d3:	31 c0                	xor    %eax,%eax
}
    47d5:	5d                   	pop    %rbp
    47d6:	c3                   	retq   
		return -EINVAL;
    47d7:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    47dc:	c3                   	retq   
		return -ERANGE;
    47dd:	b8 de ff ff ff       	mov    $0xffffffde,%eax
}
    47e2:	c3                   	retq   
    47e3:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    47ea:	00 00 00 00 
    47ee:	66 90                	xchg   %ax,%ax

00000000000047f0 <init_meta_inram>:
{
    47f0:	e8 00 00 00 00       	callq  47f5 <init_meta_inram+0x5>
    47f5:	55                   	push   %rbp
    47f6:	48 89 e5             	mov    %rsp,%rbp
    47f9:	41 55                	push   %r13
    47fb:	41 54                	push   %r12
    47fd:	53                   	push   %rbx
    47fe:	49 89 fd             	mov    %rdi,%r13
    4801:	48 89 f3             	mov    %rsi,%rbx
	DMINFO("Initializing INRAM backend");
    4804:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    480b:	e8 00 00 00 00       	callq  4810 <init_meta_inram+0x20>
	*unformatted = true;
    4810:	c6 03 01             	movb   $0x1,(%rbx)
			return kmem_cache_alloc_trace(kmalloc_caches[index],
    4813:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 481a <init_meta_inram+0x2a>
    481a:	ba 28 00 00 00       	mov    $0x28,%edx
    481f:	be 00 00 60 00       	mov    $0x600000,%esi
		return ERR_PTR(-ENOMEM);
    4824:	48 c7 c3 f4 ff ff ff 	mov    $0xfffffffffffffff4,%rbx
    482b:	e8 00 00 00 00       	callq  4830 <init_meta_inram+0x40>
	if (!md)
    4830:	48 85 c0             	test   %rax,%rax
    4833:	74 2e                	je     4863 <init_meta_inram+0x73>
    4835:	48 89 c3             	mov    %rax,%rbx
	smap_size = p->blocks * sizeof(uint32_t);
    4838:	49 8b 45 00          	mov    0x0(%r13),%rax
    483c:	4c 8d 24 85 00 00 00 	lea    0x0(,%rax,4),%r12
    4843:	00 
	md->smap = vmalloc(smap_size);
    4844:	4c 89 e7             	mov    %r12,%rdi
    4847:	e8 00 00 00 00       	callq  484c <init_meta_inram+0x5c>
	if (!md->smap) {
    484c:	48 85 c0             	test   %rax,%rax
	md->smap = vmalloc(smap_size);
    484f:	48 89 03             	mov    %rax,(%rbx)
	if (!md->smap) {
    4852:	75 19                	jne    486d <init_meta_inram+0x7d>
		kfree(md);
    4854:	48 89 df             	mov    %rbx,%rdi
		return ERR_PTR(-ENOMEM);
    4857:	48 c7 c3 f4 ff ff ff 	mov    $0xfffffffffffffff4,%rbx
		kfree(md);
    485e:	e8 00 00 00 00       	callq  4863 <init_meta_inram+0x73>
}
    4863:	48 89 d8             	mov    %rbx,%rax
    4866:	5b                   	pop    %rbx
    4867:	41 5c                	pop    %r12
    4869:	41 5d                	pop    %r13
    486b:	5d                   	pop    %rbp
    486c:	c3                   	retq   
	(void)do_div(tmp, (1024 * 1024));
    486d:	4c 89 e2             	mov    %r12,%rdx
    4870:	4c 89 e6             	mov    %r12,%rsi
	DMINFO("Space allocated for pbn reference count map: %llu.%06llu MB",
    4873:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	(void)do_div(tmp, (1024 * 1024));
    487a:	81 e2 ff ff 0f 00    	and    $0xfffff,%edx
    4880:	48 c1 ee 14          	shr    $0x14,%rsi
	DMINFO("Space allocated for pbn reference count map: %llu.%06llu MB",
    4884:	e8 00 00 00 00       	callq  4889 <init_meta_inram+0x99>
	return __builtin_memset(p, c, size);
    4889:	48 8b 3b             	mov    (%rbx),%rdi
    488c:	4c 89 e2             	mov    %r12,%rdx
    488f:	31 f6                	xor    %esi,%esi
    4891:	e8 00 00 00 00       	callq  4896 <init_meta_inram+0xa6>
	md->smax = p->blocks;
    4896:	49 8b 45 00          	mov    0x0(%r13),%rax
	md->allocptr = 0;
    489a:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
    48a1:	00 
	md->kvs_linear = NULL;
    48a2:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
    48a9:	00 
	md->kvs_sparse = NULL;
    48aa:	48 c7 43 20 00 00 00 	movq   $0x0,0x20(%rbx)
    48b1:	00 
	md->smax = p->blocks;
    48b2:	48 89 43 08          	mov    %rax,0x8(%rbx)
	return md;
    48b6:	eb ab                	jmp    4863 <init_meta_inram+0x73>
    48b8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    48bf:	00 

00000000000048c0 <kvs_delete_sparse_inram>:
{
    48c0:	e8 00 00 00 00       	callq  48c5 <kvs_delete_sparse_inram+0x5>
	if (ksize != kvs->ksize)
    48c5:	44 8b 47 04          	mov    0x4(%rdi),%r8d
	u64 idxhead = *((uint64_t *)key);
    48c9:	48 8b 06             	mov    (%rsi),%rax
	if (ksize != kvs->ksize)
    48cc:	41 39 d0             	cmp    %edx,%r8d
    48cf:	0f 85 9f 00 00 00    	jne    4974 <kvs_delete_sparse_inram+0xb4>
{
    48d5:	55                   	push   %rbp
	head = do_div(idxhead, kvinram->kmax);
    48d6:	31 d2                	xor    %edx,%edx
{
    48d8:	48 89 e5             	mov    %rsp,%rbp
    48db:	41 57                	push   %r15
    48dd:	41 56                	push   %r14
    48df:	41 55                	push   %r13
    48e1:	41 54                	push   %r12
    48e3:	53                   	push   %rbx
    48e4:	48 83 ec 18          	sub    $0x18,%rsp
	head = do_div(idxhead, kvinram->kmax);
    48e8:	44 8b 6f 28          	mov    0x28(%rdi),%r13d
	entry_size = kvs->vsize + kvs->ksize;
    48ec:	44 8b 27             	mov    (%rdi),%r12d
    48ef:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
		ptr = kvinram->store + entry_size * head;
    48f3:	4c 8b 7f 30          	mov    0x30(%rdi),%r15
	entry_size = kvs->vsize + kvs->ksize;
    48f7:	45 01 c4             	add    %r8d,%r12d
	head = do_div(idxhead, kvinram->kmax);
    48fa:	49 f7 f5             	div    %r13
		if (memcmp(ptr, key, kvs->ksize)) {
    48fd:	44 89 c0             	mov    %r8d,%eax
    4900:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
	head = do_div(idxhead, kvinram->kmax);
    4904:	89 55 c4             	mov    %edx,-0x3c(%rbp)
    4907:	41 89 d6             	mov    %edx,%r14d
    490a:	eb 28                	jmp    4934 <kvs_delete_sparse_inram+0x74>
	return __builtin_memcmp(p, q, size);
    490c:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
    4910:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
    4914:	48 89 df             	mov    %rbx,%rdi
    4917:	e8 00 00 00 00       	callq  491c <kvs_delete_sparse_inram+0x5c>
		if (memcmp(ptr, key, kvs->ksize)) {
    491c:	85 c0                	test   %eax,%eax
    491e:	74 3b                	je     495b <kvs_delete_sparse_inram+0x9b>
			head = next_head(head, kvinram->kmax);
    4920:	44 89 f0             	mov    %r14d,%eax
    4923:	31 d2                	xor    %edx,%edx
	current_head += 1;
    4925:	48 83 c0 01          	add    $0x1,%rax
    4929:	49 f7 f5             	div    %r13
	} while (head != tail);
    492c:	39 55 c4             	cmp    %edx,-0x3c(%rbp)
			head = next_head(head, kvinram->kmax);
    492f:	41 89 d6             	mov    %edx,%r14d
	} while (head != tail);
    4932:	74 0f                	je     4943 <kvs_delete_sparse_inram+0x83>
		ptr = kvinram->store + entry_size * head;
    4934:	44 89 f3             	mov    %r14d,%ebx
    4937:	41 0f af dc          	imul   %r12d,%ebx
    493b:	4c 01 fb             	add    %r15,%rbx
		if (is_empty(ptr, entry_size))
    493e:	45 85 e4             	test   %r12d,%r12d
    4941:	75 c9                	jne    490c <kvs_delete_sparse_inram+0x4c>
	return -ENODEV;
    4943:	41 b8 ed ff ff ff    	mov    $0xffffffed,%r8d
}
    4949:	48 83 c4 18          	add    $0x18,%rsp
    494d:	44 89 c0             	mov    %r8d,%eax
    4950:	5b                   	pop    %rbx
    4951:	41 5c                	pop    %r12
    4953:	41 5d                	pop    %r13
    4955:	41 5e                	pop    %r14
    4957:	41 5f                	pop    %r15
    4959:	5d                   	pop    %rbp
    495a:	c3                   	retq   
			memset(ptr, DELETED_ENTRY, entry_size);
    495b:	44 89 e2             	mov    %r12d,%edx
	return __builtin_memset(p, c, size);
    495e:	be 6b 00 00 00       	mov    $0x6b,%esi
    4963:	48 89 df             	mov    %rbx,%rdi
    4966:	89 45 d0             	mov    %eax,-0x30(%rbp)
    4969:	e8 00 00 00 00       	callq  496e <kvs_delete_sparse_inram+0xae>
			return 0;
    496e:	44 8b 45 d0          	mov    -0x30(%rbp),%r8d
    4972:	eb d5                	jmp    4949 <kvs_delete_sparse_inram+0x89>
		return -EINVAL;
    4974:	41 b8 ea ff ff ff    	mov    $0xffffffea,%r8d
}
    497a:	44 89 c0             	mov    %r8d,%eax
    497d:	c3                   	retq   
    497e:	66 90                	xchg   %ax,%ax

0000000000004980 <kvs_delete_linear_inram>:
{
    4980:	e8 00 00 00 00       	callq  4985 <kvs_delete_linear_inram+0x5>
	if (ksize != kvs->ksize)
    4985:	39 57 04             	cmp    %edx,0x4(%rdi)
    4988:	75 2e                	jne    49b8 <kvs_delete_linear_inram+0x38>
	if (idx > kvinram->kmax)
    498a:	8b 57 28             	mov    0x28(%rdi),%edx
	idx = *((uint64_t *)key);
    498d:	48 8b 06             	mov    (%rsi),%rax
	if (idx > kvinram->kmax)
    4990:	48 39 c2             	cmp    %rax,%rdx
    4993:	72 29                	jb     49be <kvs_delete_linear_inram+0x3e>
	ptr = kvinram->store + kvs->vsize * idx;
    4995:	8b 17                	mov    (%rdi),%edx
    4997:	48 0f af c2          	imul   %rdx,%rax
    499b:	48 03 47 30          	add    0x30(%rdi),%rax
	if (is_empty(ptr, kvs->vsize))
    499f:	85 d2                	test   %edx,%edx
	ptr = kvinram->store + kvs->vsize * idx;
    49a1:	48 89 c7             	mov    %rax,%rdi
	if (is_empty(ptr, kvs->vsize))
    49a4:	74 1e                	je     49c4 <kvs_delete_linear_inram+0x44>
{
    49a6:	55                   	push   %rbp
    49a7:	be ff 00 00 00       	mov    $0xff,%esi
    49ac:	48 89 e5             	mov    %rsp,%rbp
    49af:	e8 00 00 00 00       	callq  49b4 <kvs_delete_linear_inram+0x34>
	return 0;
    49b4:	31 c0                	xor    %eax,%eax
}
    49b6:	5d                   	pop    %rbp
    49b7:	c3                   	retq   
		return -EINVAL;
    49b8:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    49bd:	c3                   	retq   
		return -ERANGE;
    49be:	b8 de ff ff ff       	mov    $0xffffffde,%eax
    49c3:	c3                   	retq   
		return -ENODEV;
    49c4:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
}
    49c9:	c3                   	retq   
    49ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000049d0 <exit_meta_inram>:
{
    49d0:	e8 00 00 00 00       	callq  49d5 <exit_meta_inram+0x5>
    49d5:	55                   	push   %rbp
    49d6:	48 89 e5             	mov    %rsp,%rbp
    49d9:	53                   	push   %rbx
    49da:	48 89 fb             	mov    %rdi,%rbx
	if (md->smap)
    49dd:	48 8b 3f             	mov    (%rdi),%rdi
    49e0:	48 85 ff             	test   %rdi,%rdi
    49e3:	74 05                	je     49ea <exit_meta_inram+0x1a>
		vfree(md->smap);
    49e5:	e8 00 00 00 00       	callq  49ea <exit_meta_inram+0x1a>
	if (md->kvs_linear) {
    49ea:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
    49ee:	48 85 ff             	test   %rdi,%rdi
    49f1:	74 1a                	je     4a0d <exit_meta_inram+0x3d>
		if (md->kvs_linear->store)
    49f3:	48 8b 47 30          	mov    0x30(%rdi),%rax
    49f7:	48 85 c0             	test   %rax,%rax
    49fa:	74 0c                	je     4a08 <exit_meta_inram+0x38>
			vfree(md->kvs_linear->store);
    49fc:	48 89 c7             	mov    %rax,%rdi
    49ff:	e8 00 00 00 00       	callq  4a04 <exit_meta_inram+0x34>
    4a04:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
		kfree(md->kvs_linear);
    4a08:	e8 00 00 00 00       	callq  4a0d <exit_meta_inram+0x3d>
	if (md->kvs_sparse) {
    4a0d:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
    4a11:	48 85 ff             	test   %rdi,%rdi
    4a14:	74 1a                	je     4a30 <exit_meta_inram+0x60>
		if (md->kvs_sparse->store)
    4a16:	48 8b 47 30          	mov    0x30(%rdi),%rax
    4a1a:	48 85 c0             	test   %rax,%rax
    4a1d:	74 0c                	je     4a2b <exit_meta_inram+0x5b>
			vfree(md->kvs_sparse->store);
    4a1f:	48 89 c7             	mov    %rax,%rdi
    4a22:	e8 00 00 00 00       	callq  4a27 <exit_meta_inram+0x57>
    4a27:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
		kfree(md->kvs_sparse);
    4a2b:	e8 00 00 00 00       	callq  4a30 <exit_meta_inram+0x60>
	kfree(md);
    4a30:	48 89 df             	mov    %rbx,%rdi
    4a33:	e8 00 00 00 00       	callq  4a38 <exit_meta_inram+0x68>
}
    4a38:	5b                   	pop    %rbx
    4a39:	5d                   	pop    %rbp
    4a3a:	c3                   	retq   
    4a3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000004a40 <kvs_create_sparse_inram>:

static struct kvstore *kvs_create_sparse_inram(struct metadata *md,
					       u32 ksize, u32 vsize,
					       u32 knummax, bool unformatted, u32 type)
{
    4a40:	e8 00 00 00 00       	callq  4a45 <kvs_create_sparse_inram+0x5>
    4a45:	55                   	push   %rbp
    4a46:	48 89 e5             	mov    %rsp,%rbp
    4a49:	41 57                	push   %r15
    4a4b:	41 56                	push   %r14
    4a4d:	41 55                	push   %r13
    4a4f:	41 54                	push   %r12
    4a51:	53                   	push   %rbx
    4a52:	48 83 ec 18          	sub    $0x18,%rsp
	struct kvstore_inram *kvs;
	u64 kvstore_size, tmp;

	if (!vsize || !ksize || !knummax)
    4a56:	85 f6                	test   %esi,%esi
    4a58:	41 0f 94 c0          	sete   %r8b
    4a5c:	85 c9                	test   %ecx,%ecx
    4a5e:	0f 94 c0             	sete   %al
    4a61:	41 08 c0             	or     %al,%r8b
    4a64:	75 04                	jne    4a6a <kvs_create_sparse_inram+0x2a>
    4a66:	85 d2                	test   %edx,%edx
    4a68:	75 19                	jne    4a83 <kvs_create_sparse_inram+0x43>
		return ERR_PTR(-ENOTSUPP);
    4a6a:	49 c7 c5 f4 fd ff ff 	mov    $0xfffffffffffffdf4,%r13
	kvs->ckvs.kvs_iterate = kvs_iterate_sparse_inram;

	md->kvs_sparse = kvs;

	return &(kvs->ckvs);
}
    4a71:	48 83 c4 18          	add    $0x18,%rsp
    4a75:	4c 89 e8             	mov    %r13,%rax
    4a78:	5b                   	pop    %rbx
    4a79:	41 5c                	pop    %r12
    4a7b:	41 5d                	pop    %r13
    4a7d:	41 5e                	pop    %r14
    4a7f:	41 5f                	pop    %r15
    4a81:	5d                   	pop    %rbp
    4a82:	c3                   	retq   
	if (md->kvs_sparse)
    4a83:	48 83 7f 20 00       	cmpq   $0x0,0x20(%rdi)
		return ERR_PTR(-EBUSY);
    4a88:	49 c7 c5 f0 ff ff ff 	mov    $0xfffffffffffffff0,%r13
	if (md->kvs_sparse)
    4a8f:	75 e0                	jne    4a71 <kvs_create_sparse_inram+0x31>
    4a91:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
    4a95:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 4a9c <kvs_create_sparse_inram+0x5c>
    4a9c:	41 89 d4             	mov    %edx,%r12d
    4a9f:	89 f3                	mov    %esi,%ebx
    4aa1:	ba 38 00 00 00       	mov    $0x38,%edx
    4aa6:	be 00 00 60 00       	mov    $0x600000,%esi
    4aab:	41 89 ce             	mov    %ecx,%r14d
		return ERR_PTR(-ENOMEM);
    4aae:	49 83 c5 04          	add    $0x4,%r13
    4ab2:	e8 00 00 00 00       	callq  4ab7 <kvs_create_sparse_inram+0x77>
	if (!kvs)
    4ab7:	48 85 c0             	test   %rax,%rax
    4aba:	49 89 c7             	mov    %rax,%r15
    4abd:	74 b2                	je     4a71 <kvs_create_sparse_inram+0x31>
	knummax += (knummax * HASHTABLE_OVERPROV) / 100;
    4abf:	43 8d 14 b6          	lea    (%r14,%r14,4),%edx
    4ac3:	be 1f 85 eb 51       	mov    $0x51eb851f,%esi
    4ac8:	01 d2                	add    %edx,%edx
    4aca:	89 d0                	mov    %edx,%eax
    4acc:	f7 e6                	mul    %esi
    4ace:	c1 ea 05             	shr    $0x5,%edx
    4ad1:	42 8d 04 32          	lea    (%rdx,%r14,1),%eax
	kvstore_size = (knummax * (vsize + ksize));
    4ad5:	45 8d 34 1c          	lea    (%r12,%rbx,1),%r14d
    4ad9:	44 0f af f0          	imul   %eax,%r14d
	knummax += (knummax * HASHTABLE_OVERPROV) / 100;
    4add:	89 45 cc             	mov    %eax,-0x34(%rbp)
	kvstore_size = (knummax * (vsize + ksize));
    4ae0:	44 89 f0             	mov    %r14d,%eax
	kvs->store = vmalloc(kvstore_size);
    4ae3:	48 89 c7             	mov    %rax,%rdi
	kvstore_size = (knummax * (vsize + ksize));
    4ae6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
	kvs->store = vmalloc(kvstore_size);
    4aea:	e8 00 00 00 00       	callq  4aef <kvs_create_sparse_inram+0xaf>
	if (!kvs->store) {
    4aef:	48 85 c0             	test   %rax,%rax
	kvs->store = vmalloc(kvstore_size);
    4af2:	49 89 47 30          	mov    %rax,0x30(%r15)
	if (!kvs->store) {
    4af6:	75 0d                	jne    4b05 <kvs_create_sparse_inram+0xc5>
		kfree(kvs);
    4af8:	4c 89 ff             	mov    %r15,%rdi
    4afb:	e8 00 00 00 00       	callq  4b00 <kvs_create_sparse_inram+0xc0>
    4b00:	e9 6c ff ff ff       	jmpq   4a71 <kvs_create_sparse_inram+0x31>
	(void)do_div(tmp, (1024 * 1024));
    4b05:	44 89 f2             	mov    %r14d,%edx
    4b08:	4c 8b 75 c0          	mov    -0x40(%rbp),%r14
	DMINFO("Space allocated for sparse key value store: %llu.%06llu MB",
    4b0c:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	(void)do_div(tmp, (1024 * 1024));
    4b13:	81 e2 ff ff 0f 00    	and    $0xfffff,%edx
	return &(kvs->ckvs);
    4b19:	4d 89 fd             	mov    %r15,%r13
	(void)do_div(tmp, (1024 * 1024));
    4b1c:	4c 89 f6             	mov    %r14,%rsi
    4b1f:	48 c1 ee 14          	shr    $0x14,%rsi
	DMINFO("Space allocated for sparse key value store: %llu.%06llu MB",
    4b23:	e8 00 00 00 00       	callq  4b28 <kvs_create_sparse_inram+0xe8>
    4b28:	49 8b 7f 30          	mov    0x30(%r15),%rdi
    4b2c:	4c 89 f2             	mov    %r14,%rdx
    4b2f:	be ff 00 00 00       	mov    $0xff,%esi
    4b34:	e8 00 00 00 00       	callq  4b39 <kvs_create_sparse_inram+0xf9>
	kvs->kmax = knummax;
    4b39:	8b 45 cc             	mov    -0x34(%rbp),%eax
	kvs->ckvs.vsize = vsize;
    4b3c:	45 89 27             	mov    %r12d,(%r15)
	kvs->ckvs.ksize = ksize;
    4b3f:	41 89 5f 04          	mov    %ebx,0x4(%r15)
	kvs->ckvs.kvs_insert = kvs_insert_sparse_inram;
    4b43:	49 c7 47 18 00 00 00 	movq   $0x0,0x18(%r15)
    4b4a:	00 
	kvs->ckvs.kvs_lookup = kvs_lookup_sparse_inram;
    4b4b:	49 c7 47 10 00 00 00 	movq   $0x0,0x10(%r15)
    4b52:	00 
	kvs->ckvs.kvs_delete = kvs_delete_sparse_inram;
    4b53:	49 c7 47 08 00 00 00 	movq   $0x0,0x8(%r15)
    4b5a:	00 
	kvs->kmax = knummax;
    4b5b:	41 89 47 28          	mov    %eax,0x28(%r15)
	md->kvs_sparse = kvs;
    4b5f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
	kvs->ckvs.kvs_iterate = kvs_iterate_sparse_inram;
    4b63:	49 c7 47 20 00 00 00 	movq   $0x0,0x20(%r15)
    4b6a:	00 
	md->kvs_sparse = kvs;
    4b6b:	4c 89 78 20          	mov    %r15,0x20(%rax)
    4b6f:	e9 fd fe ff ff       	jmpq   4a71 <kvs_create_sparse_inram+0x31>
    4b74:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    4b7b:	00 00 00 00 
    4b7f:	90                   	nop

0000000000004b80 <kvs_create_linear_inram>:
{
    4b80:	e8 00 00 00 00       	callq  4b85 <kvs_create_linear_inram+0x5>
    4b85:	55                   	push   %rbp
    4b86:	48 89 e5             	mov    %rsp,%rbp
    4b89:	41 57                	push   %r15
    4b8b:	41 56                	push   %r14
    4b8d:	41 55                	push   %r13
    4b8f:	41 54                	push   %r12
    4b91:	53                   	push   %rbx
    4b92:	48 83 ec 10          	sub    $0x10,%rsp
	if (!vsize || !ksize || !kmax)
    4b96:	85 c9                	test   %ecx,%ecx
    4b98:	41 0f 94 c0          	sete   %r8b
	if (ksize != 8)
    4b9c:	83 fe 08             	cmp    $0x8,%esi
    4b9f:	0f 95 c0             	setne  %al
    4ba2:	41 08 c0             	or     %al,%r8b
    4ba5:	75 04                	jne    4bab <kvs_create_linear_inram+0x2b>
    4ba7:	85 d2                	test   %edx,%edx
    4ba9:	75 19                	jne    4bc4 <kvs_create_linear_inram+0x44>
		return ERR_PTR(-ENOTSUPP);
    4bab:	49 c7 c5 f4 fd ff ff 	mov    $0xfffffffffffffdf4,%r13
}
    4bb2:	48 83 c4 10          	add    $0x10,%rsp
    4bb6:	4c 89 e8             	mov    %r13,%rax
    4bb9:	5b                   	pop    %rbx
    4bba:	41 5c                	pop    %r12
    4bbc:	41 5d                	pop    %r13
    4bbe:	41 5e                	pop    %r14
    4bc0:	41 5f                	pop    %r15
    4bc2:	5d                   	pop    %rbp
    4bc3:	c3                   	retq   
	if (md->kvs_linear)
    4bc4:	48 83 7f 18 00       	cmpq   $0x0,0x18(%rdi)
		return ERR_PTR(-EBUSY);
    4bc9:	49 c7 c5 f0 ff ff ff 	mov    $0xfffffffffffffff0,%r13
	if (md->kvs_linear)
    4bd0:	75 e0                	jne    4bb2 <kvs_create_linear_inram+0x32>
    4bd2:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
    4bd6:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 4bdd <kvs_create_linear_inram+0x5d>
    4bdd:	41 89 d4             	mov    %edx,%r12d
    4be0:	be 00 00 60 00       	mov    $0x600000,%esi
    4be5:	ba 38 00 00 00       	mov    $0x38,%edx
    4bea:	89 cb                	mov    %ecx,%ebx
		return ERR_PTR(-ENOMEM);
    4bec:	49 83 c5 04          	add    $0x4,%r13
    4bf0:	e8 00 00 00 00       	callq  4bf5 <kvs_create_linear_inram+0x75>
	if (!kvs)
    4bf5:	48 85 c0             	test   %rax,%rax
    4bf8:	49 89 c7             	mov    %rax,%r15
    4bfb:	74 b5                	je     4bb2 <kvs_create_linear_inram+0x32>
	kvstore_size = (kmax + 1) * vsize;
    4bfd:	44 8d 73 01          	lea    0x1(%rbx),%r14d
    4c01:	45 0f af f4          	imul   %r12d,%r14d
    4c05:	44 89 f0             	mov    %r14d,%eax
	kvs->store = vmalloc(kvstore_size);
    4c08:	48 89 c7             	mov    %rax,%rdi
	kvstore_size = (kmax + 1) * vsize;
    4c0b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	kvs->store = vmalloc(kvstore_size);
    4c0f:	e8 00 00 00 00       	callq  4c14 <kvs_create_linear_inram+0x94>
	if (!kvs->store) {
    4c14:	48 85 c0             	test   %rax,%rax
	kvs->store = vmalloc(kvstore_size);
    4c17:	49 89 47 30          	mov    %rax,0x30(%r15)
	if (!kvs->store) {
    4c1b:	75 0a                	jne    4c27 <kvs_create_linear_inram+0xa7>
		kfree(kvs);
    4c1d:	4c 89 ff             	mov    %r15,%rdi
    4c20:	e8 00 00 00 00       	callq  4c25 <kvs_create_linear_inram+0xa5>
    4c25:	eb 8b                	jmp    4bb2 <kvs_create_linear_inram+0x32>
	(void)do_div(tmp, (1024 * 1024));
    4c27:	44 89 f2             	mov    %r14d,%edx
    4c2a:	4c 8b 75 c8          	mov    -0x38(%rbp),%r14
	DMINFO("Space allocated for linear key value store: %llu.%06llu MB",
    4c2e:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	(void)do_div(tmp, (1024 * 1024));
    4c35:	81 e2 ff ff 0f 00    	and    $0xfffff,%edx
	return &(kvs->ckvs);
    4c3b:	4d 89 fd             	mov    %r15,%r13
	(void)do_div(tmp, (1024 * 1024));
    4c3e:	4c 89 f6             	mov    %r14,%rsi
    4c41:	48 c1 ee 14          	shr    $0x14,%rsi
	DMINFO("Space allocated for linear key value store: %llu.%06llu MB",
    4c45:	e8 00 00 00 00       	callq  4c4a <kvs_create_linear_inram+0xca>
    4c4a:	49 8b 7f 30          	mov    0x30(%r15),%rdi
    4c4e:	4c 89 f2             	mov    %r14,%rdx
    4c51:	be ff 00 00 00       	mov    $0xff,%esi
    4c56:	e8 00 00 00 00       	callq  4c5b <kvs_create_linear_inram+0xdb>
	md->kvs_linear = kvs;
    4c5b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
	kvs->ckvs.vsize = vsize;
    4c5f:	45 89 27             	mov    %r12d,(%r15)
	kvs->ckvs.ksize = ksize;
    4c62:	41 c7 47 04 08 00 00 	movl   $0x8,0x4(%r15)
    4c69:	00 
	kvs->kmax = kmax;
    4c6a:	41 89 5f 28          	mov    %ebx,0x28(%r15)
	kvs->ckvs.kvs_insert = kvs_insert_linear_inram;
    4c6e:	49 c7 47 18 00 00 00 	movq   $0x0,0x18(%r15)
    4c75:	00 
	kvs->ckvs.kvs_lookup = kvs_lookup_linear_inram;
    4c76:	49 c7 47 10 00 00 00 	movq   $0x0,0x10(%r15)
    4c7d:	00 
	kvs->ckvs.kvs_delete = kvs_delete_linear_inram;
    4c7e:	49 c7 47 08 00 00 00 	movq   $0x0,0x8(%r15)
    4c85:	00 
	kvs->ckvs.kvs_iterate = kvs_iterate_linear_inram;
    4c86:	49 c7 47 20 00 00 00 	movq   $0x0,0x20(%r15)
    4c8d:	00 
	md->kvs_linear = kvs;
    4c8e:	4c 89 78 18          	mov    %r15,0x18(%rax)
    4c92:	e9 1b ff ff ff       	jmpq   4bb2 <kvs_create_linear_inram+0x32>
    4c97:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    4c9e:	00 00 

0000000000004ca0 <issue_work>:
	bio_endio(bio);
}

/* Calls worker function with data in worker. */
static void issue_work(struct work_struct *ws)
{
    4ca0:	e8 00 00 00 00       	callq  4ca5 <issue_work+0x5>
    4ca5:	55                   	push   %rbp
    4ca6:	48 89 e5             	mov    %rsp,%rbp
    4ca9:	41 56                	push   %r14
    4cab:	41 55                	push   %r13
    4cad:	41 54                	push   %r12
    4caf:	53                   	push   %rbx
    4cb0:	48 83 ec 40          	sub    $0x40,%rsp
	struct check_work *data = container_of(ws, struct check_work, worker);
	struct check_io *io = (struct check_io *)data->io;
    4cb4:	4c 8b 67 20          	mov    0x20(%rdi),%r12
{
    4cb8:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    4cbf:	00 00 
    4cc1:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    4cc5:	31 c0                	xor    %eax,%eax

	mempool_free(data, io->dc->check_work_pool);
    4cc7:	49 8b 04 24          	mov    (%r12),%rax
    4ccb:	48 8b b0 10 04 00 00 	mov    0x410(%rax),%rsi
    4cd2:	e8 00 00 00 00       	callq  4cd7 <issue_work+0x37>

	check_endio(io->base_bio, io);
    4cd7:	4d 8b 6c 24 18       	mov    0x18(%r12),%r13
	if (bio->bi_status)
    4cdc:	41 80 7d 1a 00       	cmpb   $0x0,0x1a(%r13)
    4ce1:	0f 85 2e 01 00 00    	jne    4e15 <issue_work+0x175>
	dc = io->dc;
    4ce7:	49 8b 1c 24          	mov    (%r12),%rbx
	BUG_ON(!dc->check_corruption);
    4ceb:	80 bb 58 03 00 00 00 	cmpb   $0x0,0x358(%rbx)
    4cf2:	0f 84 8d 01 00 00    	je     4e85 <issue_work+0x1e5>
	r = compute_hash_bio(dc->desc_table, bio, hash);
    4cf8:	48 8b bb b0 01 00 00 	mov    0x1b0(%rbx),%rdi
    4cff:	48 8d 55 b8          	lea    -0x48(%rbp),%rdx
    4d03:	4c 89 ee             	mov    %r13,%rsi
    4d06:	e8 00 00 00 00       	callq  4d0b <issue_work+0x6b>
	if (r)
    4d0b:	85 c0                	test   %eax,%eax
    4d0d:	0f 85 02 01 00 00    	jne    4e15 <issue_work+0x175>
	r = dc->kvs_hash_pbn->kvs_lookup(dc->kvs_hash_pbn, hash,
    4d13:	48 8b bb c8 03 00 00 	mov    0x3c8(%rbx),%rdi
    4d1a:	8b 93 f0 03 00 00    	mov    0x3f0(%rbx),%edx
    4d20:	4c 8d 45 a4          	lea    -0x5c(%rbp),%r8
    4d24:	48 8d 4d a8          	lea    -0x58(%rbp),%rcx
    4d28:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
    4d2c:	48 8b 47 10          	mov    0x10(%rdi),%rax
    4d30:	e8 00 00 00 00       	callq  4d35 <issue_work+0x95>
	if (r < 0)
    4d35:	85 c0                	test   %eax,%eax
    4d37:	0f 88 d8 00 00 00    	js     4e15 <issue_work+0x175>
	if (r == 0)
    4d3d:	0f 84 fe 00 00 00    	je     4e41 <issue_work+0x1a1>
	if (io->pbn == hashpbn_value.pbn)
    4d43:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
    4d47:	49 39 44 24 08       	cmp    %rax,0x8(%r12)
    4d4c:	0f 84 c3 00 00 00    	je     4e15 <issue_work+0x175>
	if (!dc->fec)
    4d52:	80 bb 59 03 00 00 00 	cmpb   $0x0,0x359(%rbx)
    4d59:	0f 84 a9 00 00 00    	je     4e08 <issue_work+0x168>
	r = dc->kvs_lbn_pbn->kvs_delete(dc->kvs_lbn_pbn,
    4d5f:	48 8b bb d8 03 00 00 	mov    0x3d8(%rbx),%rdi
					(void *)&(io->lbn), sizeof(io->lbn));
    4d66:	4d 8d 74 24 10       	lea    0x10(%r12),%r14
	r = dc->kvs_lbn_pbn->kvs_delete(dc->kvs_lbn_pbn,
    4d6b:	ba 08 00 00 00       	mov    $0x8,%edx
    4d70:	4c 89 f6             	mov    %r14,%rsi
    4d73:	48 8b 47 08          	mov    0x8(%rdi),%rax
    4d77:	e8 00 00 00 00       	callq  4d7c <issue_work+0xdc>
	if (r < 0)
    4d7c:	85 c0                	test   %eax,%eax
    4d7e:	0f 88 84 00 00 00    	js     4e08 <issue_work+0x168>
	dc->mdops->dec_refcount(dc->bmd, io->pbn);
    4d84:	48 8b 83 b8 03 00 00 	mov    0x3b8(%rbx),%rax
    4d8b:	49 8b 74 24 08       	mov    0x8(%r12),%rsi
    4d90:	48 8b bb c0 03 00 00 	mov    0x3c0(%rbx),%rdi
    4d97:	48 8b 40 30          	mov    0x30(%rax),%rax
    4d9b:	e8 00 00 00 00       	callq  4da0 <issue_work+0x100>
	lbnpbn_value.pbn = hashpbn_value.pbn;
    4da0:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
	r = dc->mdops->inc_refcount(dc->bmd, lbnpbn_value.pbn);
    4da4:	48 8b 83 b8 03 00 00 	mov    0x3b8(%rbx),%rax
    4dab:	48 8b bb c0 03 00 00 	mov    0x3c0(%rbx),%rdi
	lbnpbn_value.pbn = hashpbn_value.pbn;
    4db2:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
	r = dc->mdops->inc_refcount(dc->bmd, lbnpbn_value.pbn);
    4db6:	48 8b 40 28          	mov    0x28(%rax),%rax
    4dba:	e8 00 00 00 00       	callq  4dbf <issue_work+0x11f>
	if (r < 0)
    4dbf:	85 c0                	test   %eax,%eax
    4dc1:	78 45                	js     4e08 <issue_work+0x168>
	r = dc->kvs_lbn_pbn->kvs_insert(dc->kvs_lbn_pbn,
    4dc3:	48 8b bb d8 03 00 00 	mov    0x3d8(%rbx),%rdi
    4dca:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    4dd0:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    4dd4:	ba 08 00 00 00       	mov    $0x8,%edx
    4dd9:	4c 89 f6             	mov    %r14,%rsi
    4ddc:	48 8b 47 18          	mov    0x18(%rdi),%rax
    4de0:	e8 00 00 00 00       	callq  4de5 <issue_work+0x145>
	if (r < 0) {
    4de5:	85 c0                	test   %eax,%eax
    4de7:	0f 89 8e 00 00 00    	jns    4e7b <issue_work+0x1db>
		dc->mdops->dec_refcount(dc->bmd, lbnpbn_value.pbn);
    4ded:	48 8b 83 b8 03 00 00 	mov    0x3b8(%rbx),%rax
    4df4:	48 8b bb c0 03 00 00 	mov    0x3c0(%rbx),%rdi
    4dfb:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
    4dff:	48 8b 40 30          	mov    0x30(%rax),%rax
    4e03:	e8 00 00 00 00       	callq  4e08 <issue_work+0x168>
	bio->bi_status = BLK_STS_IOERR;
    4e08:	41 c6 45 1a 0a       	movb   $0xa,0x1a(%r13)
	dc->corrupted_blocks++;
    4e0d:	48 83 83 68 03 00 00 	addq   $0x1,0x368(%rbx)
    4e14:	01 
	kfree(io);
    4e15:	4c 89 e7             	mov    %r12,%rdi
    4e18:	e8 00 00 00 00       	callq  4e1d <issue_work+0x17d>
	bio_endio(bio);
    4e1d:	4c 89 ef             	mov    %r13,%rdi
    4e20:	e8 00 00 00 00       	callq  4e25 <issue_work+0x185>
}
    4e25:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
    4e29:	65 48 33 04 25 28 00 	xor    %gs:0x28,%rax
    4e30:	00 00 
    4e32:	75 53                	jne    4e87 <issue_work+0x1e7>
    4e34:	48 83 c4 40          	add    $0x40,%rsp
    4e38:	5b                   	pop    %rbx
    4e39:	41 5c                	pop    %r12
    4e3b:	41 5d                	pop    %r13
    4e3d:	41 5e                	pop    %r14
    4e3f:	5d                   	pop    %rbp
    4e40:	c3                   	retq   
	if (!dc->fec)
    4e41:	80 bb 59 03 00 00 00 	cmpb   $0x0,0x359(%rbx)
    4e48:	74 be                	je     4e08 <issue_work+0x168>
	hashpbn_value.pbn = io->pbn;
    4e4a:	49 8b 44 24 08       	mov    0x8(%r12),%rax
	r = dc->kvs_hash_pbn->kvs_insert(dc->kvs_hash_pbn,
    4e4f:	48 8b bb c8 03 00 00 	mov    0x3c8(%rbx),%rdi
    4e56:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    4e5c:	8b 93 f0 03 00 00    	mov    0x3f0(%rbx),%edx
    4e62:	48 8d 4d a8          	lea    -0x58(%rbp),%rcx
    4e66:	48 8d 75 b8          	lea    -0x48(%rbp),%rsi
	hashpbn_value.pbn = io->pbn;
    4e6a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
	r = dc->kvs_hash_pbn->kvs_insert(dc->kvs_hash_pbn,
    4e6e:	48 8b 47 18          	mov    0x18(%rdi),%rax
    4e72:	e8 00 00 00 00       	callq  4e77 <issue_work+0x1d7>
	if (r < 0)
    4e77:	85 c0                	test   %eax,%eax
    4e79:	78 8d                	js     4e08 <issue_work+0x168>
	dc->fec_fixed++;
    4e7b:	48 83 83 60 03 00 00 	addq   $0x1,0x360(%rbx)
    4e82:	01 
    4e83:	eb 88                	jmp    4e0d <issue_work+0x16d>
    4e85:	0f 0b                	ud2    
}
    4e87:	e8 00 00 00 00       	callq  4e8c <issue_work+0x1ec>
    4e8c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000004e90 <dedup_check_endio>:

/* Allocates and initializes workqueue and regsiters function for work. */
void dedup_check_endio(struct bio *clone)
{
    4e90:	e8 00 00 00 00       	callq  4e95 <dedup_check_endio+0x5>
    4e95:	55                   	push   %rbp
    4e96:	48 89 e5             	mov    %rsp,%rbp
    4e99:	53                   	push   %rbx
	struct check_work *data;
	struct check_io *io;

	io = clone->bi_private;
    4e9a:	48 8b 5f 68          	mov    0x68(%rdi),%rbx

	/* deallocate clone created before disk read */
	bio_put(clone);
    4e9e:	e8 00 00 00 00       	callq  4ea3 <dedup_check_endio+0x13>

	/*
	 * initialize a worker for handling the FEC.
	 * Directly calling check_work would panic
	 */
	data = mempool_alloc(io->dc->check_work_pool, GFP_NOIO);
    4ea3:	48 8b 03             	mov    (%rbx),%rax
    4ea6:	be 00 00 60 00       	mov    $0x600000,%esi
    4eab:	48 8b b8 10 04 00 00 	mov    0x410(%rax),%rdi
    4eb2:	e8 00 00 00 00       	callq  4eb7 <dedup_check_endio+0x27>
	if (!data) {
    4eb7:	48 85 c0             	test   %rax,%rax
    4eba:	74 3c                	je     4ef8 <dedup_check_endio+0x68>
		return;
	}

	data->io = io;

	INIT_WORK(&(data->worker), issue_work);
    4ebc:	48 8d 50 08          	lea    0x8(%rax),%rdx
    4ec0:	48 b9 e0 ff ff ff 0f 	movabs $0xfffffffe0,%rcx
    4ec7:	00 00 00 
	data->io = io;
    4eca:	48 89 58 20          	mov    %rbx,0x20(%rax)
	INIT_WORK(&(data->worker), issue_work);
    4ece:	48 89 08             	mov    %rcx,(%rax)
    4ed1:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    4ed8:	00 
 * it can be processed by another CPU.
 */
static inline bool queue_work(struct workqueue_struct *wq,
			      struct work_struct *work)
{
	return queue_work_on(WORK_CPU_UNBOUND, wq, work);
    4ed9:	bf 00 20 00 00       	mov    $0x2000,%edi
    4ede:	48 89 50 08          	mov    %rdx,0x8(%rax)
	struct list_head name = LIST_HEAD_INIT(name)

static inline void INIT_LIST_HEAD(struct list_head *list)
{
	WRITE_ONCE(list->next, list);
	list->prev = list;
    4ee2:	48 89 50 10          	mov    %rdx,0x10(%rax)

	queue_work(io->dc->workqueue, &(data->worker));
    4ee6:	48 8b 13             	mov    (%rbx),%rdx
    4ee9:	48 8b 72 20          	mov    0x20(%rdx),%rsi
    4eed:	48 89 c2             	mov    %rax,%rdx
    4ef0:	e8 00 00 00 00       	callq  4ef5 <dedup_check_endio+0x65>
}
    4ef5:	5b                   	pop    %rbx
    4ef6:	5d                   	pop    %rbp
    4ef7:	c3                   	retq   
		bio_endio(io->base_bio);
    4ef8:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
    4efc:	e8 00 00 00 00       	callq  4f01 <dedup_check_endio+0x71>
		kfree(io);
    4f01:	48 89 df             	mov    %rbx,%rdi
    4f04:	e8 00 00 00 00       	callq  4f09 <dedup_check_endio+0x79>
}
    4f09:	5b                   	pop    %rbx
    4f0a:	5d                   	pop    %rbp
    4f0b:	c3                   	retq   
    4f0c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000004f10 <my_endio>:

	memmove(dest_page_vaddr, src_page_vaddr, DMD_IO_SIZE);
}

static void my_endio(struct bio *clone)
{
    4f10:	e8 00 00 00 00       	callq  4f15 <my_endio+0x5>
    4f15:	55                   	push   %rbp
    4f16:	48 89 e5             	mov    %rsp,%rbp
    4f19:	53                   	push   %rbx
	/*if (!error && !bio_flagged(clone, BIO_UPTODATE))
		error = -EIO;*/

	/* free the processed pages */
	if (rw == WRITE || rw == READ || rw == REQ_OP_WRITE) {
		bv = clone->bi_io_vec;
    4f1a:	48 8b 87 a0 00 00 00 	mov    0xa0(%rdi),%rax
{
    4f21:	48 89 fb             	mov    %rdi,%rbx
		if (bv->bv_page) {
    4f24:	48 83 38 00          	cmpq   $0x0,(%rax)
    4f28:	74 07                	je     4f31 <my_endio+0x21>
			//DMINFO("\nFreeing %llx",(unsigned long)page_address(bv->bv_page));
			//free_pages((unsigned long)page_address(bv->bv_page), 0);
			bv->bv_page = NULL;
    4f2a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
		}
	}

	orig = clone->bi_private;
    4f31:	48 8b 7b 68          	mov    0x68(%rbx),%rdi
	orig->bi_status = BLK_STS_OK;
    4f35:	c6 47 1a 00          	movb   $0x0,0x1a(%rdi)
	bio_endio(orig);
    4f39:	e8 00 00 00 00       	callq  4f3e <my_endio+0x2e>

	bio_put(clone);
    4f3e:	48 89 df             	mov    %rbx,%rdi
    4f41:	e8 00 00 00 00       	callq  4f46 <my_endio+0x36>
}
    4f46:	5b                   	pop    %rbx
    4f47:	5d                   	pop    %rbp
    4f48:	c3                   	retq   
    4f49:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000004f50 <create_bio>:
 * Returns NULL in failure.
 * Returns the valid pointer to struct bio on success.
 */
static struct bio *create_bio(struct dedup_config *dc,
			      struct bio *bio)
{
    4f50:	e8 00 00 00 00       	callq  4f55 <create_bio+0x5>
    4f55:	55                   	push   %rbp
	return bio_alloc_bioset(gfp_mask, nr_iovecs, &fs_bio_set);
}

static inline struct bio *bio_kmalloc(gfp_t gfp_mask, unsigned int nr_iovecs)
{
	return bio_alloc_bioset(gfp_mask, nr_iovecs, NULL);
    4f56:	31 d2                	xor    %edx,%edx
    4f58:	48 89 e5             	mov    %rsp,%rbp
    4f5b:	41 55                	push   %r13
    4f5d:	41 54                	push   %r12
    4f5f:	53                   	push   %rbx
    4f60:	49 89 fd             	mov    %rdi,%r13
    4f63:	49 89 f4             	mov    %rsi,%r12
    4f66:	bf 00 00 60 00       	mov    $0x600000,%edi
    4f6b:	be 01 00 00 00       	mov    $0x1,%esi
    4f70:	e8 00 00 00 00       	callq  4f75 <create_bio+0x25>
	struct bio *clone;
	struct page *page;

	clone = bio_kmalloc(GFP_NOIO, 1);
	if (!clone)
    4f75:	48 85 c0             	test   %rax,%rax
    4f78:	48 89 c3             	mov    %rax,%rbx
    4f7b:	74 66                	je     4fe3 <create_bio+0x93>
		goto out;
	clone->bi_disk = bio->bi_disk;
    4f7d:	49 8b 44 24 08       	mov    0x8(%r12),%rax
	(void) sector_div(to_be_lbn, dc->sectors_per_block);
    4f82:	31 d2                	xor    %edx,%edx
extern struct page *alloc_pages_current(gfp_t gfp_mask, unsigned order);

static inline struct page *
alloc_pages(gfp_t gfp_mask, unsigned int order)
{
	return alloc_pages_current(gfp_mask, order);
    4f84:	31 f6                	xor    %esi,%esi
    4f86:	bf 00 00 60 00       	mov    $0x600000,%edi
	clone->bi_disk = bio->bi_disk;
    4f8b:	48 89 43 08          	mov    %rax,0x8(%rbx)
	clone->bi_partno = bio->bi_partno;
    4f8f:	41 0f b6 44 24 1b    	movzbl 0x1b(%r12),%eax
    4f95:	88 43 1b             	mov    %al,0x1b(%rbx)
	clone->bi_opf = bio->bi_opf;
    4f98:	41 8b 44 24 10       	mov    0x10(%r12),%eax
    4f9d:	89 43 10             	mov    %eax,0x10(%rbx)
	(void) sector_div(to_be_lbn, dc->sectors_per_block);
    4fa0:	41 8b 4d 14          	mov    0x14(%r13),%ecx
    4fa4:	49 8b 44 24 28       	mov    0x28(%r12),%rax

	clone->bi_iter.bi_sector = compute_sector(bio, dc);
	clone->bi_private = bio;  /* for later completion */
    4fa9:	4c 89 63 68          	mov    %r12,0x68(%rbx)
	clone->bi_end_io = my_endio;
    4fad:	48 c7 43 60 00 00 00 	movq   $0x0,0x60(%rbx)
    4fb4:	00 
	(void) sector_div(to_be_lbn, dc->sectors_per_block);
    4fb5:	48 f7 f1             	div    %rcx
	to_be_lbn *= dc->sectors_per_block;
    4fb8:	48 0f af c8          	imul   %rax,%rcx
	clone->bi_iter.bi_sector = compute_sector(bio, dc);
    4fbc:	48 89 4b 28          	mov    %rcx,0x28(%rbx)
    4fc0:	e8 00 00 00 00       	callq  4fc5 <create_bio+0x75>

	page = alloc_pages(GFP_NOIO, 0);
        //DMINFO("\nallocated page crete bio %llx",(unsigned long)page_address(page));

	if (!page)
    4fc5:	48 85 c0             	test   %rax,%rax
    4fc8:	49 89 c4             	mov    %rax,%r12
    4fcb:	74 40                	je     500d <create_bio+0xbd>
		goto bad_putbio;

	if (!bio_add_page(clone, page, DMD_IO_SIZE, 0))
    4fcd:	31 c9                	xor    %ecx,%ecx
    4fcf:	ba 00 10 00 00       	mov    $0x1000,%edx
    4fd4:	48 89 c6             	mov    %rax,%rsi
    4fd7:	48 89 df             	mov    %rbx,%rdi
    4fda:	e8 00 00 00 00       	callq  4fdf <create_bio+0x8f>
    4fdf:	85 c0                	test   %eax,%eax
    4fe1:	74 0a                	je     4fed <create_bio+0x9d>
	//DMINFO("Assigning clone == NULL");
	clone = NULL;

out:
	return clone;
}
    4fe3:	48 89 d8             	mov    %rbx,%rax
    4fe6:	5b                   	pop    %rbx
    4fe7:	41 5c                	pop    %r12
    4fe9:	41 5d                	pop    %r13
    4feb:	5d                   	pop    %rbp
    4fec:	c3                   	retq   
    4fed:	4c 89 e7             	mov    %r12,%rdi
    4ff0:	48 2b 3d 00 00 00 00 	sub    0x0(%rip),%rdi        # 4ff7 <create_bio+0xa7>
	free_pages((unsigned long) page_address(page), 0);
    4ff7:	31 f6                	xor    %esi,%esi
    4ff9:	48 c1 ff 06          	sar    $0x6,%rdi
    4ffd:	48 c1 e7 0c          	shl    $0xc,%rdi
    5001:	48 03 3d 00 00 00 00 	add    0x0(%rip),%rdi        # 5008 <create_bio+0xb8>
    5008:	e8 00 00 00 00       	callq  500d <create_bio+0xbd>
	bio_put(clone);
    500d:	48 89 df             	mov    %rbx,%rdi
	clone = NULL;
    5010:	31 db                	xor    %ebx,%ebx
	bio_put(clone);
    5012:	e8 00 00 00 00       	callq  5017 <create_bio+0xc7>
	return clone;
    5017:	eb ca                	jmp    4fe3 <create_bio+0x93>
    5019:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000005020 <merge_data.isra.3>:
static int merge_data(struct dedup_config *dc, struct page *page,
    5020:	e8 00 00 00 00       	callq  5025 <merge_data.isra.3+0x5>
    5025:	55                   	push   %rbp
	position = sector_div(bi_sector, dc->sectors_per_block);
    5026:	89 ff                	mov    %edi,%edi
static int merge_data(struct dedup_config *dc, struct page *page,
    5028:	48 89 e5             	mov    %rsp,%rbp
    502b:	41 57                	push   %r15
    502d:	41 56                	push   %r14
    502f:	41 55                	push   %r13
    5031:	41 54                	push   %r12
    5033:	49 89 d5             	mov    %rdx,%r13
    5036:	53                   	push   %rbx
    5037:	48 83 ec 08          	sub    $0x8,%rsp
	position = sector_div(bi_sector, dc->sectors_per_block);
    503b:	48 8b 42 28          	mov    0x28(%rdx),%rax
    503f:	31 d2                	xor    %edx,%edx
    5041:	48 f7 f7             	div    %rdi
	if (!page || !bio_page(bio)) {
    5044:	48 85 f6             	test   %rsi,%rsi
    5047:	0f 84 5a 01 00 00    	je     51a7 <merge_data.isra.3+0x187>
    504d:	41 8b 45 48          	mov    0x48(%r13),%eax
    5051:	49 8b bd a0 00 00 00 	mov    0xa0(%r13),%rdi
    5058:	49 89 c7             	mov    %rax,%r15
    505b:	48 c1 e0 04          	shl    $0x4,%rax
    505f:	48 83 3c 07 00       	cmpq   $0x0,(%rdi,%rax,1)
    5064:	0f 84 3d 01 00 00    	je     51a7 <merge_data.isra.3+0x187>
    506a:	48 89 f1             	mov    %rsi,%rcx
    506d:	48 2b 0d 00 00 00 00 	sub    0x0(%rip),%rcx        # 5074 <merge_data.isra.3+0x54>
    5074:	48 8b 05 00 00 00 00 	mov    0x0(%rip),%rax        # 507b <merge_data.isra.3+0x5b>
	dest_page_vaddr = page_address(page) + to_bytes(position);
    507b:	48 63 d2             	movslq %edx,%rdx
	bio_for_each_segment(bvec, bio, iter) {
    507e:	45 8b 65 44          	mov    0x44(%r13),%r12d
    5082:	45 8b 75 50          	mov    0x50(%r13),%r14d
	return (n >> SECTOR_SHIFT);
}

static inline unsigned long to_bytes(sector_t n)
{
	return (n << SECTOR_SHIFT);
    5086:	48 c1 e2 09          	shl    $0x9,%rdx
    508a:	48 c1 f9 06          	sar    $0x6,%rcx
    508e:	48 c1 e1 0c          	shl    $0xc,%rcx
    5092:	48 01 c8             	add    %rcx,%rax
	dest_page_vaddr = page_address(page) + to_bytes(position);
    5095:	48 8d 0c 10          	lea    (%rax,%rdx,1),%rcx
	bio_for_each_segment(bvec, bio, iter) {
    5099:	45 85 e4             	test   %r12d,%r12d
    509c:	0f 84 d4 00 00 00    	je     5176 <merge_data.isra.3+0x156>
    50a2:	45 89 f9             	mov    %r15d,%r9d
    50a5:	49 c1 e1 04          	shl    $0x4,%r9
    50a9:	4a 8d 04 0f          	lea    (%rdi,%r9,1),%rax
		src_page_vaddr = page_address(bio_iter_page(bio, iter)) + bio_iter_offset(bio, iter);
    50ad:	44 89 f7             	mov    %r14d,%edi
	bio_for_each_segment(bvec, bio, iter) {
    50b0:	4c 89 4d d0          	mov    %r9,-0x30(%rbp)
    50b4:	8b 58 08             	mov    0x8(%rax),%ebx
    50b7:	48 8b 30             	mov    (%rax),%rsi
    50ba:	44 29 f3             	sub    %r14d,%ebx
    50bd:	44 39 e3             	cmp    %r12d,%ebx
    50c0:	41 0f 47 dc          	cmova  %r12d,%ebx
    50c4:	48 2b 35 00 00 00 00 	sub    0x0(%rip),%rsi        # 50cb <merge_data.isra.3+0xab>
		src_page_vaddr = page_address(bio_iter_page(bio, iter)) + bio_iter_offset(bio, iter);
    50cb:	03 78 0c             	add    0xc(%rax),%edi
		memmove(dest_page_vaddr, src_page_vaddr, bio_iter_len(bio, iter));
    50ce:	89 da                	mov    %ebx,%edx
    50d0:	48 c1 fe 06          	sar    $0x6,%rsi
    50d4:	48 c1 e6 0c          	shl    $0xc,%rsi
    50d8:	48 03 35 00 00 00 00 	add    0x0(%rip),%rsi        # 50df <merge_data.isra.3+0xbf>
		src_page_vaddr = page_address(bio_iter_page(bio, iter)) + bio_iter_offset(bio, iter);
    50df:	48 01 fe             	add    %rdi,%rsi
	return __builtin_memmove(p, q, size);
    50e2:	48 89 cf             	mov    %rcx,%rdi
    50e5:	e8 00 00 00 00       	callq  50ea <merge_data.isra.3+0xca>
		dest_page_vaddr += bio_iter_len(bio, iter);
    50ea:	49 8b bd a0 00 00 00 	mov    0xa0(%r13),%rdi
    50f1:	4c 8b 4d d0          	mov    -0x30(%rbp),%r9
    50f5:	48 89 c1             	mov    %rax,%rcx
	return bio_op(bio) == REQ_OP_DISCARD ||
    50f8:	41 0f b6 45 10       	movzbl 0x10(%r13),%eax
    50fd:	42 8b 54 0f 08       	mov    0x8(%rdi,%r9,1),%edx
    5102:	89 d6                	mov    %edx,%esi
    5104:	44 29 f6             	sub    %r14d,%esi
    5107:	44 39 e6             	cmp    %r12d,%esi
    510a:	49 0f 47 f4          	cmova  %r12,%rsi
    510e:	48 01 f1             	add    %rsi,%rcx
    5111:	83 f8 0a             	cmp    $0xa,%eax
    5114:	76 49                	jbe    515f <merge_data.isra.3+0x13f>
    5116:	44 39 e3             	cmp    %r12d,%ebx
    5119:	77 6c                	ja     5187 <merge_data.isra.3+0x167>
	while (bytes) {
    511b:	85 db                	test   %ebx,%ebx
    511d:	0f 84 76 ff ff ff    	je     5099 <merge_data.isra.3+0x79>
		unsigned len = min(bytes, iter_len);
    5123:	44 39 e3             	cmp    %r12d,%ebx
    5126:	44 89 e0             	mov    %r12d,%eax
		unsigned iter_len = bvec_iter_len(bv, *iter);
    5129:	89 d6                	mov    %edx,%esi
		unsigned len = min(bytes, iter_len);
    512b:	0f 46 c3             	cmovbe %ebx,%eax
		unsigned iter_len = bvec_iter_len(bv, *iter);
    512e:	44 29 f6             	sub    %r14d,%esi
		unsigned len = min(bytes, iter_len);
    5131:	39 f0                	cmp    %esi,%eax
    5133:	0f 47 c6             	cmova  %esi,%eax
		iter->bi_bvec_done += len;
    5136:	41 01 c6             	add    %eax,%r14d
		bytes -= len;
    5139:	29 c3                	sub    %eax,%ebx
		iter->bi_size -= len;
    513b:	41 29 c4             	sub    %eax,%r12d
		if (iter->bi_bvec_done == __bvec_iter_bvec(bv, *iter)->bv_len) {
    513e:	44 39 f2             	cmp    %r14d,%edx
    5141:	75 07                	jne    514a <merge_data.isra.3+0x12a>
			iter->bi_idx++;
    5143:	41 83 c7 01          	add    $0x1,%r15d
			iter->bi_bvec_done = 0;
    5147:	45 31 f6             	xor    %r14d,%r14d
	while (bytes) {
    514a:	85 db                	test   %ebx,%ebx
    514c:	0f 84 47 ff ff ff    	je     5099 <merge_data.isra.3+0x79>
    5152:	44 89 f8             	mov    %r15d,%eax
    5155:	48 c1 e0 04          	shl    $0x4,%rax
    5159:	8b 54 07 08          	mov    0x8(%rdi,%rax,1),%edx
    515d:	eb c4                	jmp    5123 <merge_data.isra.3+0x103>
	       bio_op(bio) == REQ_OP_WRITE_SAME ||
    515f:	be a8 06 00 00       	mov    $0x6a8,%esi
    5164:	48 0f a3 c6          	bt     %rax,%rsi
    5168:	73 ac                	jae    5116 <merge_data.isra.3+0xf6>
		iter->bi_size -= bytes;
    516a:	41 29 dc             	sub    %ebx,%r12d
	bio_for_each_segment(bvec, bio, iter) {
    516d:	45 85 e4             	test   %r12d,%r12d
    5170:	0f 85 2c ff ff ff    	jne    50a2 <merge_data.isra.3+0x82>
	int position, err = 0;
    5176:	31 c0                	xor    %eax,%eax
}
    5178:	48 83 c4 08          	add    $0x8,%rsp
    517c:	5b                   	pop    %rbx
    517d:	41 5c                	pop    %r12
    517f:	41 5d                	pop    %r13
    5181:	41 5e                	pop    %r14
    5183:	41 5f                	pop    %r15
    5185:	5d                   	pop    %rbp
    5186:	c3                   	retq   
	if (WARN_ONCE(bytes > iter->bi_size,
    5187:	80 3d 00 00 00 00 00 	cmpb   $0x0,0x0(%rip)        # 518e <merge_data.isra.3+0x16e>
    518e:	75 e6                	jne    5176 <merge_data.isra.3+0x156>
    5190:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    5197:	c6 05 00 00 00 00 01 	movb   $0x1,0x0(%rip)        # 519e <merge_data.isra.3+0x17e>
    519e:	e8 00 00 00 00       	callq  51a3 <merge_data.isra.3+0x183>
    51a3:	0f 0b                	ud2    
    51a5:	eb cf                	jmp    5176 <merge_data.isra.3+0x156>
		err = -EINVAL;
    51a7:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    51ac:	eb ca                	jmp    5178 <merge_data.isra.3+0x158>
    51ae:	66 90                	xchg   %ax,%ax

00000000000051b0 <prepare_bio_on_write>:
 *
 * Returns ERR_PTR in failure.
 * Returns the valid pointer to struct bio on success.
 */
struct bio *prepare_bio_on_write(struct dedup_config *dc, struct bio *bio)
{
    51b0:	e8 00 00 00 00       	callq  51b5 <prepare_bio_on_write+0x5>
    51b5:	55                   	push   %rbp
	(void) sector_div(to_be_lbn, dc->sectors_per_block);
    51b6:	31 d2                	xor    %edx,%edx
{
    51b8:	48 89 e5             	mov    %rsp,%rbp
    51bb:	41 57                	push   %r15
    51bd:	41 56                	push   %r14
    51bf:	41 55                	push   %r13
    51c1:	41 54                	push   %r12
    51c3:	49 89 fd             	mov    %rdi,%r13
    51c6:	53                   	push   %rbx
	//DMINFO("\nEntered prepare bio on write");
	lbn = compute_sector(bio, dc);
	(void) sector_div(lbn, dc->sectors_per_block);

	/* check for old or new lbn and fetch the appropriate pbn */
	r = dc->kvs_lbn_pbn->kvs_lookup(dc->kvs_lbn_pbn, (void *)&lbn,
    51c7:	4c 8d 85 6c ff ff ff 	lea    -0x94(%rbp),%r8
{
    51ce:	48 89 f3             	mov    %rsi,%rbx
    51d1:	48 83 ec 70          	sub    $0x70,%rsp
	(void) sector_div(to_be_lbn, dc->sectors_per_block);
    51d5:	8b 4f 14             	mov    0x14(%rdi),%ecx
	r = dc->kvs_lbn_pbn->kvs_lookup(dc->kvs_lbn_pbn, (void *)&lbn,
    51d8:	48 8b bf d8 03 00 00 	mov    0x3d8(%rdi),%rdi
{
    51df:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    51e6:	00 00 
    51e8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    51ec:	31 c0                	xor    %eax,%eax
	(void) sector_div(to_be_lbn, dc->sectors_per_block);
    51ee:	48 8b 46 28          	mov    0x28(%rsi),%rax
	r = dc->kvs_lbn_pbn->kvs_lookup(dc->kvs_lbn_pbn, (void *)&lbn,
    51f2:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
	(void) sector_div(to_be_lbn, dc->sectors_per_block);
    51f9:	48 f7 f1             	div    %rcx
	(void) sector_div(lbn, dc->sectors_per_block);
    51fc:	31 d2                	xor    %edx,%edx
	to_be_lbn *= dc->sectors_per_block;
    51fe:	48 0f af c1          	imul   %rcx,%rax
	(void) sector_div(lbn, dc->sectors_per_block);
    5202:	48 f7 f1             	div    %rcx
	r = dc->kvs_lbn_pbn->kvs_lookup(dc->kvs_lbn_pbn, (void *)&lbn,
    5205:	48 8d 8d 78 ff ff ff 	lea    -0x88(%rbp),%rcx
    520c:	ba 08 00 00 00       	mov    $0x8,%edx
	(void) sector_div(lbn, dc->sectors_per_block);
    5211:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
	r = dc->kvs_lbn_pbn->kvs_lookup(dc->kvs_lbn_pbn, (void *)&lbn,
    5218:	48 8b 47 10          	mov    0x10(%rdi),%rax
    521c:	e8 00 00 00 00       	callq  5221 <prepare_bio_on_write+0x71>
					sizeof(lbn), (void *)&lbnpbn_value, &vsize);
	if (r == -ENODATA)
    5221:	83 f8 c3             	cmp    $0xffffffc3,%eax
    5224:	0f 84 21 01 00 00    	je     534b <prepare_bio_on_write+0x19b>
		clone = prepare_bio_without_pbn(dc, bio);
	else if (r == 0)
    522a:	85 c0                	test   %eax,%eax
		clone = prepare_bio_with_pbn(dc, bio,
					     lbnpbn_value.pbn * dc->sectors_per_block);
	else
		return ERR_PTR(r);
    522c:	4c 63 e0             	movslq %eax,%r12
	else if (r == 0)
    522f:	74 25                	je     5256 <prepare_bio_on_write+0xa6>
	//DMINFO("\nExiting prpare_bio_on_write");
	return clone;
}
    5231:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
    5235:	65 48 33 1c 25 28 00 	xor    %gs:0x28,%rbx
    523c:	00 00 
    523e:	4c 89 e0             	mov    %r12,%rax
    5241:	0f 85 e5 01 00 00    	jne    542c <prepare_bio_on_write+0x27c>
    5247:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
    524b:	5b                   	pop    %rbx
    524c:	41 5c                	pop    %r12
    524e:	41 5d                	pop    %r13
    5250:	41 5e                	pop    %r14
    5252:	41 5f                	pop    %r15
    5254:	5d                   	pop    %rbp
    5255:	c3                   	retq   
    5256:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 525d <prepare_bio_on_write+0xad>
    525d:	ba 10 00 00 00       	mov    $0x10,%edx
    5262:	be 00 00 60 00       	mov    $0x600000,%esi
					     lbnpbn_value.pbn * dc->sectors_per_block);
    5267:	4c 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%r15
    526e:	45 8b 65 14          	mov    0x14(%r13),%r12d
    5272:	e8 00 00 00 00       	callq  5277 <prepare_bio_on_write+0xc7>
	if (!pl)
    5277:	48 85 c0             	test   %rax,%rax
    527a:	49 89 c6             	mov    %rax,%r14
    527d:	0f 84 c0 00 00 00    	je     5343 <prepare_bio_on_write+0x193>
    5283:	31 f6                	xor    %esi,%esi
    5285:	bf 00 00 60 00       	mov    $0x600000,%edi
    528a:	e8 00 00 00 00       	callq  528f <prepare_bio_on_write+0xdf>
	if (!pl->page)
    528f:	48 85 c0             	test   %rax,%rax
	pl->page = alloc_pages(GFP_NOIO, 0);
    5292:	49 89 46 08          	mov    %rax,0x8(%r14)
	if (!pl->page)
    5296:	0f 84 9f 00 00 00    	je     533b <prepare_bio_on_write+0x18b>
	where.bdev = dc->data_dev->bdev;
    529c:	49 8b 45 00          	mov    0x0(%r13),%rax
	pl->next = NULL;
    52a0:	49 c7 06 00 00 00 00 	movq   $0x0,(%r14)
	return dm_io(&iorq, 1, &where, &error_bits);
    52a7:	48 8d 4d 80          	lea    -0x80(%rbp),%rcx
		clone = prepare_bio_with_pbn(dc, bio,
    52ab:	4d 0f af e7          	imul   %r15,%r12
	return dm_io(&iorq, 1, &where, &error_bits);
    52af:	48 8d 55 88          	lea    -0x78(%rbp),%rdx
    52b3:	48 8d 7d a0          	lea    -0x60(%rbp),%rdi
    52b7:	be 01 00 00 00       	mov    $0x1,%esi
	where.bdev = dc->data_dev->bdev;
    52bc:	48 8b 00             	mov    (%rax),%rax
	iorq.bi_op = REQ_OP_READ;
    52bf:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
    52c6:	00 
	iorq.mem.type = DM_IO_PAGE_LIST;
    52c7:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%rbp)
	iorq.mem.ptr.pl = pl;
    52ce:	4c 89 75 b0          	mov    %r14,-0x50(%rbp)
	where.sector = pbn;
    52d2:	4c 89 65 90          	mov    %r12,-0x70(%rbp)
	iorq.mem.offset = 0;
    52d6:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%rbp)
	where.bdev = dc->data_dev->bdev;
    52dd:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	where.count = dc->sectors_per_block;
    52e1:	41 8b 45 14          	mov    0x14(%r13),%eax
	iorq.notify.fn = NULL;
    52e5:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
    52ec:	00 
	where.count = dc->sectors_per_block;
    52ed:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	iorq.client = dc->io_client;
    52f1:	49 8b 85 70 03 00 00 	mov    0x370(%r13),%rax
    52f8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
	return dm_io(&iorq, 1, &where, &error_bits);
    52fc:	e8 00 00 00 00       	callq  5301 <prepare_bio_on_write+0x151>
    5301:	4c 63 e0             	movslq %eax,%r12
	if (r < 0)
    5304:	45 85 e4             	test   %r12d,%r12d
    5307:	0f 89 9d 00 00 00    	jns    53aa <prepare_bio_on_write+0x1fa>
    530d:	49 8b 7e 08          	mov    0x8(%r14),%rdi
    5311:	48 2b 3d 00 00 00 00 	sub    0x0(%rip),%rdi        # 5318 <prepare_bio_on_write+0x168>
	free_pages((unsigned long) page_address(pl->page), 0);
    5318:	31 f6                	xor    %esi,%esi
    531a:	48 c1 ff 06          	sar    $0x6,%rdi
    531e:	48 c1 e7 0c          	shl    $0xc,%rdi
    5322:	48 03 3d 00 00 00 00 	add    0x0(%rip),%rdi        # 5329 <prepare_bio_on_write+0x179>
    5329:	e8 00 00 00 00       	callq  532e <prepare_bio_on_write+0x17e>
	kfree(pl);
    532e:	4c 89 f7             	mov    %r14,%rdi
    5331:	e8 00 00 00 00       	callq  5336 <prepare_bio_on_write+0x186>
    5336:	e9 f6 fe ff ff       	jmpq   5231 <prepare_bio_on_write+0x81>
    533b:	4c 89 f7             	mov    %r14,%rdi
    533e:	e8 00 00 00 00       	callq  5343 <prepare_bio_on_write+0x193>
	struct bio *clone = NULL;
    5343:	45 31 e4             	xor    %r12d,%r12d
    5346:	e9 e6 fe ff ff       	jmpq   5231 <prepare_bio_on_write+0x81>
	clone = create_bio(dc, bio);
    534b:	48 89 de             	mov    %rbx,%rsi
    534e:	4c 89 ef             	mov    %r13,%rdi
    5351:	e8 fa fb ff ff       	callq  4f50 <create_bio>
	if (!clone)
    5356:	48 85 c0             	test   %rax,%rax
	clone = create_bio(dc, bio);
    5359:	49 89 c4             	mov    %rax,%r12
	if (!clone)
    535c:	74 e5                	je     5343 <prepare_bio_on_write+0x193>
extern int bio_uncopy_user(struct bio *);
void zero_fill_bio_iter(struct bio *bio, struct bvec_iter iter);

static inline void zero_fill_bio(struct bio *bio)
{
	zero_fill_bio_iter(bio, bio->bi_iter);
    535e:	ff 70 50             	pushq  0x50(%rax)
    5361:	ff 70 48             	pushq  0x48(%rax)
    5364:	48 89 c7             	mov    %rax,%rdi
    5367:	ff 70 40             	pushq  0x40(%rax)
    536a:	ff 70 38             	pushq  0x38(%rax)
    536d:	ff 70 30             	pushq  0x30(%rax)
    5370:	ff 70 28             	pushq  0x28(%rax)
    5373:	e8 00 00 00 00       	callq  5378 <prepare_bio_on_write+0x1c8>
	r = merge_data(dc, bio_page(clone), bio);
    5378:	41 8b 44 24 48       	mov    0x48(%r12),%eax
    537d:	41 8b 7d 14          	mov    0x14(%r13),%edi
    5381:	48 83 c4 30          	add    $0x30,%rsp
    5385:	48 89 da             	mov    %rbx,%rdx
    5388:	48 c1 e0 04          	shl    $0x4,%rax
    538c:	49 03 84 24 a0 00 00 	add    0xa0(%r12),%rax
    5393:	00 
    5394:	48 8b 30             	mov    (%rax),%rsi
    5397:	e8 84 fc ff ff       	callq  5020 <merge_data.isra.3>
		return ERR_PTR(r);
    539c:	48 63 d0             	movslq %eax,%rdx
    539f:	85 c0                	test   %eax,%eax
    53a1:	4c 0f 48 e2          	cmovs  %rdx,%r12
    53a5:	e9 87 fe ff ff       	jmpq   5231 <prepare_bio_on_write+0x81>
	r = merge_data(dc, pl->page, bio);
    53aa:	49 8b 76 08          	mov    0x8(%r14),%rsi
    53ae:	41 8b 7d 14          	mov    0x14(%r13),%edi
    53b2:	48 89 da             	mov    %rbx,%rdx
    53b5:	e8 66 fc ff ff       	callq  5020 <merge_data.isra.3>
    53ba:	4c 63 e0             	movslq %eax,%r12
	if (r < 0)
    53bd:	45 85 e4             	test   %r12d,%r12d
    53c0:	0f 88 47 ff ff ff    	js     530d <prepare_bio_on_write+0x15d>
	clone = create_bio(dc, bio);
    53c6:	48 89 de             	mov    %rbx,%rsi
    53c9:	4c 89 ef             	mov    %r13,%rdi
    53cc:	e8 7f fb ff ff       	callq  4f50 <create_bio>
	if (!clone)
    53d1:	48 85 c0             	test   %rax,%rax
	clone = create_bio(dc, bio);
    53d4:	49 89 c4             	mov    %rax,%r12
	if (!clone)
    53d7:	0f 84 30 ff ff ff    	je     530d <prepare_bio_on_write+0x15d>
	dest_page_vaddr = page_address(bio_page(clone));
    53dd:	8b 40 48             	mov    0x48(%rax),%eax
    53e0:	48 8b 0d 00 00 00 00 	mov    0x0(%rip),%rcx        # 53e7 <prepare_bio_on_write+0x237>
    53e7:	49 8b 76 08          	mov    0x8(%r14),%rsi
    53eb:	48 8b 15 00 00 00 00 	mov    0x0(%rip),%rdx        # 53f2 <prepare_bio_on_write+0x242>
    53f2:	48 c1 e0 04          	shl    $0x4,%rax
    53f6:	49 03 84 24 a0 00 00 	add    0xa0(%r12),%rax
    53fd:	00 
    53fe:	48 29 ce             	sub    %rcx,%rsi
    5401:	48 c1 fe 06          	sar    $0x6,%rsi
    5405:	48 c1 e6 0c          	shl    $0xc,%rsi
    5409:	48 01 d6             	add    %rdx,%rsi
    540c:	48 8b 38             	mov    (%rax),%rdi
    540f:	48 29 cf             	sub    %rcx,%rdi
    5412:	48 c1 ff 06          	sar    $0x6,%rdi
    5416:	48 c1 e7 0c          	shl    $0xc,%rdi
    541a:	48 01 d7             	add    %rdx,%rdi
    541d:	ba 00 10 00 00       	mov    $0x1000,%edx
    5422:	e8 00 00 00 00       	callq  5427 <prepare_bio_on_write+0x277>
    5427:	e9 e1 fe ff ff       	jmpq   530d <prepare_bio_on_write+0x15d>
}
    542c:	e8 00 00 00 00       	callq  5431 <prepare_bio_on_write+0x281>
    5431:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    5438:	00 00 00 
    543b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000005440 <hexStr2int>:
	if (err) {
		DMERR("Error in issue remap: %d.", err);
		return err;
	}
	return 0;
}
    5440:	e8 00 00 00 00       	callq  5445 <hexStr2int+0x5>
    5445:	55                   	push   %rbp

static uint64_t hexStr2int(char* s, int len) {
	int i = 0;
	char c = '0';
    5446:	85 f6                	test   %esi,%esi
}
    5448:	48 89 e5             	mov    %rsp,%rbp
	char c = '0';
    544b:	7e 5c                	jle    54a9 <hexStr2int+0x69>
    544d:	8d 46 ff             	lea    -0x1(%rsi),%eax
    5450:	48 8d 74 07 01       	lea    0x1(%rdi,%rax,1),%rsi
	int i = 0;
    5455:	31 c0                	xor    %eax,%eax
    5457:	eb 12                	jmp    546b <hexStr2int+0x2b>
    uint64_t x = 0;
    for(i = 0; i < len; ++i) {
        c = s[i];
        x <<= 4;
    5459:	83 ea 30             	sub    $0x30,%edx
    545c:	48 63 d2             	movslq %edx,%rdx
    545f:	48 01 d0             	add    %rdx,%rax
    5462:	48 83 c7 01          	add    $0x1,%rdi
	char c = '0';
    5466:	48 39 f7             	cmp    %rsi,%rdi
    5469:	74 29                	je     5494 <hexStr2int+0x54>
    uint64_t x = 0;
    546b:	0f be 17             	movsbl (%rdi),%edx
    for(i = 0; i < len; ++i) {
    546e:	48 c1 e0 04          	shl    $0x4,%rax
        c = s[i];
    5472:	8d 4a d0             	lea    -0x30(%rdx),%ecx
    5475:	80 f9 09             	cmp    $0x9,%cl
    5478:	76 df                	jbe    5459 <hexStr2int+0x19>
        if(c >='0' && c <= '9')
    547a:	8d 4a 9f             	lea    -0x61(%rdx),%ecx
    547d:	80 f9 05             	cmp    $0x5,%cl
    5480:	77 14                	ja     5496 <hexStr2int+0x56>
            x += (c - '0');
    5482:	83 ea 57             	sub    $0x57,%edx
    5485:	48 83 c7 01          	add    $0x1,%rdi
    5489:	48 63 d2             	movslq %edx,%rdx
    548c:	48 01 d0             	add    %rdx,%rax
	char c = '0';
    548f:	48 39 f7             	cmp    %rsi,%rdi
    5492:	75 d7                	jne    546b <hexStr2int+0x2b>
        else if(c >= 'a' && c <= 'f')
            x += (c - 'a' + 10);
        else if(c >= 'A' && c <= 'F')
            x += (c - 'A' + 10);
    }
    5494:	5d                   	pop    %rbp
    5495:	c3                   	retq   
        else if(c >= 'a' && c <= 'f')
    5496:	8d 4a bf             	lea    -0x41(%rdx),%ecx
    5499:	80 f9 05             	cmp    $0x5,%cl
    549c:	77 c4                	ja     5462 <hexStr2int+0x22>
            x += (c - 'a' + 10);
    549e:	83 ea 37             	sub    $0x37,%edx
    54a1:	48 63 d2             	movslq %edx,%rdx
    54a4:	48 01 d0             	add    %rdx,%rax
    54a7:	eb b9                	jmp    5462 <hexStr2int+0x22>
	int i = 0;
    54a9:	31 c0                	xor    %eax,%eax
    }
    54ab:	5d                   	pop    %rbp
    54ac:	c3                   	retq   
    54ad:	0f 1f 00             	nopl   (%rax)

00000000000054b0 <cleanup_hash_pbn_x>:
static int cleanup_hash_pbn_x(void *key, int32_t ksize, void *value,
    54b0:	e8 00 00 00 00       	callq  54b5 <cleanup_hash_pbn_x+0x5>
    54b5:	55                   	push   %rbp
    54b6:	48 89 e5             	mov    %rsp,%rbp
    54b9:	41 57                	push   %r15
    54bb:	41 56                	push   %r14
    54bd:	41 55                	push   %r13
    54bf:	41 54                	push   %r12
    54c1:	41 52                	push   %r10
    54c3:	53                   	push   %rbx
    54c4:	48 83 ec 20          	sub    $0x20,%rsp
    54c8:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    54cf:	00 00 
    54d1:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    54d5:	31 c0                	xor    %eax,%eax
	u64 pbn_val = 0;
    54d7:	48 8b 02             	mov    (%rdx),%rax
    54da:	48 8b 52 08          	mov    0x8(%rdx),%rdx
	struct dedup_config *dc = (struct dedup_config *)data;
    54de:	4d 85 c0             	test   %r8,%r8
	u64 pbn_val = 0;
    54e1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    54e5:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
	struct dedup_config *dc = (struct dedup_config *)data;
    54e9:	0f 84 27 01 00 00    	je     5616 <cleanup_hash_pbn_x+0x166>
	pbn_val = hashpbn_value_x.pbn;
    54ef:	0f b6 45 c0          	movzbl -0x40(%rbp),%eax
	BUG_ON(!data);
    54f3:	4c 8b 7d b8          	mov    -0x48(%rbp),%r15
    54f7:	4d 89 c5             	mov    %r8,%r13
    54fa:	41 89 ce             	mov    %ecx,%r14d
    54fd:	41 89 f4             	mov    %esi,%r12d
    5500:	48 89 fb             	mov    %rdi,%rbx
	old_tv.type = hashpbn_value_x.tv.type;
    5503:	49 8b b8 c0 03 00 00 	mov    0x3c0(%r8),%rdi
    550a:	4c 89 fe             	mov    %r15,%rsi
	pbn_val = hashpbn_value_x.pbn;
    550d:	83 e0 7f             	and    $0x7f,%eax
    5510:	88 45 b7             	mov    %al,-0x49(%rbp)
	old_tv.type = hashpbn_value_x.tv.type;
    5513:	49 8b 80 b8 03 00 00 	mov    0x3b8(%r8),%rax
    551a:	48 8b 40 38          	mov    0x38(%rax),%rax
    551e:	e8 00 00 00 00       	callq  5523 <cleanup_hash_pbn_x+0x73>
	cur_tv.ver = (ref & TV_VER);
    5523:	84 c0                	test   %al,%al
    5525:	89 c2                	mov    %eax,%edx
    5527:	79 7f                	jns    55a8 <cleanup_hash_pbn_x+0xf8>

    5529:	49 8b bd c8 03 00 00 	mov    0x3c8(%r13),%rdi
    5530:	44 89 e2             	mov    %r12d,%edx
    5533:	48 89 de             	mov    %rbx,%rsi
    5536:	48 8b 47 08          	mov    0x8(%rdi),%rax
    553a:	e8 00 00 00 00       	callq  553f <cleanup_hash_pbn_x+0x8f>
		r = dc->kvs_hash_pbn->kvs_delete(dc->kvs_hash_pbn,
    553f:	85 c0                	test   %eax,%eax
    5541:	78 41                	js     5584 <cleanup_hash_pbn_x+0xd4>
		dc->gc_fp_count++;
    5543:	49 8b 9d 30 02 00 00 	mov    0x230(%r13),%rbx
			goto out;
    554a:	49 83 ad c0 01 00 00 	subq   $0x1,0x1c0(%r13)
    5551:	01 

    5552:	49 83 85 c8 01 00 00 	addq   $0x1,0x1c8(%r13)
    5559:	01 
		dc->physical_block_counter -= 1;
    555a:	49 83 85 08 02 00 00 	addq   $0x1,0x208(%r13)
    5561:	01 
		dc->gc_fp_count++;
    5562:	48 8d 53 01          	lea    0x1(%rbx),%rdx
		dc->gc_counter++;
    5566:	49 83 ad 80 02 00 00 	subq   $0x1,0x280(%r13)
    556d:	01 
		dc->gc_cur_size++;
    556e:	49 3b 95 28 02 00 00 	cmp    0x228(%r13),%rdx
		dc->gc_fp_count++;
    5575:	49 89 95 30 02 00 00 	mov    %rdx,0x230(%r13)
		dc->gc_cur_size++;
    557c:	ba 01 00 00 00       	mov    $0x1,%edx
    5581:	0f 43 c2             	cmovae %edx,%eax
out:
    5584:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
    5588:	65 48 33 1c 25 28 00 	xor    %gs:0x28,%rbx
    558f:	00 00 
    5591:	0f 85 81 00 00 00    	jne    5618 <cleanup_hash_pbn_x+0x168>
    5597:	48 83 c4 20          	add    $0x20,%rsp
    559b:	5b                   	pop    %rbx
    559c:	41 5a                	pop    %r10
    559e:	41 5c                	pop    %r12
    55a0:	41 5d                	pop    %r13
    55a2:	41 5e                	pop    %r14
    55a4:	41 5f                	pop    %r15
    55a6:	5d                   	pop    %rbp
    55a7:	c3                   	retq   
	cur_tv.ver = (ref & TV_VER);
    55a8:	83 e0 7f             	and    $0x7f,%eax
    55ab:	3a 45 b7             	cmp    -0x49(%rbp),%al
    55ae:	0f 85 75 ff ff ff    	jne    5529 <cleanup_hash_pbn_x+0x79>
			    s32 vsize, void *data)
    55b4:	31 c0                	xor    %eax,%eax
			r = 1;
    55b6:	80 fa 01             	cmp    $0x1,%dl
    55b9:	74 c9                	je     5584 <cleanup_hash_pbn_x+0xd4>
	}
    55bb:	49 8b 85 b8 03 00 00 	mov    0x3b8(%r13),%rax
    55c2:	49 8b bd c0 03 00 00 	mov    0x3c0(%r13),%rdi
    55c9:	4c 89 fe             	mov    %r15,%rsi
    55cc:	ba 01 00 00 00       	mov    $0x1,%edx
    55d1:	48 8b 40 40          	mov    0x40(%rax),%rax
    55d5:	e8 00 00 00 00       	callq  55da <cleanup_hash_pbn_x+0x12a>
		hashpbn_value_x.tv.type = 0;
    55da:	49 8b bd c8 03 00 00 	mov    0x3c8(%r13),%rdi
		dc->mdops->set_refcount(dc->bmd, pbn_val, 1);
    55e1:	c6 45 c0 01          	movb   $0x1,-0x40(%rbp)
		hashpbn_value_x.tv.type = 0;
    55e5:	44 89 e2             	mov    %r12d,%edx
    55e8:	48 89 de             	mov    %rbx,%rsi
    55eb:	48 8b 47 08          	mov    0x8(%rdi),%rax
    55ef:	e8 00 00 00 00       	callq  55f4 <cleanup_hash_pbn_x+0x144>
		hashpbn_value_x.tv.ver = 1;
    55f4:	49 8b bd c8 03 00 00 	mov    0x3c8(%r13),%rdi
    55fb:	45 89 f0             	mov    %r14d,%r8d
    55fe:	48 8d 4d b8          	lea    -0x48(%rbp),%rcx
    5602:	44 89 e2             	mov    %r12d,%edx
    5605:	48 89 de             	mov    %rbx,%rsi
    5608:	48 8b 47 18          	mov    0x18(%rdi),%rax
    560c:	e8 00 00 00 00       	callq  5611 <cleanup_hash_pbn_x+0x161>
    5611:	e9 6e ff ff ff       	jmpq   5584 <cleanup_hash_pbn_x+0xd4>
    5616:	0f 0b                	ud2    
out:
    5618:	e8 00 00 00 00       	callq  561d <cleanup_hash_pbn_x+0x16d>
    561d:	0f 1f 00             	nopl   (%rax)

0000000000005620 <garbage_collect>:
 */
    5620:	e8 00 00 00 00       	callq  5625 <garbage_collect+0x5>
    5625:	55                   	push   %rbp
	int err = 0;
    5626:	48 85 ff             	test   %rdi,%rdi
 */
    5629:	48 89 e5             	mov    %rsp,%rbp
    562c:	53                   	push   %rbx
	int err = 0;
    562d:	0f 84 d5 00 00 00    	je     5708 <garbage_collect+0xe8>
	BUG_ON(!dc);
    5633:	48 c7 87 30 02 00 00 	movq   $0x0,0x230(%rdi)
    563a:	00 00 00 00 
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    563e:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    5640:	48 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%rdi)
    5647:	00 
    5648:	0f 85 a5 00 00 00    	jne    56f3 <garbage_collect+0xd3>
	dc->gc_cur_size = 0;
    564e:	48 8d b7 78 03 00 00 	lea    0x378(%rdi),%rsi
    5655:	48 89 fb             	mov    %rdi,%rbx
    5658:	b9 07 00 00 00       	mov    $0x7,%ecx
    565d:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	calc_tsc(dc, PERIOD_GC, PERIOD_START);
    5664:	48 89 da             	mov    %rbx,%rdx
	dc->gc_cur_size = 0;
    5667:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
    5669:	48 8b bb c8 03 00 00 	mov    0x3c8(%rbx),%rdi
    5670:	0f 97 c0             	seta   %al
    5673:	1c 00                	sbb    $0x0,%al
    5675:	84 c0                	test   %al,%al
    5677:	48 8b 4f 20          	mov    0x20(%rdi),%rcx
    567b:	74 66                	je     56e3 <garbage_collect+0xc3>
	else {
    567d:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    5684:	e8 00 00 00 00       	callq  5689 <garbage_collect+0x69>
    5689:	89 c1                	mov    %eax,%ecx
			&cleanup_hash_pbn, (void *)dc);
    568b:	48 83 83 00 02 00 00 	addq   $0x1,0x200(%rbx)
    5692:	01 
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    5693:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    5695:	48 83 bb a0 02 00 00 	cmpq   $0x0,0x2a0(%rbx)
    569c:	00 
    569d:	74 34                	je     56d3 <garbage_collect+0xb3>
		if(dc->tmp_period_time[period]) {
    569f:	48 8b b3 f8 02 00 00 	mov    0x2f8(%rbx),%rsi
    56a6:	48 85 f6             	test   %rsi,%rsi
    56a9:	74 1d                	je     56c8 <garbage_collect+0xa8>
			dc->total_period_time[period] += t;
    56ab:	48 8b bb 50 03 00 00 	mov    0x350(%rbx),%rdi
    var = ((unsigned long long int) hi << 32) | lo;
    56b2:	48 c1 e2 20          	shl    $0x20,%rdx
    56b6:	89 c0                	mov    %eax,%eax
    56b8:	48 09 c2             	or     %rax,%rdx
			dc->total_period_time[period] += t;
    56bb:	48 29 f7             	sub    %rsi,%rdi
    56be:	48 01 fa             	add    %rdi,%rdx
    56c1:	48 89 93 50 03 00 00 	mov    %rdx,0x350(%rbx)
		dc->tmp_period_time[period] = 0;
    56c8:	48 c7 83 f8 02 00 00 	movq   $0x0,0x2f8(%rbx)
    56cf:	00 00 00 00 
	dc->gc_count++;
    56d3:	48 c7 83 30 02 00 00 	movq   $0x0,0x230(%rbx)
    56da:	00 00 00 00 
	dc->gc_cur_size = 0;
    56de:	89 c8                	mov    %ecx,%eax
    56e0:	5b                   	pop    %rbx
    56e1:	5d                   	pop    %rbp
    56e2:	c3                   	retq   
	calc_tsc(dc, PERIOD_GC, PERIOD_START);
    56e3:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    56ea:	e8 00 00 00 00       	callq  56ef <garbage_collect+0xcf>
    56ef:	89 c1                	mov    %eax,%ecx
    56f1:	eb 98                	jmp    568b <garbage_collect+0x6b>
    var = ((unsigned long long int) hi << 32) | lo;
    56f3:	48 c1 e2 20          	shl    $0x20,%rdx
    56f7:	89 c0                	mov    %eax,%eax
    56f9:	48 09 c2             	or     %rax,%rdx
    56fc:	48 89 97 f8 02 00 00 	mov    %rdx,0x2f8(%rdi)
    5703:	e9 46 ff ff ff       	jmpq   564e <garbage_collect+0x2e>
    5708:	0f 0b                	ud2    
    570a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000005710 <dm_dedup_status>:
static void dm_dedup_status(struct dm_target *ti, status_type_t status_type,
    5710:	e8 00 00 00 00       	callq  5715 <dm_dedup_status+0x5>
    5715:	55                   	push   %rbp
    5716:	48 89 e5             	mov    %rsp,%rbp
    5719:	41 57                	push   %r15
    571b:	41 56                	push   %r14
    571d:	41 55                	push   %r13
    571f:	41 54                	push   %r12
    5721:	41 89 f6             	mov    %esi,%r14d
    5724:	53                   	push   %rbx
    5725:	49 89 cf             	mov    %rcx,%r15
    5728:	45 89 c5             	mov    %r8d,%r13d
    572b:	48 83 ec 68          	sub    $0x68,%rsp
			    unsigned int status_flags, char *result, unsigned int maxlen)
    572f:	48 8b 5f 40          	mov    0x40(%rdi),%rbx
{
    5733:	48 8b 83 b8 03 00 00 	mov    0x3b8(%rbx),%rax
    573a:	48 8b bb c0 03 00 00 	mov    0x3c0(%rbx),%rdi
    5741:	48 8b 40 68          	mov    0x68(%rax),%rax
    5745:	e8 00 00 00 00       	callq  574a <dm_dedup_status+0x3a>
	int sz = 0;
    574a:	45 85 f6             	test   %r14d,%r14d
    574d:	74 1e                	je     576d <dm_dedup_status+0x5d>
    574f:	41 83 fe 01          	cmp    $0x1,%r14d
    5753:	75 09                	jne    575e <dm_dedup_status+0x4e>
		break;
    5755:	45 85 ed             	test   %r13d,%r13d
    5758:	0f 85 11 01 00 00    	jne    586f <dm_dedup_status+0x15f>
			dc->crypto_alg, dc->backend_str, dc->flushrq);
    575e:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
    5762:	5b                   	pop    %rbx
    5763:	41 5c                	pop    %r12
    5765:	41 5d                	pop    %r13
    5767:	41 5e                	pop    %r14
    5769:	41 5f                	pop    %r15
    576b:	5d                   	pop    %rbp
    576c:	c3                   	retq   
    576d:	49 89 c4             	mov    %rax,%r12
	switch (status_type) {
    5770:	48 8b 80 d8 00 00 00 	mov    0xd8(%rax),%rax
    5777:	45 31 f6             	xor    %r14d,%r14d
	case STATUSTYPE_INFO:
    577a:	4d 8b 9c 24 30 01 00 	mov    0x130(%r12),%r11
    5781:	00 
		refcount_io_cnt += c->cntbio_sort[4] + c->cntbio_sort_r[4];
    5782:	4d 8b 94 24 18 01 00 	mov    0x118(%r12),%r10
    5789:	00 
	switch (status_type) {
    578a:	48 89 45 80          	mov    %rax,-0x80(%rbp)
	case STATUSTYPE_INFO:
    578e:	49 8b 84 24 00 01 00 	mov    0x100(%r12),%rax
    5795:	00 
    5796:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
		meta_io_cnt = c->cntbio;
    579a:	49 8b 84 24 f8 00 00 	mov    0xf8(%r12),%rax
    57a1:	00 
    57a2:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    57a6:	49 8b 84 24 28 01 00 	mov    0x128(%r12),%rax
    57ad:	00 
    57ae:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
		fp_io_cnt = c->cntbio_sort[2] + c->cntbio_sort_r[2];
    57b2:	49 8b 84 24 08 01 00 	mov    0x108(%r12),%rax
    57b9:	00 
    57ba:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    57be:	49 8b 84 24 38 01 00 	mov    0x138(%r12),%rax
    57c5:	00 
    57c6:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
		mapping_io_cnt = c->cntbio_sort[1] + c->cntbio_sort_r[1];
    57ca:	49 8b 84 24 10 01 00 	mov    0x110(%r12),%rax
    57d1:	00 
    57d2:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    57d6:	49 8b 84 24 40 01 00 	mov    0x140(%r12),%rax
    57dd:	00 
    57de:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
		refcount_io_cnt = c->cntbio_sort[3] + c->cntbio_sort_r[3];
    57e2:	49 8b 84 24 f0 00 00 	mov    0xf0(%r12),%rax
    57e9:	00 
    57ea:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    57ee:	49 8b 84 24 20 01 00 	mov    0x120(%r12),%rax
    57f5:	00 
    57f6:	48 89 45 90          	mov    %rax,-0x70(%rbp)
		refcount_io_cnt += c->cntbio_sort[4] + c->cntbio_sort_r[4];
    57fa:	49 8b 84 24 48 01 00 	mov    0x148(%r12),%rax
    5801:	00 
    5802:	48 89 45 88          	mov    %rax,-0x78(%rbp)
		data_total_block_count = dc->pblocks;
    5806:	48 8b 83 10 03 00 00 	mov    0x310(%rbx),%rax
    580d:	48 2b 83 18 03 00 00 	sub    0x318(%rbx),%rax
		dc->total_period_time[PERIOD_OTHER] = dc->total_period_time[PERIOD_WRITE] - dc->total_period_time[PERIOD_HASH];
    5814:	45 85 ed             	test   %r13d,%r13d
		data_total_block_count = dc->pblocks;
    5817:	48 89 83 20 03 00 00 	mov    %rax,0x320(%rbx)
		dc->total_period_time[PERIOD_OTHER] = dc->total_period_time[PERIOD_WRITE] - dc->total_period_time[PERIOD_HASH];
    581e:	0f 85 9a 00 00 00    	jne    58be <dm_dedup_status+0x1ae>
		DMEMIT("read_meta_io_cnt:%llu,read_fp_io_cnt:%llu,read_mapping_io_cnt:%llu,read_refcount_io_cnt:%llu,read_others_io_cnt:%llu,read_persist_io_cnt:%llu,",
    5824:	31 c0                	xor    %eax,%eax
    5826:	41 01 c6             	add    %eax,%r14d
				dc->hit_right_fp, dc->hit_wrong_fp, dc->hit_corrupt_fp, dc->hit_none_fp);
    5829:	31 c0                	xor    %eax,%eax
				dc->total_period_time[PERIOD_HASH], dc->total_period_time[PERIOD_OTHER], dc->total_period_time[PERIOD_FP], dc->total_period_time[PERIOD_L2P],
    582b:	45 39 ee             	cmp    %r13d,%r14d
    582e:	0f 82 69 02 00 00    	jb     5a9d <dm_dedup_status+0x38d>
				dc->hit_right_fp, dc->hit_wrong_fp, dc->hit_corrupt_fp, dc->hit_none_fp);
    5834:	41 01 c6             	add    %eax,%r14d
		DMEMIT("invalid_fp:%llu,inserted_fp:%llu,", dc->invalid_fp, dc->inserted_fp);
    5837:	45 39 ee             	cmp    %r13d,%r14d
    583a:	0f 83 1e ff ff ff    	jae    575e <dm_dedup_status+0x4e>
    5840:	44 89 ee             	mov    %r13d,%esi
    5843:	48 8b 8b 40 04 00 00 	mov    0x440(%rbx),%rcx
    584a:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    5851:	44 29 f6             	sub    %r14d,%esi
    5854:	4d 63 f6             	movslq %r14d,%r14
    5857:	4b 8d 3c 37          	lea    (%r15,%r14,1),%rdi
    585b:	e8 00 00 00 00       	callq  5860 <dm_dedup_status+0x150>
			dc->crypto_alg, dc->backend_str, dc->flushrq);
    5860:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
    5864:	5b                   	pop    %rbx
    5865:	41 5c                	pop    %r12
    5867:	41 5d                	pop    %r13
    5869:	41 5e                	pop    %r14
    586b:	41 5f                	pop    %r15
    586d:	5d                   	pop    %rbp
    586e:	c3                   	retq   
		break;
    586f:	48 8b 53 08          	mov    0x8(%rbx),%rdx
    5873:	48 8b 03             	mov    (%rbx),%rax
    5876:	44 89 ee             	mov    %r13d,%esi
    5879:	4c 89 ff             	mov    %r15,%rdi
    587c:	48 8d 4a 14          	lea    0x14(%rdx),%rcx
    5880:	8b 93 f4 03 00 00    	mov    0x3f4(%rbx),%edx
    5886:	4c 8d 40 14          	lea    0x14(%rax),%r8
    588a:	52                   	push   %rdx
    588b:	48 8d 93 78 03 00 00 	lea    0x378(%rbx),%rdx
    5892:	52                   	push   %rdx
    5893:	48 8d 93 e0 03 00 00 	lea    0x3e0(%rbx),%rdx
    589a:	52                   	push   %rdx
    589b:	44 8b 4b 10          	mov    0x10(%rbx),%r9d
    589f:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    58a6:	e8 00 00 00 00       	callq  58ab <dm_dedup_status+0x19b>
    58ab:	48 83 c4 18          	add    $0x18,%rsp
			dc->crypto_alg, dc->backend_str, dc->flushrq);
    58af:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
    58b3:	5b                   	pop    %rbx
    58b4:	41 5c                	pop    %r12
    58b6:	41 5d                	pop    %r13
    58b8:	41 5e                	pop    %r14
    58ba:	41 5f                	pop    %r15
    58bc:	5d                   	pop    %rbp
    58bd:	c3                   	retq   
		dc->total_period_time[PERIOD_OTHER] = dc->total_period_time[PERIOD_WRITE] - dc->total_period_time[PERIOD_HASH];
    58be:	48 8b 8b 40 02 00 00 	mov    0x240(%rbx),%rcx
    58c5:	4c 8b 8b 50 02 00 00 	mov    0x250(%rbx),%r9
    58cc:	44 89 ee             	mov    %r13d,%esi
    58cf:	4c 8b 83 48 02 00 00 	mov    0x248(%rbx),%r8
    58d6:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    58dd:	4c 89 ff             	mov    %r15,%rdi
    58e0:	4c 89 95 70 ff ff ff 	mov    %r10,-0x90(%rbp)
    58e7:	4c 89 9d 78 ff ff ff 	mov    %r11,-0x88(%rbp)
    58ee:	e8 00 00 00 00       	callq  58f3 <dm_dedup_status+0x1e3>

    58f3:	44 39 e8             	cmp    %r13d,%eax
		dc->total_period_time[PERIOD_OTHER] = dc->total_period_time[PERIOD_WRITE] - dc->total_period_time[PERIOD_HASH];
    58f6:	41 89 c6             	mov    %eax,%r14d

    58f9:	0f 83 25 ff ff ff    	jae    5824 <dm_dedup_status+0x114>
    58ff:	44 89 ee             	mov    %r13d,%esi
    5902:	48 63 f8             	movslq %eax,%rdi
		refcount_io_cnt += c->cntbio_sort[4] + c->cntbio_sort_r[4];
    5905:	4c 8b 95 70 ff ff ff 	mov    -0x90(%rbp),%r10

    590c:	29 c6                	sub    %eax,%esi
		refcount_io_cnt += c->cntbio_sort[4] + c->cntbio_sort_r[4];
    590e:	4c 03 55 88          	add    -0x78(%rbp),%r10
		refcount_io_cnt = c->cntbio_sort[3] + c->cntbio_sort_r[3];
    5912:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    5916:	48 03 45 90          	add    -0x70(%rbp),%rax

    591a:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
    591e:	4c 01 ff             	add    %r15,%rdi
    5921:	4c 8b 9d 78 ff ff ff 	mov    -0x88(%rbp),%r11
    5928:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
    592c:	41 52                	push   %r10
    592e:	50                   	push   %rax
		mapping_io_cnt = c->cntbio_sort[1] + c->cntbio_sort_r[1];
    592f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
    5933:	48 03 45 b0          	add    -0x50(%rbp),%rax
    5937:	48 03 45 a8          	add    -0x58(%rbp),%rax
    593b:	48 03 45 a0          	add    -0x60(%rbp),%rax

    593f:	50                   	push   %rax
    5940:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
    5944:	4c 8d 0c 10          	lea    (%rax,%rdx,1),%r9
    5948:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    594c:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    5953:	4e 8d 04 18          	lea    (%rax,%r11,1),%r8
    5957:	e8 00 00 00 00       	callq  595c <dm_dedup_status+0x24c>
    595c:	41 01 c6             	add    %eax,%r14d
		DMEMIT("meta_io_cnt:%llu,fp_io_cnt:%llu,mapping_io_cnt:%llu,refcount_io_cnt:%llu,others_io_cnt:%llu,persist_io_cnt:%llu,",
    595f:	48 83 c4 18          	add    $0x18,%rsp
    5963:	45 39 ee             	cmp    %r13d,%r14d
    5966:	0f 83 07 02 00 00    	jae    5b73 <dm_dedup_status+0x463>
    596c:	49 8b 8c 24 e8 00 00 	mov    0xe8(%r12),%rcx
    5973:	00 
    5974:	41 ff b4 24 18 01 00 	pushq  0x118(%r12)
    597b:	00 
    597c:	49 63 fe             	movslq %r14d,%rdi
    597f:	41 ff b4 24 f0 00 00 	pushq  0xf0(%r12)
    5986:	00 
    5987:	49 8b 84 24 10 01 00 	mov    0x110(%r12),%rax
    598e:	00 
    598f:	44 89 ee             	mov    %r13d,%esi
    5992:	49 03 84 24 08 01 00 	add    0x108(%r12),%rax
    5999:	00 
    599a:	44 29 f6             	sub    %r14d,%esi
    599d:	4c 01 ff             	add    %r15,%rdi
    59a0:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    59a7:	50                   	push   %rax
    59a8:	4d 8b 8c 24 f8 00 00 	mov    0xf8(%r12),%r9
    59af:	00 
    59b0:	4d 8b 84 24 00 01 00 	mov    0x100(%r12),%r8
    59b7:	00 
    59b8:	e8 00 00 00 00       	callq  59bd <dm_dedup_status+0x2ad>
    59bd:	41 01 c6             	add    %eax,%r14d
		DMEMIT("write_meta_io_cnt:%llu,write_fp_io_cnt:%llu,write_mapping_io_cnt:%llu,write_refcount_io_cnt:%llu,write_others_io_cnt:%llu,write_persist_io_cnt:%llu,",
    59c0:	48 83 c4 18          	add    $0x18,%rsp
    59c4:	45 39 ee             	cmp    %r13d,%r14d
    59c7:	0f 83 57 fe ff ff    	jae    5824 <dm_dedup_status+0x114>
    59cd:	49 8b 8c 24 e0 00 00 	mov    0xe0(%r12),%rcx
    59d4:	00 
    59d5:	41 ff b4 24 48 01 00 	pushq  0x148(%r12)
    59dc:	00 
    59dd:	49 63 fe             	movslq %r14d,%rdi
    59e0:	41 ff b4 24 20 01 00 	pushq  0x120(%r12)
    59e7:	00 
    59e8:	49 8b 84 24 40 01 00 	mov    0x140(%r12),%rax
    59ef:	00 
    59f0:	44 89 ee             	mov    %r13d,%esi
    59f3:	49 03 84 24 38 01 00 	add    0x138(%r12),%rax
    59fa:	00 
    59fb:	44 29 f6             	sub    %r14d,%esi
    59fe:	4c 01 ff             	add    %r15,%rdi
    5a01:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    5a08:	50                   	push   %rax
    5a09:	4d 8b 8c 24 28 01 00 	mov    0x128(%r12),%r9
    5a10:	00 
    5a11:	4d 8b 84 24 30 01 00 	mov    0x130(%r12),%r8
    5a18:	00 
    5a19:	e8 00 00 00 00       	callq  5a1e <dm_dedup_status+0x30e>
    5a1e:	41 01 c6             	add    %eax,%r14d
		DMEMIT("read_meta_io_cnt:%llu,read_fp_io_cnt:%llu,read_mapping_io_cnt:%llu,read_refcount_io_cnt:%llu,read_others_io_cnt:%llu,read_persist_io_cnt:%llu,",
    5a21:	48 83 c4 18          	add    $0x18,%rsp
    5a25:	45 39 ee             	cmp    %r13d,%r14d
    5a28:	0f 83 4c 01 00 00    	jae    5b7a <dm_dedup_status+0x46a>
    5a2e:	48 8b 8b 00 03 00 00 	mov    0x300(%rbx),%rcx
    5a35:	ff b3 50 03 00 00    	pushq  0x350(%rbx)
    5a3b:	49 63 fe             	movslq %r14d,%rdi
    5a3e:	ff b3 48 03 00 00    	pushq  0x348(%rbx)
    5a44:	ff b3 40 03 00 00    	pushq  0x340(%rbx)
    5a4a:	44 89 ee             	mov    %r13d,%esi
    5a4d:	ff b3 38 03 00 00    	pushq  0x338(%rbx)
    5a53:	ff b3 30 03 00 00    	pushq  0x330(%rbx)
    5a59:	44 29 f6             	sub    %r14d,%esi
    5a5c:	ff b3 28 03 00 00    	pushq  0x328(%rbx)
    5a62:	ff b3 20 03 00 00    	pushq  0x320(%rbx)
    5a68:	4c 01 ff             	add    %r15,%rdi
    5a6b:	ff b3 18 03 00 00    	pushq  0x318(%rbx)
    5a71:	4c 8b 8b 10 03 00 00 	mov    0x310(%rbx),%r9
    5a78:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    5a7f:	4c 8b 83 08 03 00 00 	mov    0x308(%rbx),%r8
    5a86:	e8 00 00 00 00       	callq  5a8b <dm_dedup_status+0x37b>
    5a8b:	41 01 c6             	add    %eax,%r14d
    5a8e:	48 83 c4 40          	add    $0x40,%rsp
				dc->hit_right_fp, dc->hit_wrong_fp, dc->hit_corrupt_fp, dc->hit_none_fp);
    5a92:	31 c0                	xor    %eax,%eax
				dc->total_period_time[PERIOD_HASH], dc->total_period_time[PERIOD_OTHER], dc->total_period_time[PERIOD_FP], dc->total_period_time[PERIOD_L2P],
    5a94:	45 39 ee             	cmp    %r13d,%r14d
    5a97:	0f 83 97 fd ff ff    	jae    5834 <dm_dedup_status+0x124>
    5a9d:	48 8b 8b 00 02 00 00 	mov    0x200(%rbx),%rcx
    5aa4:	4c 8b 83 08 02 00 00 	mov    0x208(%rbx),%r8
    5aab:	44 89 ee             	mov    %r13d,%esi
    5aae:	49 63 fe             	movslq %r14d,%rdi
    5ab1:	44 29 f6             	sub    %r14d,%esi
    5ab4:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    5abb:	4c 01 ff             	add    %r15,%rdi
    5abe:	e8 00 00 00 00       	callq  5ac3 <dm_dedup_status+0x3b3>
    5ac3:	41 01 c6             	add    %eax,%r14d
				dc->total_period_time[PERIOD_REF], dc->total_period_time[PERIOD_FUA], dc->total_period_time[PERIOD_IO], dc->total_period_time[PERIOD_GC]);
    5ac6:	45 39 ee             	cmp    %r13d,%r14d
    5ac9:	0f 83 8f fc ff ff    	jae    575e <dm_dedup_status+0x4e>
    5acf:	48 8b 8b 60 02 00 00 	mov    0x260(%rbx),%rcx
    5ad6:	ff b3 58 02 00 00    	pushq  0x258(%rbx)
    5adc:	49 63 fe             	movslq %r14d,%rdi
    5adf:	4c 8b 8b 70 02 00 00 	mov    0x270(%rbx),%r9
    5ae6:	4c 8b 83 68 02 00 00 	mov    0x268(%rbx),%r8
    5aed:	44 89 ee             	mov    %r13d,%esi
    5af0:	44 29 f6             	sub    %r14d,%esi
    5af3:	4c 01 ff             	add    %r15,%rdi
    5af6:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    5afd:	e8 00 00 00 00       	callq  5b02 <dm_dedup_status+0x3f2>
    5b02:	41 01 c6             	add    %eax,%r14d
		DMEMIT("hit_right_fp:%llu,hit_wrong_fp:%llu,hit_corrupt_fp:%llu,hit_none_fp:%llu,",
    5b05:	45 39 ee             	cmp    %r13d,%r14d
    5b08:	58                   	pop    %rax
    5b09:	0f 83 4f fc ff ff    	jae    575e <dm_dedup_status+0x4e>
    5b0f:	48 8b 8b 78 02 00 00 	mov    0x278(%rbx),%rcx
    5b16:	4c 8b 83 80 02 00 00 	mov    0x280(%rbx),%r8
    5b1d:	44 89 ee             	mov    %r13d,%esi
    5b20:	49 63 fe             	movslq %r14d,%rdi
    5b23:	44 29 f6             	sub    %r14d,%esi
    5b26:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    5b2d:	4c 01 ff             	add    %r15,%rdi
    5b30:	e8 00 00 00 00       	callq  5b35 <dm_dedup_status+0x425>
    5b35:	41 01 c6             	add    %eax,%r14d
				dc->hit_right_fp, dc->hit_wrong_fp, dc->hit_corrupt_fp, dc->hit_none_fp);
    5b38:	45 39 ee             	cmp    %r13d,%r14d
    5b3b:	0f 83 1d fc ff ff    	jae    575e <dm_dedup_status+0x4e>
    5b41:	48 8b 8b 48 02 00 00 	mov    0x248(%rbx),%rcx
    5b48:	4c 8b 8b d8 01 00 00 	mov    0x1d8(%rbx),%r9
    5b4f:	44 89 ee             	mov    %r13d,%esi
    5b52:	4c 8b 83 e0 01 00 00 	mov    0x1e0(%rbx),%r8
    5b59:	49 63 fe             	movslq %r14d,%rdi
    5b5c:	44 29 f6             	sub    %r14d,%esi
    5b5f:	4c 01 ff             	add    %r15,%rdi
    5b62:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    5b69:	e8 00 00 00 00       	callq  5b6e <dm_dedup_status+0x45e>
    5b6e:	e9 c1 fc ff ff       	jmpq   5834 <dm_dedup_status+0x124>
				dc->total_period_time[PERIOD_HASH], dc->total_period_time[PERIOD_OTHER], dc->total_period_time[PERIOD_FP], dc->total_period_time[PERIOD_L2P],
    5b73:	31 c0                	xor    %eax,%eax
    5b75:	e9 49 ff ff ff       	jmpq   5ac3 <dm_dedup_status+0x3b3>
		DMEMIT("hit_right_fp:%llu,hit_wrong_fp:%llu,hit_corrupt_fp:%llu,hit_none_fp:%llu,",
    5b7a:	31 c0                	xor    %eax,%eax
    5b7c:	eb b7                	jmp    5b35 <dm_dedup_status+0x425>
    5b7e:	66 90                	xchg   %ax,%ax

0000000000005b80 <bio_zero_endio>:
{
    5b80:	e8 00 00 00 00       	callq  5b85 <bio_zero_endio+0x5>
    5b85:	55                   	push   %rbp
    5b86:	48 89 e5             	mov    %rsp,%rbp
    5b89:	53                   	push   %rbx
    5b8a:	ff 77 50             	pushq  0x50(%rdi)
    5b8d:	ff 77 48             	pushq  0x48(%rdi)
    5b90:	ff 77 40             	pushq  0x40(%rdi)
    5b93:	48 89 fb             	mov    %rdi,%rbx
    5b96:	ff 77 38             	pushq  0x38(%rdi)
    5b99:	ff 77 30             	pushq  0x30(%rdi)
    5b9c:	ff 77 28             	pushq  0x28(%rdi)
    5b9f:	e8 00 00 00 00       	callq  5ba4 <bio_zero_endio+0x24>
	bio->bi_status = BLK_STS_OK;
    5ba4:	c6 43 1a 00          	movb   $0x0,0x1a(%rbx)
	bio_endio(bio);
    5ba8:	48 89 df             	mov    %rbx,%rdi
    5bab:	48 83 c4 30          	add    $0x30,%rsp
    5baf:	e8 00 00 00 00       	callq  5bb4 <bio_zero_endio+0x34>
}
    5bb4:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    5bb8:	c9                   	leaveq 
    5bb9:	c3                   	retq   
    5bba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000005bc0 <dm_dedup_map>:
{
    5bc0:	e8 00 00 00 00       	callq  5bc5 <dm_dedup_map+0x5>
    5bc5:	55                   	push   %rbp
    5bc6:	48 89 e5             	mov    %rsp,%rbp
    5bc9:	41 54                	push   %r12
    5bcb:	53                   	push   %rbx
	dedup_defer_bio(ti->private, bio);
    5bcc:	48 8b 5f 40          	mov    0x40(%rdi),%rbx
{
    5bd0:	49 89 f4             	mov    %rsi,%r12
	data = mempool_alloc(dc->dedup_work_pool, GFP_NOIO);
    5bd3:	be 00 00 60 00       	mov    $0x600000,%esi
    5bd8:	48 8b bb 08 04 00 00 	mov    0x408(%rbx),%rdi
    5bdf:	e8 00 00 00 00       	callq  5be4 <dm_dedup_map+0x24>
	if (!data) {
    5be4:	48 85 c0             	test   %rax,%rax
    5be7:	74 41                	je     5c2a <dm_dedup_map+0x6a>
	INIT_WORK(&(data->worker), do_work);
    5be9:	48 8d 50 08          	lea    0x8(%rax),%rdx
    5bed:	48 b9 e0 ff ff ff 0f 	movabs $0xfffffffe0,%rcx
    5bf4:	00 00 00 
	data->bio = bio;
    5bf7:	4c 89 60 28          	mov    %r12,0x28(%rax)
	data->config = dc;
    5bfb:	48 89 58 20          	mov    %rbx,0x20(%rax)
	INIT_WORK(&(data->worker), do_work);
    5bff:	48 89 08             	mov    %rcx,(%rax)
    5c02:	bf 00 20 00 00       	mov    $0x2000,%edi
    5c07:	48 89 50 08          	mov    %rdx,0x8(%rax)
    5c0b:	48 89 50 10          	mov    %rdx,0x10(%rax)
    5c0f:	48 89 c2             	mov    %rax,%rdx
    5c12:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    5c19:	00 
    5c1a:	48 8b 73 20          	mov    0x20(%rbx),%rsi
    5c1e:	e8 00 00 00 00       	callq  5c23 <dm_dedup_map+0x63>
}
    5c23:	31 c0                	xor    %eax,%eax
    5c25:	5b                   	pop    %rbx
    5c26:	41 5c                	pop    %r12
    5c28:	5d                   	pop    %rbp
    5c29:	c3                   	retq   
		bio->bi_status = BLK_STS_RESOURCE;
    5c2a:	41 c6 44 24 1a 09    	movb   $0x9,0x1a(%r12)
		bio_endio(bio);
    5c30:	4c 89 e7             	mov    %r12,%rdi
    5c33:	e8 00 00 00 00       	callq  5c38 <dm_dedup_map+0x78>
}
    5c38:	31 c0                	xor    %eax,%eax
    5c3a:	5b                   	pop    %rbx
    5c3b:	41 5c                	pop    %r12
    5c3d:	5d                   	pop    %rbp
    5c3e:	c3                   	retq   
    5c3f:	90                   	nop

0000000000005c40 <enqueue_remap_or_discard_work>:
static void enqueue_remap_or_discard_work(struct dedup_config *config, u64 pbn, u64 lbn, int temp, int flag) {
    5c40:	e8 00 00 00 00       	callq  5c45 <enqueue_remap_or_discard_work+0x5>
    5c45:	55                   	push   %rbp
    5c46:	48 89 e5             	mov    %rsp,%rbp
    5c49:	41 57                	push   %r15
    5c4b:	41 56                	push   %r14
    5c4d:	41 55                	push   %r13
    5c4f:	41 54                	push   %r12
    5c51:	49 89 f7             	mov    %rsi,%r15
    5c54:	53                   	push   %rbx
    5c55:	48 89 fb             	mov    %rdi,%rbx
    work = mempool_alloc(config->remap_or_discard_work_pool, GFP_NOIO);
    5c58:	48 8b bf 28 04 00 00 	mov    0x428(%rdi),%rdi
    5c5f:	be 00 00 60 00       	mov    $0x600000,%esi
static void enqueue_remap_or_discard_work(struct dedup_config *config, u64 pbn, u64 lbn, int temp, int flag) {
    5c64:	49 89 d6             	mov    %rdx,%r14
    5c67:	41 89 cd             	mov    %ecx,%r13d
    5c6a:	45 89 c4             	mov    %r8d,%r12d
    work = mempool_alloc(config->remap_or_discard_work_pool, GFP_NOIO);
    5c6d:	e8 00 00 00 00       	callq  5c72 <enqueue_remap_or_discard_work+0x32>
    config->remap_or_discard_work_pool_counter++;
    5c72:	48 83 83 40 04 00 00 	addq   $0x1,0x440(%rbx)
    5c79:	01 
    INIT_WORK(&(work->worker), do_remap_or_discard_work);
    5c7a:	48 8d 50 08          	lea    0x8(%rax),%rdx
    5c7e:	48 8b 73 38          	mov    0x38(%rbx),%rsi
    5c82:	48 b9 e0 ff ff ff 0f 	movabs $0xfffffffe0,%rcx
    5c89:	00 00 00 
    work->config = config;
    5c8c:	48 89 58 20          	mov    %rbx,0x20(%rax)
    work->pbn = pbn;
    5c90:	4c 89 78 28          	mov    %r15,0x28(%rax)
    work->lbn = lbn;
    5c94:	4c 89 70 30          	mov    %r14,0x30(%rax)
    work->temp = temp;
    5c98:	44 89 68 38          	mov    %r13d,0x38(%rax)
    5c9c:	bf 00 20 00 00       	mov    $0x2000,%edi
    work->flag = flag;
    5ca1:	44 89 60 3c          	mov    %r12d,0x3c(%rax)
    5ca5:	48 89 50 08          	mov    %rdx,0x8(%rax)
    5ca9:	48 89 50 10          	mov    %rdx,0x10(%rax)
    INIT_WORK(&(work->worker), do_remap_or_discard_work);
    5cad:	48 89 08             	mov    %rcx,(%rax)
    5cb0:	48 89 c2             	mov    %rax,%rdx
    5cb3:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
    5cba:	00 
    5cbb:	e8 00 00 00 00       	callq  5cc0 <enqueue_remap_or_discard_work+0x80>
}
    5cc0:	5b                   	pop    %rbx
    5cc1:	41 5c                	pop    %r12
    5cc3:	41 5d                	pop    %r13
    5cc5:	41 5e                	pop    %r14
    5cc7:	41 5f                	pop    %r15
    5cc9:	5d                   	pop    %rbp
    5cca:	c3                   	retq   
    5ccb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000005cd0 <dm_dedup_dtr>:
/* Dmdedup destructor. */
    5cd0:	e8 00 00 00 00       	callq  5cd5 <dm_dedup_dtr+0x5>
    5cd5:	55                   	push   %rbp
    5cd6:	48 89 e5             	mov    %rsp,%rbp
    5cd9:	41 54                	push   %r12
    5cdb:	53                   	push   %rbx
    5cdc:	49 89 fc             	mov    %rdi,%r12
    5cdf:	48 83 ec 18          	sub    $0x18,%rsp
static void dm_dedup_dtr(struct dm_target *ti)
    5ce3:	48 8b 5f 40          	mov    0x40(%rdi),%rbx
/* Dmdedup destructor. */
    5ce7:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    5cee:	00 00 
    5cf0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    5cf4:	31 c0                	xor    %eax,%eax
	int ret;
    5cf6:	48 8b 83 b8 03 00 00 	mov    0x3b8(%rbx),%rax
    5cfd:	48 8b bb c0 03 00 00 	mov    0x3c0(%rbx),%rdi
    5d04:	48 8b 48 58          	mov    0x58(%rax),%rcx
    5d08:	48 85 c9             	test   %rcx,%rcx
    5d0b:	74 3a                	je     5d47 <dm_dedup_dtr+0x77>

    5d0d:	48 8b 83 c0 01 00 00 	mov    0x1c0(%rbx),%rax
		data.logical_block_counter = dc->logical_block_counter;
    5d14:	ba 10 00 00 00       	mov    $0x10,%edx
    5d19:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi

    5d1d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
	if (dc->mdops->set_private_data) {
    5d21:	48 8b 83 b8 01 00 00 	mov    0x1b8(%rbx),%rax
    5d28:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
		data.logical_block_counter = dc->logical_block_counter;
    5d2c:	e8 00 00 00 00       	callq  5d31 <dm_dedup_dtr+0x61>
		ret = dc->mdops->set_private_data(dc->bmd, &data,
    5d31:	85 c0                	test   %eax,%eax
    5d33:	0f 88 cd 00 00 00    	js     5e06 <dm_dedup_dtr+0x136>
    5d39:	48 8b 83 b8 03 00 00 	mov    0x3b8(%rbx),%rax
    5d40:	48 8b bb c0 03 00 00 	mov    0x3c0(%rbx),%rdi
	}
    5d47:	48 8b 40 48          	mov    0x48(%rax),%rax
    5d4b:	e8 00 00 00 00       	callq  5d50 <dm_dedup_dtr+0x80>

    5d50:	85 c0                	test   %eax,%eax
    5d52:	0f 88 c4 00 00 00    	js     5e1c <dm_dedup_dtr+0x14c>
		DMERR("Failed to flush the metadata to disk.");
    5d58:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
    5d5c:	e8 00 00 00 00       	callq  5d61 <dm_dedup_dtr+0x91>

    5d61:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
    5d65:	e8 00 00 00 00       	callq  5d6a <dm_dedup_dtr+0x9a>
	flush_workqueue(dc->workqueue);
    5d6a:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
    5d6e:	e8 00 00 00 00       	callq  5d73 <dm_dedup_dtr+0xa3>
	destroy_workqueue(dc->workqueue);
    5d73:	48 8b 7b 30          	mov    0x30(%rbx),%rdi
    5d77:	e8 00 00 00 00       	callq  5d7c <dm_dedup_dtr+0xac>
	destroy_workqueue(dc->discard_workqueue);
    5d7c:	48 8b bb 08 04 00 00 	mov    0x408(%rbx),%rdi
    5d83:	e8 00 00 00 00       	callq  5d88 <dm_dedup_dtr+0xb8>

    5d88:	48 8b bb 18 04 00 00 	mov    0x418(%rbx),%rdi
    5d8f:	e8 00 00 00 00       	callq  5d94 <dm_dedup_dtr+0xc4>
	mempool_destroy(dc->dedup_work_pool);
    5d94:	48 8b bb 20 04 00 00 	mov    0x420(%rbx),%rdi
    5d9b:	e8 00 00 00 00       	callq  5da0 <dm_dedup_dtr+0xd0>
	mempool_destroy(dc->discard_work_pool);
    5da0:	48 8b 83 b8 03 00 00 	mov    0x3b8(%rbx),%rax
    5da7:	48 8b bb c0 03 00 00 	mov    0x3c0(%rbx),%rdi
    5dae:	48 8b 40 08          	mov    0x8(%rax),%rax
    5db2:	e8 00 00 00 00       	callq  5db7 <dm_dedup_dtr+0xe7>
	dc->mdops->exit_meta(dc->bmd);
    5db7:	48 8b bb 70 03 00 00 	mov    0x370(%rbx),%rdi
    5dbe:	e8 00 00 00 00       	callq  5dc3 <dm_dedup_dtr+0xf3>
	dm_io_client_destroy(dc->io_client);
    5dc3:	48 8b 33             	mov    (%rbx),%rsi
    5dc6:	4c 89 e7             	mov    %r12,%rdi
    5dc9:	e8 00 00 00 00       	callq  5dce <dm_dedup_dtr+0xfe>

    5dce:	48 8b 73 08          	mov    0x8(%rbx),%rsi
    5dd2:	4c 89 e7             	mov    %r12,%rdi
    5dd5:	e8 00 00 00 00       	callq  5dda <dm_dedup_dtr+0x10a>
	dm_put_device(ti, dc->data_dev);
    5dda:	48 8b bb b0 01 00 00 	mov    0x1b0(%rbx),%rdi
    5de1:	e8 00 00 00 00       	callq  5de6 <dm_dedup_dtr+0x116>
	desc_table_deinit(dc->desc_table);
    5de6:	48 89 df             	mov    %rbx,%rdi
    5de9:	e8 00 00 00 00       	callq  5dee <dm_dedup_dtr+0x11e>

    5dee:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
    5df2:	65 48 33 04 25 28 00 	xor    %gs:0x28,%rax
    5df9:	00 00 
    5dfb:	75 1a                	jne    5e17 <dm_dedup_dtr+0x147>
    5dfd:	48 83 c4 18          	add    $0x18,%rsp
    5e01:	5b                   	pop    %rbx
    5e02:	41 5c                	pop    %r12
    5e04:	5d                   	pop    %rbp
    5e05:	c3                   	retq   
				sizeof(struct on_disk_stats));
    5e06:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    5e0d:	e8 00 00 00 00       	callq  5e12 <dm_dedup_dtr+0x142>
    5e12:	e9 22 ff ff ff       	jmpq   5d39 <dm_dedup_dtr+0x69>

    5e17:	e8 00 00 00 00       	callq  5e1c <dm_dedup_dtr+0x14c>
	ret = dc->mdops->flush_meta(dc->bmd);
    5e1c:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    5e23:	e8 00 00 00 00       	callq  5e28 <dm_dedup_dtr+0x158>
    5e28:	e9 2b ff ff ff       	jmpq   5d58 <dm_dedup_dtr+0x88>
    5e2d:	0f 1f 00             	nopl   (%rax)

0000000000005e30 <issue_discard>:
 */
    5e30:	e8 00 00 00 00       	callq  5e35 <issue_discard+0x5>
    5e35:	55                   	push   %rbp
	id2 = id;
    5e36:	48 85 ff             	test   %rdi,%rdi
 */
    5e39:	48 89 e5             	mov    %rsp,%rbp
    5e3c:	53                   	push   %rbx
	id2 = id;
    5e3d:	0f 84 82 00 00 00    	je     5ec5 <issue_discard+0x95>
    5e43:	48 89 f0             	mov    %rsi,%rax
    5e46:	4c 8d 14 f5 00 00 00 	lea    0x0(,%rsi,8),%r10
    5e4d:	00 
	BUG_ON(!dc);
    5e4e:	48 8d b7 78 03 00 00 	lea    0x378(%rdi),%rsi
    5e55:	b9 07 00 00 00       	mov    $0x7,%ecx
    5e5a:	49 89 f8             	mov    %rdi,%r8
    5e5d:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    5e64:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
    5e66:	0f 97 c1             	seta   %cl
    5e69:	80 d9 00             	sbb    $0x0,%cl
    5e6c:	84 c9                	test   %cl,%cl
    5e6e:	74 30                	je     5ea0 <issue_discard+0x70>
    5e70:	31 d2                	xor    %edx,%edx
	else {
    5e72:	45 31 c9             	xor    %r9d,%r9d
		isremote = 0;
    5e75:	49 8b 00             	mov    (%r8),%rax
    5e78:	52                   	push   %rdx
    5e79:	45 31 c0             	xor    %r8d,%r8d
    5e7c:	b9 00 00 60 00       	mov    $0x600000,%ecx
    5e81:	ba 08 00 00 00       	mov    $0x8,%edx
    5e86:	4c 89 d6             	mov    %r10,%rsi
    5e89:	48 8b 38             	mov    (%rax),%rdi
    5e8c:	e8 00 00 00 00       	callq  5e91 <issue_discard+0x61>
    5e91:	89 c3                	mov    %eax,%ebx
	err = blkdev_issue_discard(dc->data_dev->bdev, dev_start,
    5e93:	85 db                	test   %ebx,%ebx
    5e95:	58                   	pop    %rax
    5e96:	75 2f                	jne    5ec7 <issue_discard+0x97>
	}
    5e98:	89 d8                	mov    %ebx,%eax
    5e9a:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    5e9e:	c9                   	leaveq 
    5e9f:	c3                   	retq   
    5ea0:	41 89 d1             	mov    %edx,%r9d
	tmp = sector_div(lpn, align_size);
    5ea3:	31 d2                	xor    %edx,%edx
    5ea5:	49 f7 b0 98 02 00 00 	divq   0x298(%r8)
	offset = lpn % (dc->remote_len);
    5eac:	4c 89 d0             	mov    %r10,%rax
	if (!strcmp(dc->backend_str, "xremap")) {
    5eaf:	41 39 d1             	cmp    %edx,%r9d
    5eb2:	41 0f 95 c1          	setne  %r9b
	offset = lpn % (dc->remote_len);
    5eb6:	31 d2                	xor    %edx,%edx
	if (!strcmp(dc->backend_str, "xremap")) {
    5eb8:	45 0f b6 c9          	movzbl %r9b,%r9d
	offset = lpn % (dc->remote_len);
    5ebc:	49 f7 b0 90 02 00 00 	divq   0x290(%r8)
    5ec3:	eb b0                	jmp    5e75 <issue_discard+0x45>
    5ec5:	0f 0b                	ud2    
			dev_end, GFP_NOIO, 0, isremote, entry_offset);
    5ec7:	89 de                	mov    %ebx,%esi
    5ec9:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    5ed0:	e8 00 00 00 00       	callq  5ed5 <issue_discard+0xa5>
	if (err) {
    5ed5:	eb c1                	jmp    5e98 <issue_discard+0x68>
    5ed7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    5ede:	00 00 

0000000000005ee0 <cleanup_hash_pbn>:
static int cleanup_hash_pbn(void *key, int32_t ksize, void *value,
    5ee0:	e8 00 00 00 00       	callq  5ee5 <cleanup_hash_pbn+0x5>
    5ee5:	55                   	push   %rbp
    5ee6:	48 89 e5             	mov    %rsp,%rbp
    5ee9:	41 57                	push   %r15
    5eeb:	41 56                	push   %r14
    5eed:	41 55                	push   %r13
    5eef:	41 54                	push   %r12
    5ef1:	53                   	push   %rbx
    5ef2:	48 83 ec 18          	sub    $0x18,%rsp
	int r = 0;
    5ef6:	4c 8b 32             	mov    (%rdx),%r14
static int cleanup_hash_pbn(void *key, int32_t ksize, void *value,
    5ef9:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    5f00:	00 00 
    5f02:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    5f06:	31 c0                	xor    %eax,%eax
	struct dedup_config *dc = (struct dedup_config *)data;
    5f08:	4d 85 c0             	test   %r8,%r8
	int r = 0;
    5f0b:	4c 89 75 c8          	mov    %r14,-0x38(%rbp)
	struct dedup_config *dc = (struct dedup_config *)data;
    5f0f:	0f 84 b1 00 00 00    	je     5fc6 <cleanup_hash_pbn+0xe6>
	pbn_val = hashpbn_value.pbn;
    5f15:	49 8b 80 b8 03 00 00 	mov    0x3b8(%r8),%rax
    5f1c:	4c 89 c3             	mov    %r8,%rbx
    5f1f:	41 89 f5             	mov    %esi,%r13d
    5f22:	49 89 fc             	mov    %rdi,%r12
    5f25:	4c 89 f6             	mov    %r14,%rsi
    5f28:	49 8b b8 c0 03 00 00 	mov    0x3c0(%r8),%rdi
    5f2f:	48 8b 40 38          	mov    0x38(%rax),%rax
    5f33:	e8 00 00 00 00       	callq  5f38 <cleanup_hash_pbn+0x58>
			    s32 vsize, void *data)
    5f38:	45 31 c9             	xor    %r9d,%r9d
	pbn_val = hashpbn_value.pbn;
    5f3b:	83 f8 01             	cmp    $0x1,%eax
    5f3e:	41 89 c7             	mov    %eax,%r15d
    5f41:	75 62                	jne    5fa5 <cleanup_hash_pbn+0xc5>

    5f43:	48 8b bb c8 03 00 00 	mov    0x3c8(%rbx),%rdi
    5f4a:	44 89 ea             	mov    %r13d,%edx
    5f4d:	4c 89 e6             	mov    %r12,%rsi
    5f50:	48 8b 47 08          	mov    0x8(%rdi),%rax
    5f54:	e8 00 00 00 00       	callq  5f59 <cleanup_hash_pbn+0x79>
		r = dc->kvs_hash_pbn->kvs_delete(dc->kvs_hash_pbn,
    5f59:	85 c0                	test   %eax,%eax

    5f5b:	41 89 c1             	mov    %eax,%r9d
		r = dc->kvs_hash_pbn->kvs_delete(dc->kvs_hash_pbn,
    5f5e:	78 45                	js     5fa5 <cleanup_hash_pbn+0xc5>
		if (r < 0)
    5f60:	48 8b 83 b8 03 00 00 	mov    0x3b8(%rbx),%rax
    5f67:	48 8b bb c0 03 00 00 	mov    0x3c0(%rbx),%rdi
    5f6e:	4c 89 f6             	mov    %r14,%rsi
    5f71:	48 8b 40 30          	mov    0x30(%rax),%rax
    5f75:	e8 00 00 00 00       	callq  5f7a <cleanup_hash_pbn+0x9a>
			goto out;
    5f7a:	85 c0                	test   %eax,%eax
    5f7c:	89 45 c4             	mov    %eax,-0x3c(%rbp)
    5f7f:	79 47                	jns    5fc8 <cleanup_hash_pbn+0xe8>

    5f81:	48 8b bb c8 03 00 00 	mov    0x3c8(%rbx),%rdi
    5f88:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    5f8e:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
    5f92:	44 89 ea             	mov    %r13d,%edx
    5f95:	4c 89 e6             	mov    %r12,%rsi
    5f98:	48 8b 47 18          	mov    0x18(%rdi),%rax
    5f9c:	e8 00 00 00 00       	callq  5fa1 <cleanup_hash_pbn+0xc1>
    5fa1:	44 8b 4d c4          	mov    -0x3c(%rbp),%r9d
out:
    5fa5:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
    5fa9:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
    5fb0:	00 00 
    5fb2:	44 89 c8             	mov    %r9d,%eax
    5fb5:	75 6b                	jne    6022 <cleanup_hash_pbn+0x142>
    5fb7:	48 83 c4 18          	add    $0x18,%rsp
    5fbb:	5b                   	pop    %rbx
    5fbc:	41 5c                	pop    %r12
    5fbe:	41 5d                	pop    %r13
    5fc0:	41 5e                	pop    %r14
    5fc2:	41 5f                	pop    %r15
    5fc4:	5d                   	pop    %rbp
    5fc5:	c3                   	retq   
    5fc6:	0f 0b                	ud2    
	tmp = sector_div(lpn, align_size);
    5fc8:	31 d2                	xor    %edx,%edx
    5fca:	4c 89 f0             	mov    %r14,%rax
			goto out_dec_refcount;
    5fcd:	4c 89 f6             	mov    %r14,%rsi
	tmp = sector_div(lpn, align_size);
    5fd0:	48 f7 b3 98 02 00 00 	divq   0x298(%rbx)
			goto out_dec_refcount;
    5fd7:	48 89 df             	mov    %rbx,%rdi
    5fda:	e8 51 fe ff ff       	callq  5e30 <issue_discard>
		dc->gc_fp_count++;
    5fdf:	48 8b 83 30 02 00 00 	mov    0x230(%rbx),%rax

    5fe6:	48 83 ab c0 01 00 00 	subq   $0x1,0x1c0(%rbx)
    5fed:	01 
		issue_discard(dc, pbn_val, calculate_tarSSD(dc, pbn_val));
    5fee:	48 83 83 c8 01 00 00 	addq   $0x1,0x1c8(%rbx)
    5ff5:	01 
		dc->gc_cur_size++;
    5ff6:	44 8b 4d c4          	mov    -0x3c(%rbp),%r9d
		dc->physical_block_counter -= 1;
    5ffa:	48 83 83 08 02 00 00 	addq   $0x1,0x208(%rbx)
    6001:	01 
		dc->gc_fp_count++;
    6002:	48 83 c0 01          	add    $0x1,%rax
		dc->gc_counter++;
    6006:	48 83 ab 78 02 00 00 	subq   $0x1,0x278(%rbx)
    600d:	01 
		dc->gc_cur_size++;
    600e:	48 3b 83 28 02 00 00 	cmp    0x228(%rbx),%rax
		dc->gc_fp_count++;
    6015:	48 89 83 30 02 00 00 	mov    %rax,0x230(%rbx)
		dc->gc_cur_size++;
    601c:	45 0f 43 cf          	cmovae %r15d,%r9d
    6020:	eb 83                	jmp    5fa5 <cleanup_hash_pbn+0xc5>
out:
    6022:	e8 00 00 00 00       	callq  6027 <cleanup_hash_pbn+0x147>
    6027:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    602e:	00 00 

0000000000006030 <issue_begin_end>:

    6030:	e8 00 00 00 00       	callq  6035 <issue_begin_end+0x5>
    6035:	55                   	push   %rbp
	u32 id1, id2;
    6036:	48 c1 e6 03          	shl    $0x3,%rsi
	id2 = id;
    603a:	48 85 ff             	test   %rdi,%rdi

    603d:	48 89 e5             	mov    %rsp,%rbp
    6040:	53                   	push   %rbx
	id2 = id;
    6041:	74 2e                	je     6071 <issue_begin_end+0x41>
	BUG_ON(!dc);
    6043:	48 8b 07             	mov    (%rdi),%rax
    6046:	52                   	push   %rdx
    6047:	45 31 c0             	xor    %r8d,%r8d
    604a:	41 b9 ff ff ff ff    	mov    $0xffffffff,%r9d
    6050:	b9 00 00 60 00       	mov    $0x600000,%ecx
    6055:	ba 08 00 00 00       	mov    $0x8,%edx
    605a:	48 8b 38             	mov    (%rax),%rdi
    605d:	e8 00 00 00 00       	callq  6062 <issue_begin_end+0x32>
    6062:	89 c3                	mov    %eax,%ebx
	err = blkdev_issue_discard(dc->data_dev->bdev, dev_start,
    6064:	85 db                	test   %ebx,%ebx
    6066:	58                   	pop    %rax
    6067:	75 0a                	jne    6073 <issue_begin_end+0x43>
	}
    6069:	89 d8                	mov    %ebx,%eax
    606b:	48 8b 5d f8          	mov    -0x8(%rbp),%rbx
    606f:	c9                   	leaveq 
    6070:	c3                   	retq   
    6071:	0f 0b                	ud2    
			dev_end, GFP_NOIO, 0, id1, id2);
    6073:	89 de                	mov    %ebx,%esi
    6075:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    607c:	e8 00 00 00 00       	callq  6081 <issue_begin_end+0x51>
	if (err) {
    6081:	eb e6                	jmp    6069 <issue_begin_end+0x39>
    6083:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    608a:	00 00 00 00 
    608e:	66 90                	xchg   %ax,%ax

0000000000006090 <issue_remap>:
 */
    6090:	e8 00 00 00 00       	callq  6095 <issue_remap+0x5>
    6095:	55                   	push   %rbp
    6096:	49 89 d2             	mov    %rdx,%r10
    6099:	48 89 e5             	mov    %rsp,%rbp
    609c:	41 54                	push   %r12
	int err = 0;
    609e:	4c 8d 24 d5 00 00 00 	lea    0x0(,%rdx,8),%r12
    60a5:	00 
 */
    60a6:	53                   	push   %rbx
	offset = lpn % (dc->remote_len);
    60a7:	31 d2                	xor    %edx,%edx
	sector_t dev_start = lpn1 * 8, dev_end = 8, dev_s2 = lpn2 * 8;
    60a9:	4c 8b 9f 98 02 00 00 	mov    0x298(%rdi),%r11
	offset = lpn % (dc->remote_len);
    60b0:	4c 89 e0             	mov    %r12,%rax
    60b3:	48 f7 b7 90 02 00 00 	divq   0x290(%rdi)
	tmp = sector_div(lpn, align_size);
    60ba:	48 89 f0             	mov    %rsi,%rax
	offset = lpn % (dc->remote_len);
    60bd:	49 89 d0             	mov    %rdx,%r8
	tmp = sector_div(lpn, align_size);
    60c0:	31 d2                	xor    %edx,%edx
    60c2:	49 f7 f3             	div    %r11
    60c5:	4c 89 d0             	mov    %r10,%rax
    60c8:	48 89 d3             	mov    %rdx,%rbx
    60cb:	31 d2                	xor    %edx,%edx
    60cd:	49 f7 f3             	div    %r11
	id2 = calculate_tarSSD(dc, lpn2);
    60d0:	48 85 ff             	test   %rdi,%rdi
    60d3:	74 3a                	je     610f <issue_remap+0x7f>
	isremote = (id1 != id2) ? 1 : 0;
    60d5:	48 8b 07             	mov    (%rdi),%rax
    60d8:	6a 00                	pushq  $0x0
    60da:	48 c1 e6 03          	shl    $0x3,%rsi
    60de:	68 00 00 60 00       	pushq  $0x600000
    60e3:	6a 08                	pushq  $0x8
    60e5:	41 89 c9             	mov    %ecx,%r9d

    60e8:	31 c9                	xor    %ecx,%ecx
    60ea:	39 d3                	cmp    %edx,%ebx
	isremote = (id1 != id2) ? 1 : 0;
    60ec:	4c 89 e2             	mov    %r12,%rdx
    60ef:	48 8b 38             	mov    (%rax),%rdi

    60f2:	0f 95 c1             	setne  %cl
	isremote = (id1 != id2) ? 1 : 0;
    60f5:	e8 00 00 00 00       	callq  60fa <issue_remap+0x6a>
	err = blkdev_issue_remap(dc->data_dev->bdev, dev_start, dev_s2, isremote, entry_offset, last,
    60fa:	48 83 c4 18          	add    $0x18,%rsp
    60fe:	85 c0                	test   %eax,%eax
	isremote = (id1 != id2) ? 1 : 0;
    6100:	89 c3                	mov    %eax,%ebx
	err = blkdev_issue_remap(dc->data_dev->bdev, dev_start, dev_s2, isremote, entry_offset, last,
    6102:	75 0d                	jne    6111 <issue_remap+0x81>
	}
    6104:	48 8d 65 f0          	lea    -0x10(%rbp),%rsp
    6108:	89 d8                	mov    %ebx,%eax
    610a:	5b                   	pop    %rbx
    610b:	41 5c                	pop    %r12
    610d:	5d                   	pop    %rbp
    610e:	c3                   	retq   
    610f:	0f 0b                	ud2    
		dev_end, GFP_NOIO, 0);
    6111:	89 c6                	mov    %eax,%esi
    6113:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    611a:	e8 00 00 00 00       	callq  611f <issue_remap+0x8f>
	if (err) {
    611f:	eb e3                	jmp    6104 <issue_remap+0x74>
    6121:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    6128:	00 00 00 00 
    612c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000006130 <dm_dedup_message>:
 *
 * Returns -ERR code in failure.
 * Returns 0 on success.
 */
static int dm_dedup_message(struct dm_target *ti,
			    unsigned int argc, char **argv,
    6130:	e8 00 00 00 00       	callq  6135 <dm_dedup_message+0x5>
    6135:	55                   	push   %rbp
    6136:	48 89 e5             	mov    %rsp,%rbp
    6139:	41 57                	push   %r15
    613b:	41 56                	push   %r14
    613d:	41 55                	push   %r13
    613f:	41 54                	push   %r12
    6141:	53                   	push   %rbx
			    char *result, unsigned maxlen)
{
	int r = 0, i = 0;
	uint64_t lpn1 = 0, lpn2 = 0;
    6142:	48 8b 5f 40          	mov    0x40(%rdi),%rbx

    6146:	48 85 db             	test   %rbx,%rbx
    6149:	0f 84 70 02 00 00    	je     63bf <dm_dedup_message+0x28f>
	struct dedup_config *dc = ti->private;
	BUG_ON(!dc);
    614f:	4c 8b 3a             	mov    (%rdx),%r15
    6152:	41 89 f6             	mov    %esi,%r14d
    6155:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    615c:	49 89 d4             	mov    %rdx,%r12
    615f:	4c 89 ff             	mov    %r15,%rdi
    6162:	e8 00 00 00 00       	callq  6167 <dm_dedup_message+0x37>
    6167:	85 c0                	test   %eax,%eax
    6169:	0f 84 61 01 00 00    	je     62d0 <dm_dedup_message+0x1a0>

	if (!strcasecmp(argv[0], "garbage_collect")) {
		r = garbage_collect(dc);
		if (r < 0)
    616f:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    6176:	4c 89 ff             	mov    %r15,%rdi
    6179:	e8 00 00 00 00       	callq  617e <dm_dedup_message+0x4e>
    617e:	85 c0                	test   %eax,%eax
    6180:	0f 85 9d 00 00 00    	jne    6223 <dm_dedup_message+0xf3>
			DMERR("Error in performing garbage_collect: %d.", r);
    6186:	31 c0                	xor    %eax,%eax
    6188:	48 83 bb a0 02 00 00 	cmpq   $0x0,0x2a0(%rbx)
    618f:	00 
    6190:	0f 94 c0             	sete   %al
	} else if (!strcasecmp(argv[0], "notice")) {
    6193:	41 83 fe 02          	cmp    $0x2,%r14d
			DMERR("Error in performing garbage_collect: %d.", r);
    6197:	48 89 83 a0 02 00 00 	mov    %rax,0x2a0(%rbx)
	} else if (!strcasecmp(argv[0], "notice")) {
    619e:	0f 85 8b 03 00 00    	jne    652f <dm_dedup_message+0x3ff>
		dc->enable_time_stats = dc->enable_time_stats ? 0 : 1;
		if (argc != 2) {
			DMINFO("Incomplete message: Usage notice <begin/end>");
    61a4:	4d 8b 6c 24 08       	mov    0x8(%r12),%r13
    61a9:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    61b0:	4c 89 ef             	mov    %r13,%rdi
    61b3:	e8 00 00 00 00       	callq  61b8 <dm_dedup_message+0x88>
    61b8:	85 c0                	test   %eax,%eax
    61ba:	41 89 c4             	mov    %eax,%r12d
    61bd:	0f 84 c3 01 00 00    	je     6386 <dm_dedup_message+0x256>
			r = -EINVAL;
        } else if (!strcasecmp(argv[1], "begin")){
			//lpn1 = intStr2int(argv[2], strlen(argv[2]));
			//DMINFO("lpn = %llx", (unsigned long long)lpn1);
			for(i = 0; i < dc->ssd_num; ++i) {
				r = issue_begin_end(dc, i, -1);
    61c3:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    61ca:	4c 89 ef             	mov    %r13,%rdi
    61cd:	e8 00 00 00 00       	callq  61d2 <dm_dedup_message+0xa2>
    61d2:	85 c0                	test   %eax,%eax
    61d4:	41 89 c4             	mov    %eax,%r12d
    61d7:	75 39                	jne    6212 <dm_dedup_message+0xe2>
			}
    61d9:	48 83 bb 98 02 00 00 	cmpq   $0x0,0x298(%rbx)
    61e0:	00 
    61e1:	74 2f                	je     6212 <dm_dedup_message+0xe2>
    61e3:	31 f6                	xor    %esi,%esi
		} else if (!strcasecmp(argv[1], "end")){
    61e5:	41 be fe ff ff ff    	mov    $0xfffffffe,%r14d
			}
    61eb:	41 83 c4 01          	add    $0x1,%r12d
		} else if (!strcasecmp(argv[1], "end")){
    61ef:	44 89 f2             	mov    %r14d,%edx
    61f2:	48 89 df             	mov    %rbx,%rdi
    61f5:	e8 36 fe ff ff       	callq  6030 <issue_begin_end>
			}
    61fa:	49 63 f4             	movslq %r12d,%rsi
    61fd:	48 3b b3 98 02 00 00 	cmp    0x298(%rbx),%rsi
		} else if (!strcasecmp(argv[1], "end")){
    6204:	41 89 c5             	mov    %eax,%r13d
			}
    6207:	72 e2                	jb     61eb <dm_dedup_message+0xbb>
			for(i = 0; i < dc->ssd_num; ++i) {
				r = issue_begin_end(dc, i, -2);
			}
    6209:	45 85 ed             	test   %r13d,%r13d
    620c:	0f 85 2f 03 00 00    	jne    6541 <dm_dedup_message+0x411>
                } else if (!strcasecmp(argv[1], "0")) {
                        dc->fec = false;
                        dc->check_corruption = false;
                } else {
                        r = -EINVAL;
                }
    6212:	45 31 ed             	xor    %r13d,%r13d
	} else {
		r = -EINVAL;
	}

    6215:	5b                   	pop    %rbx
    6216:	44 89 e8             	mov    %r13d,%eax
    6219:	41 5c                	pop    %r12
    621b:	41 5d                	pop    %r13
    621d:	41 5e                	pop    %r14
    621f:	41 5f                	pop    %r15
    6221:	5d                   	pop    %rbp
    6222:	c3                   	retq   
		if (r)
    6223:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    622a:	4c 89 ff             	mov    %r15,%rdi
    622d:	e8 00 00 00 00       	callq  6232 <dm_dedup_message+0x102>
    6232:	85 c0                	test   %eax,%eax
    6234:	0f 85 b7 00 00 00    	jne    62f1 <dm_dedup_message+0x1c1>
			DMERR("Error in issue begin_end: %d.", r);
    623a:	41 83 fe 02          	cmp    $0x2,%r14d
    623e:	0f 85 11 03 00 00    	jne    6555 <dm_dedup_message+0x425>
			DMINFO("Incomplete message: Usage gc_setting <type> <percent/constant>");
    6244:	4d 8b 74 24 08       	mov    0x8(%r12),%r14
    6249:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    6250:	4c 89 f7             	mov    %r14,%rdi
    6253:	e8 00 00 00 00       	callq  6258 <dm_dedup_message+0x128>
    6258:	85 c0                	test   %eax,%eax
    625a:	41 89 c5             	mov    %eax,%r13d
    625d:	0f 85 ff 01 00 00    	jne    6462 <dm_dedup_message+0x332>
			r = -EINVAL;
    6263:	4d 8b 64 24 10       	mov    0x10(%r12),%r12
		return __builtin_strlen(p);
    6268:	4c 89 e7             	mov    %r12,%rdi
    626b:	e8 00 00 00 00       	callq  6270 <dm_dedup_message+0x140>
	char c = '0';
    6270:	85 c0                	test   %eax,%eax
    6272:	0f 8e 8e 02 00 00    	jle    6506 <dm_dedup_message+0x3d6>
    6278:	83 e8 01             	sub    $0x1,%eax
    627b:	4c 89 e7             	mov    %r12,%rdi
	int i = 0;
    627e:	31 d2                	xor    %edx,%edx
    6280:	49 8d 74 04 01       	lea    0x1(%r12,%rax,1),%rsi
    uint64_t x = 0;
    6285:	0f be 07             	movsbl (%rdi),%eax
    for(i = 0; i < len; ++i) {
    6288:	48 8d 14 92          	lea    (%rdx,%rdx,4),%rdx
    628c:	48 01 d2             	add    %rdx,%rdx
        c = s[i];
    628f:	8d 48 d0             	lea    -0x30(%rax),%ecx
    6292:	80 f9 09             	cmp    $0x9,%cl
    6295:	77 08                	ja     629f <dm_dedup_message+0x16f>
        x *= 10;
    6297:	83 e8 30             	sub    $0x30,%eax
    629a:	48 98                	cltq   
    629c:	48 01 c2             	add    %rax,%rdx
    629f:	48 83 c7 01          	add    $0x1,%rdi
	char c = '0';
    62a3:	48 39 fe             	cmp    %rdi,%rsi
    62a6:	75 dd                	jne    6285 <dm_dedup_message+0x155>
        } else if (!strcasecmp(argv[1], "p")){
    62a8:	8b 43 18             	mov    0x18(%rbx),%eax
    62ab:	48 b9 c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rcx
    62b2:	c2 f5 28 
    62b5:	48 0f af d0          	imul   %rax,%rdx
    62b9:	48 c1 ea 02          	shr    $0x2,%rdx
    62bd:	48 89 d0             	mov    %rdx,%rax
    62c0:	48 f7 e1             	mul    %rcx
    62c3:	48 c1 ea 02          	shr    $0x2,%rdx
    62c7:	48 89 93 10 02 00 00 	mov    %rdx,0x210(%rbx)
    62ce:	eb 13                	jmp    62e3 <dm_dedup_message+0x1b3>

    62d0:	48 89 df             	mov    %rbx,%rdi
    62d3:	e8 48 f3 ff ff       	callq  5620 <garbage_collect>
	if (!strcasecmp(argv[0], "garbage_collect")) {
    62d8:	85 c0                	test   %eax,%eax

    62da:	41 89 c5             	mov    %eax,%r13d
	if (!strcasecmp(argv[0], "garbage_collect")) {
    62dd:	0f 88 a5 02 00 00    	js     6588 <dm_dedup_message+0x458>

    62e3:	5b                   	pop    %rbx
    62e4:	44 89 e8             	mov    %r13d,%eax
    62e7:	41 5c                	pop    %r12
    62e9:	41 5d                	pop    %r13
    62eb:	41 5e                	pop    %r14
    62ed:	41 5f                	pop    %r15
    62ef:	5d                   	pop    %rbp
    62f0:	c3                   	retq   
		if (r)
    62f1:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    62f8:	4c 89 ff             	mov    %r15,%rdi
    62fb:	e8 00 00 00 00       	callq  6300 <dm_dedup_message+0x1d0>
    6300:	85 c0                	test   %eax,%eax
    6302:	0f 85 b9 00 00 00    	jne    63c1 <dm_dedup_message+0x291>
			DMERR("Error in issue begin_end: %d.", r);
    6308:	41 83 fe 03          	cmp    $0x3,%r14d
    630c:	0f 85 a0 02 00 00    	jne    65b2 <dm_dedup_message+0x482>
			r = -EINVAL;
    6312:	4d 8b 6c 24 08       	mov    0x8(%r12),%r13
    6317:	4c 89 ef             	mov    %r13,%rdi
    631a:	e8 00 00 00 00       	callq  631f <dm_dedup_message+0x1ef>
    631f:	4c 89 ef             	mov    %r13,%rdi
    6322:	89 c6                	mov    %eax,%esi
    6324:	e8 17 f1 ff ff       	callq  5440 <hexStr2int>
        } else {
    6329:	4d 8b 64 24 10       	mov    0x10(%r12),%r12
			r = -EINVAL;
    632e:	49 89 c5             	mov    %rax,%r13
    6331:	4c 89 e7             	mov    %r12,%rdi
    6334:	e8 00 00 00 00       	callq  6339 <dm_dedup_message+0x209>
        } else {
    6339:	4c 89 e7             	mov    %r12,%rdi
    633c:	89 c6                	mov    %eax,%esi
    633e:	e8 fd f0 ff ff       	callq  5440 <hexStr2int>
			lpn1 = hexStr2int(argv[1], strlen(argv[1]));
    6343:	4c 89 ee             	mov    %r13,%rsi
    6346:	48 89 c2             	mov    %rax,%rdx
    6349:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
        } else {
    6350:	49 89 c4             	mov    %rax,%r12
			lpn1 = hexStr2int(argv[1], strlen(argv[1]));
    6353:	e8 00 00 00 00       	callq  6358 <dm_dedup_message+0x228>
			DMINFO("lpn1 = %llx , lpn2 = %llx", (unsigned long long)lpn1, (unsigned long long)lpn2);
    6358:	31 c9                	xor    %ecx,%ecx
    635a:	4c 89 ee             	mov    %r13,%rsi
    635d:	4c 89 e2             	mov    %r12,%rdx
    6360:	48 89 df             	mov    %rbx,%rdi
    6363:	e8 28 fd ff ff       	callq  6090 <issue_remap>
		}
    6368:	85 c0                	test   %eax,%eax
			DMINFO("lpn1 = %llx , lpn2 = %llx", (unsigned long long)lpn1, (unsigned long long)lpn2);
    636a:	41 89 c5             	mov    %eax,%r13d
		}
    636d:	0f 84 70 ff ff ff    	je     62e3 <dm_dedup_message+0x1b3>
		r = issue_remap(dc, lpn1, lpn2, 0);
    6373:	89 c6                	mov    %eax,%esi
    6375:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    637c:	e8 00 00 00 00       	callq  6381 <dm_dedup_message+0x251>
    6381:	e9 5d ff ff ff       	jmpq   62e3 <dm_dedup_message+0x1b3>
			//lpn1 = intStr2int(argv[2], strlen(argv[2]));
    6386:	31 f6                	xor    %esi,%esi
    6388:	48 83 bb 98 02 00 00 	cmpq   $0x0,0x298(%rbx)
    638f:	00 
			//DMINFO("lpn = %llx", (unsigned long long)lpn1);
    6390:	41 be ff ff ff ff    	mov    $0xffffffff,%r14d
			//lpn1 = intStr2int(argv[2], strlen(argv[2]));
    6396:	0f 84 76 fe ff ff    	je     6212 <dm_dedup_message+0xe2>
    639c:	41 83 c4 01          	add    $0x1,%r12d
			//DMINFO("lpn = %llx", (unsigned long long)lpn1);
    63a0:	44 89 f2             	mov    %r14d,%edx
    63a3:	48 89 df             	mov    %rbx,%rdi
    63a6:	e8 85 fc ff ff       	callq  6030 <issue_begin_end>
			//lpn1 = intStr2int(argv[2], strlen(argv[2]));
    63ab:	49 63 f4             	movslq %r12d,%rsi
    63ae:	48 3b b3 98 02 00 00 	cmp    0x298(%rbx),%rsi
			//DMINFO("lpn = %llx", (unsigned long long)lpn1);
    63b5:	41 89 c5             	mov    %eax,%r13d
			//lpn1 = intStr2int(argv[2], strlen(argv[2]));
    63b8:	72 e2                	jb     639c <dm_dedup_message+0x26c>
    63ba:	e9 4a fe ff ff       	jmpq   6209 <dm_dedup_message+0xd9>
    63bf:	0f 0b                	ud2    
		if (r)
    63c1:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    63c8:	4c 89 ff             	mov    %r15,%rdi
    63cb:	e8 00 00 00 00       	callq  63d0 <dm_dedup_message+0x2a0>
    63d0:	85 c0                	test   %eax,%eax
    63d2:	41 89 c5             	mov    %eax,%r13d
    63d5:	0f 84 f3 00 00 00    	je     64ce <dm_dedup_message+0x39e>
		else
    63db:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    63e2:	4c 89 ff             	mov    %r15,%rdi
    63e5:	e8 00 00 00 00       	callq  63ea <dm_dedup_message+0x2ba>
    63ea:	85 c0                	test   %eax,%eax
    63ec:	0f 85 32 01 00 00    	jne    6524 <dm_dedup_message+0x3f4>
			r = -ENOTSUPP;
    63f2:	41 83 fe 02          	cmp    $0x2,%r14d
    63f6:	0f 85 9f 01 00 00    	jne    659b <dm_dedup_message+0x46b>
				"2 - Enable FEC flag  (also enable corruption check if disabled)");
    63fc:	4d 8b 64 24 08       	mov    0x8(%r12),%r12
    6401:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    6408:	4c 89 e7             	mov    %r12,%rdi
    640b:	e8 00 00 00 00       	callq  6410 <dm_dedup_message+0x2e0>
    6410:	85 c0                	test   %eax,%eax
    6412:	41 89 c5             	mov    %eax,%r13d
    6415:	0f 84 d8 00 00 00    	je     64f3 <dm_dedup_message+0x3c3>
                        dc->check_corruption = true;
    641b:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    6422:	4c 89 e7             	mov    %r12,%rdi
    6425:	e8 00 00 00 00       	callq  642a <dm_dedup_message+0x2fa>
    642a:	85 c0                	test   %eax,%eax
    642c:	41 89 c5             	mov    %eax,%r13d
    642f:	0f 84 d8 00 00 00    	je     650d <dm_dedup_message+0x3dd>
                        dc->check_corruption = true;
    6435:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    643c:	4c 89 e7             	mov    %r12,%rdi
    643f:	e8 00 00 00 00       	callq  6444 <dm_dedup_message+0x314>
    6444:	85 c0                	test   %eax,%eax
    6446:	41 89 c5             	mov    %eax,%r13d
    6449:	0f 85 d5 00 00 00    	jne    6524 <dm_dedup_message+0x3f4>
                        dc->fec = true;
    644f:	c6 83 59 03 00 00 00 	movb   $0x0,0x359(%rbx)
                } else if (!strcasecmp(argv[1], "0")) {
    6456:	c6 83 58 03 00 00 00 	movb   $0x0,0x358(%rbx)
    645d:	e9 81 fe ff ff       	jmpq   62e3 <dm_dedup_message+0x1b3>
			lpn1 = intStr2int(argv[2], strlen(argv[2]));
    6462:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    6469:	4c 89 f7             	mov    %r14,%rdi
    646c:	e8 00 00 00 00       	callq  6471 <dm_dedup_message+0x341>
    6471:	85 c0                	test   %eax,%eax
    6473:	41 89 c5             	mov    %eax,%r13d
    6476:	0f 85 96 fd ff ff    	jne    6212 <dm_dedup_message+0xe2>
			dc->gc_threhold = dc->pblocks * lpn1 / 100;
    647c:	4d 8b 64 24 10       	mov    0x10(%r12),%r12
    6481:	4c 89 e7             	mov    %r12,%rdi
    6484:	e8 00 00 00 00       	callq  6489 <dm_dedup_message+0x359>
	char c = '0';
    6489:	85 c0                	test   %eax,%eax
    648b:	0f 8e 8f 00 00 00    	jle    6520 <dm_dedup_message+0x3f0>
    6491:	83 e8 01             	sub    $0x1,%eax
    6494:	4c 89 e7             	mov    %r12,%rdi
    6497:	49 8d 74 04 01       	lea    0x1(%r12,%rax,1),%rsi
	int i = 0;
    649c:	31 c0                	xor    %eax,%eax
    uint64_t x = 0;
    649e:	0f be 17             	movsbl (%rdi),%edx
    for(i = 0; i < len; ++i) {
    64a1:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
    64a5:	48 01 c0             	add    %rax,%rax
        c = s[i];
    64a8:	8d 4a d0             	lea    -0x30(%rdx),%ecx
    64ab:	80 f9 09             	cmp    $0x9,%cl
    64ae:	77 09                	ja     64b9 <dm_dedup_message+0x389>
        x *= 10;
    64b0:	83 ea 30             	sub    $0x30,%edx
    64b3:	48 63 d2             	movslq %edx,%rdx
    64b6:	48 01 d0             	add    %rdx,%rax
    64b9:	48 83 c7 01          	add    $0x1,%rdi
	char c = '0';
    64bd:	48 39 fe             	cmp    %rdi,%rsi
    64c0:	75 dc                	jne    649e <dm_dedup_message+0x36e>
		} else if (!strcasecmp(argv[1], "c")){
    64c2:	48 89 83 10 02 00 00 	mov    %rax,0x210(%rbx)
    64c9:	e9 15 fe ff ff       	jmpq   62e3 <dm_dedup_message+0x1b3>
			DMERR("Error in issue remap: %d.", r);
    64ce:	48 8b 83 b8 03 00 00 	mov    0x3b8(%rbx),%rax
    64d5:	48 8b 40 60          	mov    0x60(%rax),%rax
    64d9:	48 85 c0             	test   %rax,%rax
    64dc:	0f 84 9b 00 00 00    	je     657d <dm_dedup_message+0x44d>
	} else if (!strcasecmp(argv[0], "drop_bufio_cache")) {
    64e2:	48 8b bb c0 03 00 00 	mov    0x3c0(%rbx),%rdi
    64e9:	e8 00 00 00 00       	callq  64ee <dm_dedup_message+0x3be>
    64ee:	e9 f0 fd ff ff       	jmpq   62e3 <dm_dedup_message+0x1b3>
                        r = -EINVAL;
    64f3:	c6 83 58 03 00 00 01 	movb   $0x1,0x358(%rbx)
                } else if (!strcasecmp(argv[1], "1")) {
    64fa:	c6 83 59 03 00 00 00 	movb   $0x0,0x359(%rbx)
    6501:	e9 dd fd ff ff       	jmpq   62e3 <dm_dedup_message+0x1b3>
	int i = 0;
    6506:	31 d2                	xor    %edx,%edx
    6508:	e9 9b fd ff ff       	jmpq   62a8 <dm_dedup_message+0x178>
                        dc->fec = false;
    650d:	c6 83 58 03 00 00 01 	movb   $0x1,0x358(%rbx)
                } else if (!strcasecmp(argv[1], "2")) {
    6514:	c6 83 59 03 00 00 01 	movb   $0x1,0x359(%rbx)
    651b:	e9 c3 fd ff ff       	jmpq   62e3 <dm_dedup_message+0x1b3>
	int i = 0;
    6520:	31 c0                	xor    %eax,%eax
    6522:	eb 9e                	jmp    64c2 <dm_dedup_message+0x392>
                }
    6524:	41 bd ea ff ff ff    	mov    $0xffffffea,%r13d
	}
    652a:	e9 b4 fd ff ff       	jmpq   62e3 <dm_dedup_message+0x1b3>
		dc->enable_time_stats = dc->enable_time_stats ? 0 : 1;
    652f:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
		if (argc != 2) {
    6536:	41 bd ea ff ff ff    	mov    $0xffffffea,%r13d
		dc->enable_time_stats = dc->enable_time_stats ? 0 : 1;
    653c:	e8 00 00 00 00       	callq  6541 <dm_dedup_message+0x411>
		}
    6541:	44 89 ee             	mov    %r13d,%esi
    6544:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    654b:	e8 00 00 00 00       	callq  6550 <dm_dedup_message+0x420>
    6550:	e9 8e fd ff ff       	jmpq   62e3 <dm_dedup_message+0x1b3>
	} else if (!strcasecmp(argv[0], "gc_setting")) {
    6555:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
		if (argc != 2) {
    655c:	41 bd ea ff ff ff    	mov    $0xffffffea,%r13d
	} else if (!strcasecmp(argv[0], "gc_setting")) {
    6562:	e8 00 00 00 00       	callq  6567 <dm_dedup_message+0x437>
		}
    6567:	be ea ff ff ff       	mov    $0xffffffea,%esi
    656c:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    6573:	e8 00 00 00 00       	callq  6578 <dm_dedup_message+0x448>
    6578:	e9 66 fd ff ff       	jmpq   62e3 <dm_dedup_message+0x1b3>
			dc->mdops->flush_bufio_cache(dc->bmd);
    657d:	41 bd f4 fd ff ff    	mov    $0xfffffdf4,%r13d
    6583:	e9 5b fd ff ff       	jmpq   62e3 <dm_dedup_message+0x1b3>
		r = garbage_collect(dc);
    6588:	89 c6                	mov    %eax,%esi
    658a:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    6591:	e8 00 00 00 00       	callq  6596 <dm_dedup_message+0x466>
    6596:	e9 48 fd ff ff       	jmpq   62e3 <dm_dedup_message+0x1b3>
	} else if (!strcasecmp(argv[0], "corruption")) {
    659b:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
				"1 - Enable corruption check, "
    65a2:	41 bd ea ff ff ff    	mov    $0xffffffea,%r13d
	} else if (!strcasecmp(argv[0], "corruption")) {
    65a8:	e8 00 00 00 00       	callq  65ad <dm_dedup_message+0x47d>
    65ad:	e9 31 fd ff ff       	jmpq   62e3 <dm_dedup_message+0x1b3>
	} else if (!strcasecmp(argv[0], "remap")) {
    65b2:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
{
    65b9:	45 31 e4             	xor    %r12d,%r12d
    65bc:	45 31 ed             	xor    %r13d,%r13d
	} else if (!strcasecmp(argv[0], "remap")) {
    65bf:	e8 00 00 00 00       	callq  65c4 <dm_dedup_message+0x494>
    65c4:	e9 8f fd ff ff       	jmpq   6358 <dm_dedup_message+0x228>
    65c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000065d0 <do_remap_or_discard_work>:
static void do_remap_or_discard_work(struct work_struct *ws) {
    65d0:	e8 00 00 00 00       	callq  65d5 <do_remap_or_discard_work+0x5>
    65d5:	55                   	push   %rbp
    65d6:	48 89 e5             	mov    %rsp,%rbp
    65d9:	41 57                	push   %r15
    65db:	41 56                	push   %r14
    65dd:	41 55                	push   %r13
    65df:	41 54                	push   %r12
    65e1:	53                   	push   %rbx
    struct dedup_config *config = (struct dedup_config *)work->config;
    65e2:	48 8b 5f 20          	mov    0x20(%rdi),%rbx
    int flag = (int)work->flag;
    65e6:	44 8b 7f 3c          	mov    0x3c(%rdi),%r15d
    u64 pbn = (u64)work->pbn;
    65ea:	4c 8b 77 28          	mov    0x28(%rdi),%r14
    u64 lbn = (u64)work->lbn;
    65ee:	4c 8b 67 30          	mov    0x30(%rdi),%r12
    int temp = (int)work->temp;
    65f2:	44 8b 6f 38          	mov    0x38(%rdi),%r13d
    mempool_free(work, config->remap_or_discard_work_pool);
    65f6:	48 8b b3 28 04 00 00 	mov    0x428(%rbx),%rsi
    65fd:	e8 00 00 00 00       	callq  6602 <do_remap_or_discard_work+0x32>
    config->remap_or_discard_work_pool_counter--;
    6602:	48 83 ab 40 04 00 00 	subq   $0x1,0x440(%rbx)
    6609:	01 
    if(flag)
    660a:	45 85 ff             	test   %r15d,%r15d
    660d:	75 19                	jne    6628 <do_remap_or_discard_work+0x58>
	issue_discard(config, lbn, temp);
    660f:	44 89 ea             	mov    %r13d,%edx
    6612:	4c 89 e6             	mov    %r12,%rsi
    6615:	48 89 df             	mov    %rbx,%rdi
    6618:	e8 13 f8 ff ff       	callq  5e30 <issue_discard>
}
    661d:	5b                   	pop    %rbx
    661e:	41 5c                	pop    %r12
    6620:	41 5d                	pop    %r13
    6622:	41 5e                	pop    %r14
    6624:	41 5f                	pop    %r15
    6626:	5d                   	pop    %rbp
    6627:	c3                   	retq   
	issue_remap(config, pbn, lbn, temp);
    6628:	44 89 e9             	mov    %r13d,%ecx
    662b:	4c 89 e2             	mov    %r12,%rdx
    662e:	4c 89 f6             	mov    %r14,%rsi
    6631:	48 89 df             	mov    %rbx,%rdi
    6634:	e8 57 fa ff ff       	callq  6090 <issue_remap>
}
    6639:	5b                   	pop    %rbx
    663a:	41 5c                	pop    %r12
    663c:	41 5d                	pop    %r13
    663e:	41 5e                	pop    %r14
    6640:	41 5f                	pop    %r15
    6642:	5d                   	pop    %rbp
    6643:	c3                   	retq   
    6644:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    664b:	00 00 00 00 
    664f:	90                   	nop

0000000000006650 <do_io_remap_device.isra.10>:
static void do_io_remap_device(struct dedup_config *dc, struct bio *bio)
    6650:	e8 00 00 00 00       	callq  6655 <do_io_remap_device.isra.10+0x5>
    6655:	55                   	push   %rbp
	bio_set_dev(bio, dc->data_dev->bdev);
    6656:	48 8b 07             	mov    (%rdi),%rax
static void do_io_remap_device(struct dedup_config *dc, struct bio *bio)
    6659:	48 89 e5             	mov    %rsp,%rbp
	bio_set_dev(bio, dc->data_dev->bdev);
    665c:	48 8b 00             	mov    (%rax),%rax
    665f:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    6666:	48 39 46 08          	cmp    %rax,0x8(%rsi)
    666a:	74 13                	je     667f <do_io_remap_device.isra.10+0x2f>
	bio->bi_flags &= ~(1U << bit);
    666c:	66 81 66 14 ff fd    	andw   $0xfdff,0x14(%rsi)
    6672:	48 8b 07             	mov    (%rdi),%rax
    6675:	48 8b 00             	mov    (%rax),%rax
    6678:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
    667f:	48 89 46 08          	mov    %rax,0x8(%rsi)
    6683:	48 8b 07             	mov    (%rdi),%rax
	generic_make_request(bio);
    6686:	48 89 f7             	mov    %rsi,%rdi
	bio_set_dev(bio, dc->data_dev->bdev);
    6689:	48 8b 00             	mov    (%rax),%rax
    668c:	0f b6 40 6c          	movzbl 0x6c(%rax),%eax
    6690:	88 46 1b             	mov    %al,0x1b(%rsi)
	generic_make_request(bio);
    6693:	e8 00 00 00 00       	callq  6698 <do_io_remap_device.isra.10+0x48>
}
    6698:	5d                   	pop    %rbp
    6699:	c3                   	retq   
    669a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000000066a0 <handle_write_no_hash_xremap>:
{
    66a0:	e8 00 00 00 00       	callq  66a5 <handle_write_no_hash_xremap+0x5>
    66a5:	55                   	push   %rbp
    66a6:	48 89 e5             	mov    %rsp,%rbp
    66a9:	41 57                	push   %r15
    66ab:	41 56                	push   %r14
    66ad:	41 55                	push   %r13
    66af:	41 54                	push   %r12
    66b1:	49 89 f6             	mov    %rsi,%r14
    66b4:	53                   	push   %rbx
    66b5:	48 89 fb             	mov    %rdi,%rbx
    66b8:	49 89 d4             	mov    %rdx,%r12
    66bb:	49 89 cd             	mov    %rcx,%r13
	ref = dc->mdops->get_refcount(dc->bmd, lbn);
    66be:	48 89 d6             	mov    %rdx,%rsi
{
    66c1:	48 83 ec 20          	sub    $0x20,%rsp
	t = calculate_tarSSD(dc, lbn);
    66c5:	4c 8b bf 98 02 00 00 	mov    0x298(%rdi),%r15
	ref = dc->mdops->get_refcount(dc->bmd, lbn);
    66cc:	48 8b bf c0 03 00 00 	mov    0x3c0(%rdi),%rdi
{
    66d3:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    66da:	00 00 
    66dc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    66e0:	31 c0                	xor    %eax,%eax
	ref = dc->mdops->get_refcount(dc->bmd, lbn);
    66e2:	48 8b 83 b8 03 00 00 	mov    0x3b8(%rbx),%rax
    66e9:	48 8b 40 38          	mov    0x38(%rax),%rax
    66ed:	e8 00 00 00 00       	callq  66f2 <handle_write_no_hash_xremap+0x52>
	if(tv.type == 1){
    66f2:	84 c0                	test   %al,%al
    66f4:	0f 88 9d 01 00 00    	js     6897 <handle_write_no_hash_xremap+0x1f7>
	r = dc->mdops->inc_refcount(dc->bmd, lbn);
    66fa:	48 8b 83 b8 03 00 00 	mov    0x3b8(%rbx),%rax
    6701:	48 8b bb c0 03 00 00 	mov    0x3c0(%rbx),%rdi
    6708:	4c 89 e6             	mov    %r12,%rsi
    670b:	48 8b 40 28          	mov    0x28(%rax),%rax
    670f:	e8 00 00 00 00       	callq  6714 <handle_write_no_hash_xremap+0x74>
	r = dc->mdops->get_refcount(dc->bmd, lbn);
    6714:	48 8b 83 b8 03 00 00 	mov    0x3b8(%rbx),%rax
    671b:	48 8b bb c0 03 00 00 	mov    0x3c0(%rbx),%rdi
    6722:	4c 89 e6             	mov    %r12,%rsi
    6725:	48 8b 40 38          	mov    0x38(%rax),%rax
    6729:	e8 00 00 00 00       	callq  672e <handle_write_no_hash_xremap+0x8e>
	tv.ver = (r & TV_VER);
    672e:	89 c1                	mov    %eax,%ecx
	tv.type = (r & TV_TYPE) != 0;
    6730:	89 c2                	mov    %eax,%edx
	tv.ver = (r & TV_VER);
    6732:	83 e1 7f             	and    $0x7f,%ecx
	tv.type = (r & TV_TYPE) != 0;
    6735:	c0 ea 07             	shr    $0x7,%dl
	if(tv.ver >= TV_MAX) {
    6738:	80 f9 7f             	cmp    $0x7f,%cl
    673b:	75 0b                	jne    6748 <handle_write_no_hash_xremap+0xa8>
		dc->gc_needed = 1;
    673d:	48 c7 83 20 02 00 00 	movq   $0x1,0x220(%rbx)
    6744:	01 00 00 00 
	hashpbn_value_x.tv.ver = tv.ver;
    6748:	89 d0                	mov    %edx,%eax
	hashpbn_value_x.pbn = lbn;
    674a:	4c 89 65 c0          	mov    %r12,-0x40(%rbp)
	hashpbn_value_x.tv.ver = tv.ver;
    674e:	c1 e0 07             	shl    $0x7,%eax
    6751:	09 c8                	or     %ecx,%eax
    6753:	88 45 c8             	mov    %al,-0x38(%rbp)
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    6756:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    6758:	48 83 bb a0 02 00 00 	cmpq   $0x0,0x2a0(%rbx)
    675f:	00 
    6760:	74 10                	je     6772 <handle_write_no_hash_xremap+0xd2>
    var = ((unsigned long long int) hi << 32) | lo;
    6762:	48 c1 e2 20          	shl    $0x20,%rdx
    6766:	89 c0                	mov    %eax,%eax
    6768:	48 09 c2             	or     %rax,%rdx
    676b:	48 89 93 d0 02 00 00 	mov    %rdx,0x2d0(%rbx)
	r = dc->kvs_hash_pbn->kvs_delete(dc->kvs_hash_pbn, (void *)hash, dc->crypto_key_size);
    6772:	48 8b bb c8 03 00 00 	mov    0x3c8(%rbx),%rdi
    6779:	8b 93 f0 03 00 00    	mov    0x3f0(%rbx),%edx
    677f:	4c 89 ee             	mov    %r13,%rsi
    6782:	48 8b 47 08          	mov    0x8(%rdi),%rax
    6786:	e8 00 00 00 00       	callq  678b <handle_write_no_hash_xremap+0xeb>
	r = dc->kvs_hash_pbn->kvs_insert(dc->kvs_hash_pbn, (void *)hash,
    678b:	48 8b bb c8 03 00 00 	mov    0x3c8(%rbx),%rdi
    6792:	8b 93 f0 03 00 00    	mov    0x3f0(%rbx),%edx
    6798:	41 b8 10 00 00 00    	mov    $0x10,%r8d
    679e:	48 8d 4d c0          	lea    -0x40(%rbp),%rcx
    67a2:	4c 89 ee             	mov    %r13,%rsi
    67a5:	48 8b 47 18          	mov    0x18(%rdi),%rax
    67a9:	e8 00 00 00 00       	callq  67ae <handle_write_no_hash_xremap+0x10e>
    67ae:	41 89 c4             	mov    %eax,%r12d
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    67b1:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    67b3:	48 8b 8b a0 02 00 00 	mov    0x2a0(%rbx),%rcx
    67ba:	48 85 c9             	test   %rcx,%rcx
    67bd:	74 1b                	je     67da <handle_write_no_hash_xremap+0x13a>
		if(dc->tmp_period_time[period]) {
    67bf:	48 8b b3 d0 02 00 00 	mov    0x2d0(%rbx),%rsi
    67c6:	48 85 f6             	test   %rsi,%rsi
    67c9:	0f 85 a6 00 00 00    	jne    6875 <handle_write_no_hash_xremap+0x1d5>
		dc->tmp_period_time[period] = 0;
    67cf:	48 c7 83 d0 02 00 00 	movq   $0x0,0x2d0(%rbx)
    67d6:	00 00 00 00 
	if (r < 0)
    67da:	45 85 e4             	test   %r12d,%r12d
    67dd:	78 1e                	js     67fd <handle_write_no_hash_xremap+0x15d>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    67df:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    67e1:	48 85 c9             	test   %rcx,%rcx
    67e4:	75 7a                	jne    6860 <handle_write_no_hash_xremap+0x1c0>
	do_io_remap_device(dc, bio);
    67e6:	4c 89 f6             	mov    %r14,%rsi
    67e9:	48 89 df             	mov    %rbx,%rdi
    67ec:	e8 5f fe ff ff       	callq  6650 <do_io_remap_device.isra.10>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    67f1:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    67f3:	48 83 bb a0 02 00 00 	cmpq   $0x0,0x2a0(%rbx)
    67fa:	00 
    67fb:	75 25                	jne    6822 <handle_write_no_hash_xremap+0x182>
}
    67fd:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
    6801:	65 48 33 34 25 28 00 	xor    %gs:0x28,%rsi
    6808:	00 00 
    680a:	44 89 e0             	mov    %r12d,%eax
    680d:	0f 85 57 01 00 00    	jne    696a <handle_write_no_hash_xremap+0x2ca>
    6813:	48 83 c4 20          	add    $0x20,%rsp
    6817:	5b                   	pop    %rbx
    6818:	41 5c                	pop    %r12
    681a:	41 5d                	pop    %r13
    681c:	41 5e                	pop    %r14
    681e:	41 5f                	pop    %r15
    6820:	5d                   	pop    %rbp
    6821:	c3                   	retq   
		if(dc->tmp_period_time[period]) {
    6822:	48 8b 8b f0 02 00 00 	mov    0x2f0(%rbx),%rcx
    6829:	48 85 c9             	test   %rcx,%rcx
    682c:	74 1d                	je     684b <handle_write_no_hash_xremap+0x1ab>
    var = ((unsigned long long int) hi << 32) | lo;
    682e:	89 c0                	mov    %eax,%eax
    6830:	48 c1 e2 20          	shl    $0x20,%rdx
    6834:	48 09 c2             	or     %rax,%rdx
			dc->total_period_time[period] += t;
    6837:	48 8b 83 48 03 00 00 	mov    0x348(%rbx),%rax
    683e:	48 29 c8             	sub    %rcx,%rax
    6841:	48 01 c2             	add    %rax,%rdx
    6844:	48 89 93 48 03 00 00 	mov    %rdx,0x348(%rbx)
		dc->tmp_period_time[period] = 0;
    684b:	48 c7 83 f0 02 00 00 	movq   $0x0,0x2f0(%rbx)
    6852:	00 00 00 00 
		dc->uniqwrites++;
    6856:	48 83 83 e0 01 00 00 	addq   $0x1,0x1e0(%rbx)
    685d:	01 
    685e:	eb 9d                	jmp    67fd <handle_write_no_hash_xremap+0x15d>
    var = ((unsigned long long int) hi << 32) | lo;
    6860:	48 c1 e2 20          	shl    $0x20,%rdx
    6864:	89 c0                	mov    %eax,%eax
    6866:	48 09 c2             	or     %rax,%rdx
    6869:	48 89 93 f0 02 00 00 	mov    %rdx,0x2f0(%rbx)
    6870:	e9 71 ff ff ff       	jmpq   67e6 <handle_write_no_hash_xremap+0x146>
    6875:	89 c0                	mov    %eax,%eax
    6877:	48 c1 e2 20          	shl    $0x20,%rdx
    687b:	48 09 c2             	or     %rax,%rdx
			dc->total_period_time[period] += t;
    687e:	48 8b 83 28 03 00 00 	mov    0x328(%rbx),%rax
    6885:	48 29 f0             	sub    %rsi,%rax
    6888:	48 01 c2             	add    %rax,%rdx
    688b:	48 89 93 28 03 00 00 	mov    %rdx,0x328(%rbx)
    6892:	e9 38 ff ff ff       	jmpq   67cf <handle_write_no_hash_xremap+0x12f>
    6897:	89 c1                	mov    %eax,%ecx
	tmp = sector_div(lpn, align_size);
    6899:	31 d2                	xor    %edx,%edx
    689b:	4c 89 e0             	mov    %r12,%rax
    689e:	49 f7 f7             	div    %r15
    68a1:	83 e1 7f             	and    $0x7f,%ecx
		if(t != tv.ver) { // used mapped to another device
    68a4:	39 ca                	cmp    %ecx,%edx
	tmp = sector_div(lpn, align_size);
    68a6:	49 89 d1             	mov    %rdx,%r9
		if(t != tv.ver) { // used mapped to another device
    68a9:	0f 84 8d 00 00 00    	je     693c <handle_write_no_hash_xremap+0x29c>
	if(origin <= target) {
    68af:	0f 8e a8 00 00 00    	jle    695d <handle_write_no_hash_xremap+0x2bd>
		lpn -= (origin - target);
    68b5:	89 d0                	mov    %edx,%eax
    68b7:	4c 89 e6             	mov    %r12,%rsi
    68ba:	29 c8                	sub    %ecx,%eax
    68bc:	48 98                	cltq   
    68be:	48 29 c6             	sub    %rax,%rsi
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    68c1:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    68c3:	48 83 bb a0 02 00 00 	cmpq   $0x0,0x2a0(%rbx)
    68ca:	00 
    68cb:	74 10                	je     68dd <handle_write_no_hash_xremap+0x23d>
    var = ((unsigned long long int) hi << 32) | lo;
    68cd:	48 c1 e2 20          	shl    $0x20,%rdx
    68d1:	89 c0                	mov    %eax,%eax
    68d3:	48 09 c2             	or     %rax,%rdx
    68d6:	48 89 93 f0 02 00 00 	mov    %rdx,0x2f0(%rbx)
			enqueue_remap_or_discard_work(dc, 0, lbn2, t, 0);
    68dd:	48 89 f2             	mov    %rsi,%rdx
    68e0:	45 31 c0             	xor    %r8d,%r8d
    68e3:	44 89 c9             	mov    %r9d,%ecx
    68e6:	31 f6                	xor    %esi,%esi
    68e8:	48 89 df             	mov    %rbx,%rdi
    68eb:	4c 89 4d b8          	mov    %r9,-0x48(%rbp)
    68ef:	e8 4c f3 ff ff       	callq  5c40 <enqueue_remap_or_discard_work>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    68f4:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    68f6:	48 83 bb a0 02 00 00 	cmpq   $0x0,0x2a0(%rbx)
    68fd:	00 
    68fe:	4c 8b 4d b8          	mov    -0x48(%rbp),%r9
    6902:	74 34                	je     6938 <handle_write_no_hash_xremap+0x298>
		if(dc->tmp_period_time[period]) {
    6904:	48 8b 8b f0 02 00 00 	mov    0x2f0(%rbx),%rcx
    690b:	48 85 c9             	test   %rcx,%rcx
    690e:	74 1d                	je     692d <handle_write_no_hash_xremap+0x28d>
    var = ((unsigned long long int) hi << 32) | lo;
    6910:	89 c0                	mov    %eax,%eax
    6912:	48 c1 e2 20          	shl    $0x20,%rdx
    6916:	48 09 c2             	or     %rax,%rdx
			dc->total_period_time[period] += t;
    6919:	48 8b 83 48 03 00 00 	mov    0x348(%rbx),%rax
    6920:	48 29 c8             	sub    %rcx,%rax
    6923:	48 01 d0             	add    %rdx,%rax
    6926:	48 89 83 48 03 00 00 	mov    %rax,0x348(%rbx)
		dc->tmp_period_time[period] = 0;
    692d:	48 c7 83 f0 02 00 00 	movq   $0x0,0x2f0(%rbx)
    6934:	00 00 00 00 
			bio->bi_iter.bi_ssdno = t;
    6938:	45 89 4e 38          	mov    %r9d,0x38(%r14)
		r = dc->mdops->set_refcount(dc->bmd, lbn, 0);
    693c:	48 8b 83 b8 03 00 00 	mov    0x3b8(%rbx),%rax
    6943:	48 8b bb c0 03 00 00 	mov    0x3c0(%rbx),%rdi
    694a:	31 d2                	xor    %edx,%edx
    694c:	4c 89 e6             	mov    %r12,%rsi
    694f:	48 8b 40 40          	mov    0x40(%rax),%rax
    6953:	e8 00 00 00 00       	callq  6958 <handle_write_no_hash_xremap+0x2b8>
    6958:	e9 9d fd ff ff       	jmpq   66fa <handle_write_no_hash_xremap+0x5a>
		lpn += (target - origin);
    695d:	29 d1                	sub    %edx,%ecx
    695f:	48 63 f1             	movslq %ecx,%rsi
    6962:	4c 01 e6             	add    %r12,%rsi
    6965:	e9 57 ff ff ff       	jmpq   68c1 <handle_write_no_hash_xremap+0x221>
}
    696a:	e8 00 00 00 00       	callq  696f <handle_write_no_hash_xremap+0x2cf>
    696f:	90                   	nop

0000000000006970 <dm_dedup_ctr>:
{
    6970:	e8 00 00 00 00       	callq  6975 <dm_dedup_ctr+0x5>
    6975:	55                   	push   %rbp
	return __builtin_memset(p, c, size);
    6976:	b9 14 00 00 00       	mov    $0x14,%ecx
    697b:	48 89 e5             	mov    %rsp,%rbp
    697e:	41 57                	push   %r15
    6980:	41 56                	push   %r14
    6982:	41 55                	push   %r13
    6984:	41 54                	push   %r12
    6986:	53                   	push   %rbx
    6987:	48 89 fb             	mov    %rdi,%rbx
    698a:	48 81 ec 80 01 00 00 	sub    $0x180,%rsp
	da.ti = ti;
    6991:	48 89 9d e8 fe ff ff 	mov    %rbx,-0x118(%rbp)
{
    6998:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    699f:	00 00 
    69a1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    69a5:	31 c0                	xor    %eax,%eax
	struct on_disk_stats *data = &d;
    69a7:	48 8d 85 c8 fe ff ff 	lea    -0x138(%rbp),%rax
    69ae:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
    69b5:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
    69bc:	4c 8d 60 08          	lea    0x8(%rax),%r12
    69c0:	31 c0                	xor    %eax,%eax
	if (argc < 12) {
    69c2:	83 fe 0b             	cmp    $0xb,%esi
    69c5:	4c 89 e7             	mov    %r12,%rdi
    69c8:	f3 48 ab             	rep stos %rax,%es:(%rdi)
    69cb:	0f 8e a9 03 00 00    	jle    6d7a <dm_dedup_ctr+0x40a>
	if (argc > 12) {
    69d1:	83 fe 0c             	cmp    $0xc,%esi
    69d4:	0f 85 8d 03 00 00    	jne    6d67 <dm_dedup_ctr+0x3f7>
	r = dm_get_device(da->ti, dm_shift_arg(as),
    69da:	48 8b 3b             	mov    (%rbx),%rdi
	as.argv = argv;
    69dd:	48 89 95 e0 fe ff ff 	mov    %rdx,-0x120(%rbp)
	as.argc = argc;
    69e4:	c7 85 d8 fe ff ff 0c 	movl   $0xc,-0x128(%rbp)
    69eb:	00 00 00 
	r = dm_get_device(da->ti, dm_shift_arg(as),
    69ee:	e8 00 00 00 00       	callq  69f3 <dm_dedup_ctr+0x83>
    69f3:	48 8d bd d8 fe ff ff 	lea    -0x128(%rbp),%rdi
    69fa:	41 89 c5             	mov    %eax,%r13d
    69fd:	e8 00 00 00 00       	callq  6a02 <dm_dedup_ctr+0x92>
    6a02:	48 8b bd e8 fe ff ff 	mov    -0x118(%rbp),%rdi
    6a09:	4c 89 e1             	mov    %r12,%rcx
    6a0c:	44 89 ea             	mov    %r13d,%edx
    6a0f:	48 89 c6             	mov    %rax,%rsi
    6a12:	e8 00 00 00 00       	callq  6a17 <dm_dedup_ctr+0xa7>
	if (r)
    6a17:	85 c0                	test   %eax,%eax
	r = dm_get_device(da->ti, dm_shift_arg(as),
    6a19:	41 89 c7             	mov    %eax,%r15d
	if (r)
    6a1c:	74 5d                	je     6a7b <dm_dedup_ctr+0x10b>
		*err = "Error opening metadata device";
    6a1e:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    6a25:	00 
    6a26:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
	if (da->meta_dev)
    6a2d:	48 85 f6             	test   %rsi,%rsi
    6a30:	74 0c                	je     6a3e <dm_dedup_ctr+0xce>
		dm_put_device(da->ti, da->meta_dev);
    6a32:	48 8b bd e8 fe ff ff 	mov    -0x118(%rbp),%rdi
    6a39:	e8 00 00 00 00       	callq  6a3e <dm_dedup_ctr+0xce>
	if (da->data_dev)
    6a3e:	48 8b b5 f8 fe ff ff 	mov    -0x108(%rbp),%rsi
    6a45:	48 85 f6             	test   %rsi,%rsi
    6a48:	74 0c                	je     6a56 <dm_dedup_ctr+0xe6>
		dm_put_device(da->ti, da->data_dev);
    6a4a:	48 8b bd e8 fe ff ff 	mov    -0x118(%rbp),%rdi
    6a51:	e8 00 00 00 00       	callq  6a56 <dm_dedup_ctr+0xe6>
	destroy_dedup_args(&da);
    6a56:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
    6a5a:	65 48 33 1c 25 28 00 	xor    %gs:0x28,%rbx
    6a61:	00 00 
    6a63:	44 89 f8             	mov    %r15d,%eax
    6a66:	0f 85 8d 04 00 00    	jne    6ef9 <dm_dedup_ctr+0x589>
    6a6c:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
    6a70:	5b                   	pop    %rbx
    6a71:	41 5c                	pop    %r12
    6a73:	41 5d                	pop    %r13
    6a75:	41 5e                	pop    %r14
    6a77:	41 5f                	pop    %r15
    6a79:	5d                   	pop    %rbp
    6a7a:	c3                   	retq   
	r = dm_get_device(da->ti, dm_shift_arg(as),
    6a7b:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
    6a82:	48 8b 38             	mov    (%rax),%rdi
    6a85:	e8 00 00 00 00       	callq  6a8a <dm_dedup_ctr+0x11a>
    6a8a:	48 8d bd d8 fe ff ff 	lea    -0x128(%rbp),%rdi
    6a91:	41 89 c4             	mov    %eax,%r12d
    6a94:	e8 00 00 00 00       	callq  6a99 <dm_dedup_ctr+0x129>
    6a99:	48 8d 8d e8 fe ff ff 	lea    -0x118(%rbp),%rcx
    6aa0:	48 8b bd e8 fe ff ff 	mov    -0x118(%rbp),%rdi
    6aa7:	44 89 e2             	mov    %r12d,%edx
    6aaa:	48 89 c6             	mov    %rax,%rsi
    6aad:	48 83 c1 10          	add    $0x10,%rcx
    6ab1:	e8 00 00 00 00       	callq  6ab6 <dm_dedup_ctr+0x146>
	if (r)
    6ab6:	85 c0                	test   %eax,%eax
	r = dm_get_device(da->ti, dm_shift_arg(as),
    6ab8:	41 89 c7             	mov    %eax,%r15d
	if (r)
    6abb:	75 6f                	jne    6b2c <dm_dedup_ctr+0x1bc>
		da->data_size = i_size_read(da->data_dev->bdev->bd_inode);
    6abd:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
	if (kstrtou32(dm_shift_arg(as), 10, &block_size) ||
    6ac4:	48 8d bd d8 fe ff ff 	lea    -0x128(%rbp),%rdi
		da->data_size = i_size_read(da->data_dev->bdev->bd_inode);
    6acb:	48 8b 00             	mov    (%rax),%rax
    6ace:	48 8b 40 08          	mov    0x8(%rax),%rax
    6ad2:	48 8b 40 50          	mov    0x50(%rax),%rax
    6ad6:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
	if (kstrtou32(dm_shift_arg(as), 10, &block_size) ||
    6add:	e8 00 00 00 00       	callq  6ae2 <dm_dedup_ctr+0x172>
	return kstrtoll(s, base, res);
}

static inline int __must_check kstrtou32(const char *s, unsigned int base, u32 *res)
{
	return kstrtouint(s, base, res);
    6ae2:	48 8d 95 b8 fe ff ff 	lea    -0x148(%rbp),%rdx
    6ae9:	be 0a 00 00 00       	mov    $0xa,%esi
    6aee:	48 89 c7             	mov    %rax,%rdi
    6af1:	e8 00 00 00 00       	callq  6af6 <dm_dedup_ctr+0x186>
    6af6:	85 c0                	test   %eax,%eax
    6af8:	75 1f                	jne    6b19 <dm_dedup_ctr+0x1a9>
	    !block_size ||
    6afa:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
		block_size < MIN_DATA_DEV_BLOCK_SIZE ||
    6b00:	8d 90 00 f0 ff ff    	lea    -0x1000(%rax),%edx
    6b06:	81 fa 00 f0 0f 00    	cmp    $0xff000,%edx
    6b0c:	77 0b                	ja     6b19 <dm_dedup_ctr+0x1a9>
		!is_power_of_2(block_size)) {
    6b0e:	89 c2                	mov    %eax,%edx
 * Return: true if @n is a power of 2, otherwise false.
 */
static inline __attribute__((const))
bool is_power_of_2(unsigned long n)
{
	return (n != 0 && ((n & (n - 1)) == 0));
    6b10:	48 8d 4a ff          	lea    -0x1(%rdx),%rcx
    6b14:	48 85 d1             	test   %rdx,%rcx
    6b17:	74 20                	je     6b39 <dm_dedup_ctr+0x1c9>
		*err = "Invalid data block size";
    6b19:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    6b20:	00 
		return -EINVAL;
    6b21:	41 bf ea ff ff ff    	mov    $0xffffffea,%r15d
    6b27:	e9 fa fe ff ff       	jmpq   6a26 <dm_dedup_ctr+0xb6>
		*err = "Error opening data device";
    6b2c:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    6b33:	00 
    6b34:	e9 ed fe ff ff       	jmpq   6a26 <dm_dedup_ctr+0xb6>
	if (block_size > da->data_size) {
    6b39:	48 3b 95 00 ff ff ff 	cmp    -0x100(%rbp),%rdx
    6b40:	0f 87 d0 02 00 00    	ja     6e16 <dm_dedup_ctr+0x4a6>
	strlcpy(da->hash_algo, dm_shift_arg(as), CRYPTO_ALG_NAME_LEN);
    6b46:	48 8d bd d8 fe ff ff 	lea    -0x128(%rbp),%rdi
	da->block_size = block_size;
    6b4d:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%rbp)
	strlcpy(da->hash_algo, dm_shift_arg(as), CRYPTO_ALG_NAME_LEN);
    6b53:	e8 00 00 00 00       	callq  6b58 <dm_dedup_ctr+0x1e8>
		return __builtin_strlen(p);
    6b58:	48 89 c7             	mov    %rax,%rdi
    6b5b:	49 89 c4             	mov    %rax,%r12
    6b5e:	e8 00 00 00 00       	callq  6b63 <dm_dedup_ctr+0x1f3>
    6b63:	ba 0f 00 00 00       	mov    $0xf,%edx
    6b68:	48 83 f8 0f          	cmp    $0xf,%rax
    6b6c:	48 0f 46 d0          	cmovbe %rax,%rdx
		__builtin_memcpy(p, q, len);
    6b70:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
    6b77:	83 fa 08             	cmp    $0x8,%edx
    6b7a:	48 8d 48 24          	lea    0x24(%rax),%rcx
    6b7e:	0f 83 38 01 00 00    	jae    6cbc <dm_dedup_ctr+0x34c>
    6b84:	f6 c2 04             	test   $0x4,%dl
    6b87:	0f 85 29 02 00 00    	jne    6db6 <dm_dedup_ctr+0x446>
    6b8d:	85 d2                	test   %edx,%edx
    6b8f:	0f 85 78 01 00 00    	jne    6d0d <dm_dedup_ctr+0x39d>
	if (!crypto_has_alg(da->hash_algo, 0, CRYPTO_ALG_ASYNC)) {
    6b95:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
		p[len] = '\0';
    6b9c:	c6 84 15 0c ff ff ff 	movb   $0x0,-0xf4(%rbp,%rdx,1)
    6ba3:	00 
    6ba4:	31 f6                	xor    %esi,%esi
    6ba6:	ba 80 00 00 00       	mov    $0x80,%edx
    6bab:	48 8d 78 24          	lea    0x24(%rax),%rdi
    6baf:	e8 00 00 00 00       	callq  6bb4 <dm_dedup_ctr+0x244>
    6bb4:	85 c0                	test   %eax,%eax
    6bb6:	0f 84 10 03 00 00    	je     6ecc <dm_dedup_ctr+0x55c>
	strlcpy(backend, dm_shift_arg(as), MAX_BACKEND_NAME_LEN);
    6bbc:	48 8d bd d8 fe ff ff 	lea    -0x128(%rbp),%rdi
		__builtin_memcpy(p, q, len);
    6bc3:	4c 8d 65 90          	lea    -0x70(%rbp),%r12
    6bc7:	e8 00 00 00 00       	callq  6bcc <dm_dedup_ctr+0x25c>
		return __builtin_strlen(p);
    6bcc:	48 89 c7             	mov    %rax,%rdi
    6bcf:	49 89 c5             	mov    %rax,%r13
    6bd2:	e8 00 00 00 00       	callq  6bd7 <dm_dedup_ctr+0x267>
    6bd7:	ba 3f 00 00 00       	mov    $0x3f,%edx
    6bdc:	48 83 f8 3f          	cmp    $0x3f,%rax
    6be0:	48 0f 47 c2          	cmova  %rdx,%rax
		__builtin_memcpy(p, q, len);
    6be4:	83 f8 08             	cmp    $0x8,%eax
    6be7:	0f 83 46 01 00 00    	jae    6d33 <dm_dedup_ctr+0x3c3>
    6bed:	a8 04                	test   $0x4,%al
    6bef:	0f 85 08 02 00 00    	jne    6dfd <dm_dedup_ctr+0x48d>
    6bf5:	85 c0                	test   %eax,%eax
    6bf7:	74 11                	je     6c0a <dm_dedup_ctr+0x29a>
    6bf9:	41 0f b6 55 00       	movzbl 0x0(%r13),%edx
    6bfe:	a8 02                	test   $0x2,%al
    6c00:	41 88 14 24          	mov    %dl,(%r12)
    6c04:	0f 85 dc 02 00 00    	jne    6ee6 <dm_dedup_ctr+0x576>
		p[len] = '\0';
    6c0a:	c6 44 05 90 00       	movb   $0x0,-0x70(%rbp,%rax,1)
	if (!strcmp(backend, "inram")) {
    6c0f:	b9 06 00 00 00       	mov    $0x6,%ecx
    6c14:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    6c1b:	4c 89 e6             	mov    %r12,%rsi
    6c1e:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
    6c20:	0f 97 c0             	seta   %al
    6c23:	1c 00                	sbb    $0x0,%al
    6c25:	84 c0                	test   %al,%al
    6c27:	0f 85 60 01 00 00    	jne    6d8d <dm_dedup_ctr+0x41d>
		da->backend = BKND_INRAM;
    6c2d:	c7 85 1c ff ff ff 00 	movl   $0x0,-0xe4(%rbp)
    6c34:	00 00 00 
	__kernel_size_t ret = __real_strnlen(p, maxlen < p_size ? maxlen : p_size);
    6c37:	be 40 00 00 00       	mov    $0x40,%esi
    6c3c:	4c 89 e7             	mov    %r12,%rdi
    6c3f:	e8 00 00 00 00       	callq  6c44 <dm_dedup_ctr+0x2d4>
	if (p_size <= ret && maxlen != ret)
    6c44:	48 83 f8 40          	cmp    $0x40,%rax
	__kernel_size_t ret = __real_strnlen(p, maxlen < p_size ? maxlen : p_size);
    6c48:	49 89 c5             	mov    %rax,%r13
	if (p_size <= ret && maxlen != ret)
    6c4b:	0f 87 9f 0d 00 00    	ja     79f0 <dm_dedup_ctr+0x1080>
	if (p_size <= ret)
    6c51:	0f 84 59 0d 00 00    	je     79b0 <dm_dedup_ctr+0x1040>
		__builtin_memcpy(p, q, len);
    6c57:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
    6c5e:	4c 89 ea             	mov    %r13,%rdx
    6c61:	4c 89 e6             	mov    %r12,%rsi
    6c64:	48 8d 78 38          	lea    0x38(%rax),%rdi
    6c68:	e8 00 00 00 00       	callq  6c6d <dm_dedup_ctr+0x2fd>
	if (kstrtoint(dm_shift_arg(as), 10, &da->flushrq)) {
    6c6d:	48 8d bd d8 fe ff ff 	lea    -0x128(%rbp),%rdi
		p[len] = '\0';
    6c74:	42 c6 84 2d 20 ff ff 	movb   $0x0,-0xe0(%rbp,%r13,1)
    6c7b:	ff 00 
    6c7d:	e8 00 00 00 00       	callq  6c82 <dm_dedup_ctr+0x312>
    6c82:	48 8d 8d e8 fe ff ff 	lea    -0x118(%rbp),%rcx
    6c89:	be 0a 00 00 00       	mov    $0xa,%esi
    6c8e:	48 89 c7             	mov    %rax,%rdi
    6c91:	48 8d 51 78          	lea    0x78(%rcx),%rdx
    6c95:	e8 00 00 00 00       	callq  6c9a <dm_dedup_ctr+0x32a>
    6c9a:	85 c0                	test   %eax,%eax
    6c9c:	0f 84 8e 01 00 00    	je     6e30 <dm_dedup_ctr+0x4c0>
		*err = "Invalid flushrq value";
    6ca2:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    6ca9:	00 
    6caa:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
		return -EINVAL;
    6cb1:	41 bf ea ff ff ff    	mov    $0xffffffea,%r15d
    6cb7:	e9 71 fd ff ff       	jmpq   6a2d <dm_dedup_ctr+0xbd>
		__builtin_memcpy(p, q, len);
    6cbc:	49 8b 04 24          	mov    (%r12),%rax
    6cc0:	48 89 85 0c ff ff ff 	mov    %rax,-0xf4(%rbp)
    6cc7:	89 d0                	mov    %edx,%eax
    6cc9:	49 8b 74 04 f8       	mov    -0x8(%r12,%rax,1),%rsi
    6cce:	48 89 74 01 f8       	mov    %rsi,-0x8(%rcx,%rax,1)
    6cd3:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
    6cda:	48 8d 70 28          	lea    0x28(%rax),%rsi
    6cde:	48 29 f1             	sub    %rsi,%rcx
    6ce1:	49 29 cc             	sub    %rcx,%r12
    6ce4:	01 d1                	add    %edx,%ecx
    6ce6:	83 e1 f8             	and    $0xfffffff8,%ecx
    6ce9:	83 f9 08             	cmp    $0x8,%ecx
    6cec:	0f 82 a3 fe ff ff    	jb     6b95 <dm_dedup_ctr+0x225>
    6cf2:	83 e1 f8             	and    $0xfffffff8,%ecx
    6cf5:	31 c0                	xor    %eax,%eax
    6cf7:	89 c7                	mov    %eax,%edi
    6cf9:	83 c0 08             	add    $0x8,%eax
    6cfc:	4d 8b 04 3c          	mov    (%r12,%rdi,1),%r8
    6d00:	39 c8                	cmp    %ecx,%eax
    6d02:	4c 89 04 3e          	mov    %r8,(%rsi,%rdi,1)
    6d06:	72 ef                	jb     6cf7 <dm_dedup_ctr+0x387>
    6d08:	e9 88 fe ff ff       	jmpq   6b95 <dm_dedup_ctr+0x225>
    6d0d:	41 0f b6 04 24       	movzbl (%r12),%eax
    6d12:	f6 c2 02             	test   $0x2,%dl
    6d15:	88 85 0c ff ff ff    	mov    %al,-0xf4(%rbp)
    6d1b:	0f 84 74 fe ff ff    	je     6b95 <dm_dedup_ctr+0x225>
    6d21:	89 d0                	mov    %edx,%eax
    6d23:	41 0f b7 74 04 fe    	movzwl -0x2(%r12,%rax,1),%esi
    6d29:	66 89 74 01 fe       	mov    %si,-0x2(%rcx,%rax,1)
    6d2e:	e9 62 fe ff ff       	jmpq   6b95 <dm_dedup_ctr+0x225>
    6d33:	89 c2                	mov    %eax,%edx
    6d35:	49 8b 4c 15 f8       	mov    -0x8(%r13,%rdx,1),%rcx
    6d3a:	49 89 4c 14 f8       	mov    %rcx,-0x8(%r12,%rdx,1)
    6d3f:	8d 50 ff             	lea    -0x1(%rax),%edx
    6d42:	83 fa 08             	cmp    $0x8,%edx
    6d45:	0f 82 bf fe ff ff    	jb     6c0a <dm_dedup_ctr+0x29a>
    6d4b:	83 e2 f8             	and    $0xfffffff8,%edx
    6d4e:	31 c9                	xor    %ecx,%ecx
    6d50:	89 ce                	mov    %ecx,%esi
    6d52:	83 c1 08             	add    $0x8,%ecx
    6d55:	49 8b 7c 35 00       	mov    0x0(%r13,%rsi,1),%rdi
    6d5a:	39 d1                	cmp    %edx,%ecx
    6d5c:	49 89 3c 34          	mov    %rdi,(%r12,%rsi,1)
    6d60:	72 ee                	jb     6d50 <dm_dedup_ctr+0x3e0>
    6d62:	e9 a3 fe ff ff       	jmpq   6c0a <dm_dedup_ctr+0x29a>
		*err = "Too many args";
    6d67:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    6d6e:	00 
		return -EINVAL;
    6d6f:	41 bf ea ff ff ff    	mov    $0xffffffea,%r15d
    6d75:	e9 c4 fc ff ff       	jmpq   6a3e <dm_dedup_ctr+0xce>
		*err = "Insufficient args";
    6d7a:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    6d81:	00 
		return -EINVAL;
    6d82:	41 bf ea ff ff ff    	mov    $0xffffffea,%r15d
    6d88:	e9 b1 fc ff ff       	jmpq   6a3e <dm_dedup_ctr+0xce>
	} else if (!strcmp(backend, "cowbtree")) {
    6d8d:	b9 09 00 00 00       	mov    $0x9,%ecx
    6d92:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    6d99:	4c 89 e6             	mov    %r12,%rsi
    6d9c:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
    6d9e:	0f 97 c0             	seta   %al
    6da1:	1c 00                	sbb    $0x0,%al
    6da3:	84 c0                	test   %al,%al
    6da5:	75 29                	jne    6dd0 <dm_dedup_ctr+0x460>
		da->backend = BKND_COWBTREE;
    6da7:	c7 85 1c ff ff ff 01 	movl   $0x1,-0xe4(%rbp)
    6dae:	00 00 00 
    6db1:	e9 81 fe ff ff       	jmpq   6c37 <dm_dedup_ctr+0x2c7>
    6db6:	41 8b 04 24          	mov    (%r12),%eax
    6dba:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
    6dc0:	89 d0                	mov    %edx,%eax
    6dc2:	41 8b 74 04 fc       	mov    -0x4(%r12,%rax,1),%esi
    6dc7:	89 74 01 fc          	mov    %esi,-0x4(%rcx,%rax,1)
    6dcb:	e9 c5 fd ff ff       	jmpq   6b95 <dm_dedup_ctr+0x225>
	} else if (!strcmp(backend, "xremap")) {
    6dd0:	b9 07 00 00 00       	mov    $0x7,%ecx
    6dd5:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    6ddc:	4c 89 e6             	mov    %r12,%rsi
    6ddf:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
    6de1:	0f 97 c0             	seta   %al
    6de4:	1c 00                	sbb    $0x0,%al
    6de6:	84 c0                	test   %al,%al
    6de8:	0f 85 b1 00 00 00    	jne    6e9f <dm_dedup_ctr+0x52f>
		da->backend = BKND_XREMAP;
    6dee:	c7 85 1c ff ff ff 02 	movl   $0x2,-0xe4(%rbp)
    6df5:	00 00 00 
    6df8:	e9 3a fe ff ff       	jmpq   6c37 <dm_dedup_ctr+0x2c7>
    6dfd:	41 8b 55 00          	mov    0x0(%r13),%edx
    6e01:	41 89 14 24          	mov    %edx,(%r12)
    6e05:	89 c2                	mov    %eax,%edx
    6e07:	41 8b 4c 15 fc       	mov    -0x4(%r13,%rdx,1),%ecx
    6e0c:	41 89 4c 14 fc       	mov    %ecx,-0x4(%r12,%rdx,1)
    6e11:	e9 f4 fd ff ff       	jmpq   6c0a <dm_dedup_ctr+0x29a>
		*err = "Data block size is larger than the data device";
    6e16:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    6e1d:	00 
    6e1e:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
		return -EINVAL;
    6e25:	41 bf ea ff ff ff    	mov    $0xffffffea,%r15d
    6e2b:	e9 fd fb ff ff       	jmpq   6a2d <dm_dedup_ctr+0xbd>
        if (kstrtobool(dm_shift_arg(as), &corruption_flag)) {
    6e30:	48 8d bd d8 fe ff ff 	lea    -0x128(%rbp),%rdi
    6e37:	e8 00 00 00 00       	callq  6e3c <dm_dedup_ctr+0x4cc>
    6e3c:	48 8d b5 b8 fe ff ff 	lea    -0x148(%rbp),%rsi
    6e43:	48 89 c7             	mov    %rax,%rdi
    6e46:	e8 00 00 00 00       	callq  6e4b <dm_dedup_ctr+0x4db>
    6e4b:	85 c0                	test   %eax,%eax
    6e4d:	0f 85 69 0b 00 00    	jne    79bc <dm_dedup_ctr+0x104c>
        da->corruption_flag = corruption_flag;
    6e53:	0f b6 85 b8 fe ff ff 	movzbl -0x148(%rbp),%eax
	if (kstrtoint(dm_shift_arg(as), 10, &da->gc_rate)) {
    6e5a:	48 8d bd d8 fe ff ff 	lea    -0x128(%rbp),%rdi
        da->corruption_flag = corruption_flag;
    6e61:	88 45 88             	mov    %al,-0x78(%rbp)
	if (kstrtoint(dm_shift_arg(as), 10, &da->gc_rate)) {
    6e64:	e8 00 00 00 00       	callq  6e69 <dm_dedup_ctr+0x4f9>
    6e69:	48 8d 8d e8 fe ff ff 	lea    -0x118(%rbp),%rcx
    6e70:	be 0a 00 00 00       	mov    $0xa,%esi
    6e75:	48 89 c7             	mov    %rax,%rdi
    6e78:	48 8d 51 7c          	lea    0x7c(%rcx),%rdx
    6e7c:	e8 00 00 00 00       	callq  6e81 <dm_dedup_ctr+0x511>
    6e81:	85 c0                	test   %eax,%eax
    6e83:	74 79                	je     6efe <dm_dedup_ctr+0x58e>
		*err = "Invalid gc rate";
    6e85:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    6e8c:	00 
    6e8d:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
		return -EINVAL;
    6e94:	41 bf ea ff ff ff    	mov    $0xffffffea,%r15d
    6e9a:	e9 8e fb ff ff       	jmpq   6a2d <dm_dedup_ctr+0xbd>
	} else if (!strcmp(backend, "hybrid")) {
    6e9f:	b9 07 00 00 00       	mov    $0x7,%ecx
    6ea4:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    6eab:	4c 89 e6             	mov    %r12,%rsi
    6eae:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
    6eb0:	0f 97 c0             	seta   %al
    6eb3:	1c 00                	sbb    $0x0,%al
    6eb5:	84 c0                	test   %al,%al
    6eb7:	0f 85 19 0b 00 00    	jne    79d6 <dm_dedup_ctr+0x1066>
		da->backend = BKND_HYBRID;
    6ebd:	c7 85 1c ff ff ff 03 	movl   $0x3,-0xe4(%rbp)
    6ec4:	00 00 00 
    6ec7:	e9 6b fd ff ff       	jmpq   6c37 <dm_dedup_ctr+0x2c7>
		*err = "Unrecognized hash algorithm";
    6ecc:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    6ed3:	00 
    6ed4:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
		return -EINVAL;
    6edb:	41 bf ea ff ff ff    	mov    $0xffffffea,%r15d
    6ee1:	e9 47 fb ff ff       	jmpq   6a2d <dm_dedup_ctr+0xbd>
    6ee6:	89 c2                	mov    %eax,%edx
    6ee8:	41 0f b7 4c 15 fe    	movzwl -0x2(%r13,%rdx,1),%ecx
    6eee:	66 41 89 4c 14 fe    	mov    %cx,-0x2(%r12,%rdx,1)
    6ef4:	e9 11 fd ff ff       	jmpq   6c0a <dm_dedup_ctr+0x29a>
	destroy_dedup_args(&da);
    6ef9:	e8 00 00 00 00       	callq  6efe <dm_dedup_ctr+0x58e>
	if (kstrtou32(dm_shift_arg(as), 10, &ssd_num)) {
    6efe:	48 8d bd d8 fe ff ff 	lea    -0x128(%rbp),%rdi
    6f05:	e8 00 00 00 00       	callq  6f0a <dm_dedup_ctr+0x59a>
    6f0a:	48 8d 95 b8 fe ff ff 	lea    -0x148(%rbp),%rdx
    6f11:	be 0a 00 00 00       	mov    $0xa,%esi
    6f16:	48 89 c7             	mov    %rax,%rdi
    6f19:	e8 00 00 00 00       	callq  6f1e <dm_dedup_ctr+0x5ae>
    6f1e:	85 c0                	test   %eax,%eax
    6f20:	0f 85 70 0a 00 00    	jne    7996 <dm_dedup_ctr+0x1026>
	da->ssd_num = ssd_num;
    6f26:	8b 85 b8 fe ff ff    	mov    -0x148(%rbp),%eax
	r = parse_dedup_args(&da, argc, argv, &ti->error);
    6f2c:	4c 8d 63 48          	lea    0x48(%rbx),%r12
	r = parse_collision_rate(da, &as, err);
    6f30:	48 8d b5 d8 fe ff ff 	lea    -0x128(%rbp),%rsi
    6f37:	4c 89 e2             	mov    %r12,%rdx
	da->ssd_num = ssd_num;
    6f3a:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
	r = parse_collision_rate(da, &as, err);
    6f41:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
    6f48:	48 8d b8 88 00 00 00 	lea    0x88(%rax),%rdi
    6f4f:	e8 00 00 00 00       	callq  6f54 <dm_dedup_ctr+0x5e4>
	if (r)
    6f54:	85 c0                	test   %eax,%eax
	r = parse_collision_rate(da, &as, err);
    6f56:	41 89 c7             	mov    %eax,%r15d
	if (r)
    6f59:	0f 85 c7 fa ff ff    	jne    6a26 <dm_dedup_ctr+0xb6>
	r = parse_gc_size(da, &as, err);
    6f5f:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
    6f66:	48 8d b5 d8 fe ff ff 	lea    -0x128(%rbp),%rsi
    6f6d:	4c 89 e2             	mov    %r12,%rdx
    6f70:	48 8d b8 90 00 00 00 	lea    0x90(%rax),%rdi
    6f77:	e8 00 00 00 00       	callq  6f7c <dm_dedup_ctr+0x60c>
	if (r)
    6f7c:	85 c0                	test   %eax,%eax
	r = parse_gc_size(da, &as, err);
    6f7e:	41 89 c7             	mov    %eax,%r15d
	if (r)
    6f81:	0f 85 9f fa ff ff    	jne    6a26 <dm_dedup_ctr+0xb6>
	r = parse_raid_mode(da, &as, err);
    6f87:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
    6f8e:	48 8d b5 d8 fe ff ff 	lea    -0x128(%rbp),%rsi
    6f95:	4c 89 e2             	mov    %r12,%rdx
    6f98:	48 8d b8 98 00 00 00 	lea    0x98(%rax),%rdi
    6f9f:	e8 00 00 00 00       	callq  6fa4 <dm_dedup_ctr+0x634>
	if (r)
    6fa4:	85 c0                	test   %eax,%eax
	r = parse_raid_mode(da, &as, err);
    6fa6:	41 89 c7             	mov    %eax,%r15d
	if (r)
    6fa9:	0f 85 77 fa ff ff    	jne    6a26 <dm_dedup_ctr+0xb6>
    6faf:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 6fb6 <dm_dedup_ctr+0x646>
    6fb6:	ba 48 04 00 00       	mov    $0x448,%edx
    6fbb:	be c0 80 60 00       	mov    $0x6080c0,%esi
    6fc0:	e8 00 00 00 00       	callq  6fc5 <dm_dedup_ctr+0x655>
	if (!dc) {
    6fc5:	48 85 c0             	test   %rax,%rax
    6fc8:	49 89 c4             	mov    %rax,%r12
    6fcb:	74 34                	je     7001 <dm_dedup_ctr+0x691>
	r = bioset_init(&dc->bs, MIN_IOS, 0, BIOSET_NEED_BVECS);
    6fcd:	48 8d 78 40          	lea    0x40(%rax),%rdi
    6fd1:	31 d2                	xor    %edx,%edx
    6fd3:	b9 01 00 00 00       	mov    $0x1,%ecx
    6fd8:	be 40 00 00 00       	mov    $0x40,%esi
    6fdd:	e8 00 00 00 00       	callq  6fe2 <dm_dedup_ctr+0x672>
	if (r) {
    6fe2:	85 c0                	test   %eax,%eax
    6fe4:	74 35                	je     701b <dm_dedup_ctr+0x6ab>
		ti->error = "failed to create bioset";
    6fe6:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    6fed:	00 
		r = -ENOMEM;
    6fee:	41 bf f4 ff ff ff    	mov    $0xfffffff4,%r15d
	destroy_workqueue(wq);
    6ff4:	4c 89 e7             	mov    %r12,%rdi
    6ff7:	e8 00 00 00 00       	callq  6ffc <dm_dedup_ctr+0x68c>
    6ffc:	e9 25 fa ff ff       	jmpq   6a26 <dm_dedup_ctr+0xb6>
		ti->error = "Error allocating memory for dedup config";
    7001:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    7008:	00 
    7009:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
		r = -ENOMEM;
    7010:	41 bf f4 ff ff ff    	mov    $0xfffffff4,%r15d
		goto out;
    7016:	e9 12 fa ff ff       	jmpq   6a2d <dm_dedup_ctr+0xbd>
	wq = create_singlethread_workqueue("dm-dedup");
    701b:	45 31 c0             	xor    %r8d,%r8d
    701e:	31 c9                	xor    %ecx,%ecx
    7020:	49 c7 c1 00 00 00 00 	mov    $0x0,%r9
    7027:	ba 01 00 00 00       	mov    $0x1,%edx
    702c:	be 0a 00 0e 00       	mov    $0xe000a,%esi
    7031:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    7038:	e8 00 00 00 00       	callq  703d <dm_dedup_ctr+0x6cd>
	if (!wq) {
    703d:	48 85 c0             	test   %rax,%rax
	wq = create_singlethread_workqueue("dm-dedup");
    7040:	49 89 c5             	mov    %rax,%r13
	if (!wq) {
    7043:	0f 84 cd 06 00 00    	je     7716 <dm_dedup_ctr+0xda6>
	//remap_or_discard_wq = alloc_workqueue("dm-dedup-remap_or_trim", WQ_UNBOUND | WQ_FREEZABLE, 4);
    7049:	45 31 c0             	xor    %r8d,%r8d
    704c:	31 c9                	xor    %ecx,%ecx
    704e:	ba 04 00 00 00       	mov    $0x4,%edx
    7053:	be 06 00 00 00       	mov    $0x6,%esi
    7058:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    705f:	e8 00 00 00 00       	callq  7064 <dm_dedup_ctr+0x6f4>
			    mempool_kfree, (void *) size);
}

static inline mempool_t *mempool_create_kmalloc_pool(int min_nr, size_t size)
{
	return mempool_create(min_nr, mempool_kmalloc, mempool_kfree,
    7064:	b9 30 00 00 00       	mov    $0x30,%ecx
    7069:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    7070:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    7077:	bf 10 00 00 00       	mov    $0x10,%edi
    707c:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
    7083:	e8 00 00 00 00       	callq  7088 <dm_dedup_ctr+0x718>
						      sizeof(struct dedup_work));
    7088:	48 85 c0             	test   %rax,%rax
    708b:	49 89 c6             	mov    %rax,%r14
    708e:	0f 84 95 06 00 00    	je     7729 <dm_dedup_ctr+0xdb9>
    7094:	b9 28 00 00 00       	mov    $0x28,%ecx
    7099:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    70a0:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    70a7:	bf 10 00 00 00       	mov    $0x10,%edi
    70ac:	e8 00 00 00 00       	callq  70b1 <dm_dedup_ctr+0x741>
						sizeof(struct check_work));
    70b1:	48 85 c0             	test   %rax,%rax
    70b4:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
    70bb:	0f 84 83 06 00 00    	je     7744 <dm_dedup_ctr+0xdd4>

    70c1:	e8 00 00 00 00       	callq  70c6 <dm_dedup_ctr+0x756>
        remap_or_discard_work_pool = mempool_create_kmalloc_pool(65536,
    70c6:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax

    70cc:	49 89 84 24 70 03 00 	mov    %rax,0x370(%r12)
    70d3:	00 
        remap_or_discard_work_pool = mempool_create_kmalloc_pool(65536,
    70d4:	0f 87 03 08 00 00    	ja     78dd <dm_dedup_ctr+0xf6d>
    70da:	b9 40 00 00 00       	mov    $0x40,%ecx
    70df:	48 c7 c2 00 00 00 00 	mov    $0x0,%rdx
    70e6:	48 c7 c6 00 00 00 00 	mov    $0x0,%rsi
    70ed:	bf 00 00 01 00       	mov    $0x10000,%edi
    70f2:	e8 00 00 00 00       	callq  70f7 <dm_dedup_ctr+0x787>
	
    70f7:	8b 8d 08 ff ff ff    	mov    -0xf8(%rbp),%ecx
    70fd:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
	dc->sectors_per_block = to_sector(da.block_size);
    7104:	31 d2                	xor    %edx,%edx
	dc->block_size = da.block_size;
    7106:	48 8b 43 18          	mov    0x18(%rbx),%rax
	
    710a:	41 89 4c 24 10       	mov    %ecx,0x10(%r12)
	return (n >> SECTOR_SHIFT);
    710f:	48 c1 e9 09          	shr    $0x9,%rcx
	dc->sectors_per_block = to_sector(da.block_size);
    7113:	48 f7 f1             	div    %rcx

    7116:	41 89 4c 24 14       	mov    %ecx,0x14(%r12)

    711b:	31 d2                	xor    %edx,%edx
	data_size = ti->len;
    711d:	41 89 44 24 1c       	mov    %eax,0x1c(%r12)
	(void)sector_div(data_size, dc->sectors_per_block);
    7122:	48 8b 45 80          	mov    -0x80(%rbp),%rax
    7126:	49 89 84 24 88 02 00 	mov    %rax,0x288(%r12)
    712d:	00 
	dc->raid_mode = da.raid_mode;
    712e:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
    7135:	48 8b 00             	mov    (%rax),%rax
    7138:	48 8b 40 08          	mov    0x8(%rax),%rax
    713c:	48 8b 40 50          	mov    0x50(%rax),%rax
    7140:	48 c1 f8 09          	sar    $0x9,%rax

    7144:	48 f7 f1             	div    %rcx

    7147:	8b 95 1c ff ff ff    	mov    -0xe4(%rbp),%edx
    714d:	83 fa 01             	cmp    $0x1,%edx
	data_size = i_size_read(da.data_dev->bdev->bd_inode) >> SECTOR_SHIFT;
    7150:	41 89 44 24 18       	mov    %eax,0x18(%r12)

    7155:	0f 84 de 06 00 00    	je     7839 <dm_dedup_ctr+0xec9>
    715b:	0f 82 af 06 00 00    	jb     7810 <dm_dedup_ctr+0xea0>
    7161:	83 fa 02             	cmp    $0x2,%edx
    7164:	0f 84 19 07 00 00    	je     7883 <dm_dedup_ctr+0xf13>
    716a:	83 fa 03             	cmp    $0x3,%edx
    716d:	0f 85 00 07 00 00    	jne    7873 <dm_dedup_ctr+0xf03>
	case BKND_HYBRID:
    7173:	83 e0 ff             	and    $0xffffffff,%eax
		break;
    7176:	49 c7 84 24 b8 03 00 	movq   $0x0,0x3b8(%r12)
    717d:	00 00 00 00 00 
	case BKND_HYBRID:
    7182:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
		dc->mdops = &metadata_ops_hybrid;
    7189:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    7190:	48 8b 00             	mov    (%rax),%rax
    7193:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
		iparam_hybrid.blocks = dc->pblocks;
    719a:	48 8d 85 b8 fe ff ff 	lea    -0x148(%rbp),%rax
    71a1:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
	}
    71a8:	49 8d 84 24 78 03 00 	lea    0x378(%r12),%rax
    71af:	00 
	__kernel_size_t ret = __real_strnlen(p, maxlen < p_size ? maxlen : p_size);
    71b0:	be 70 00 00 00       	mov    $0x70,%esi
    71b5:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
    71bc:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
    71c3:	4c 8d 78 38          	lea    0x38(%rax),%r15
    71c7:	4c 89 ff             	mov    %r15,%rdi
    71ca:	e8 00 00 00 00       	callq  71cf <dm_dedup_ctr+0x85f>
	if (p_size <= ret && maxlen != ret)
    71cf:	48 83 f8 70          	cmp    $0x70,%rax
    71d3:	0f 87 17 08 00 00    	ja     79f0 <dm_dedup_ctr+0x1080>
	if (p_size <= ret)
    71d9:	0f 84 d1 07 00 00    	je     79b0 <dm_dedup_ctr+0x1040>
{
	size_t p_size = __builtin_object_size(p, 0);
	size_t q_size = __builtin_object_size(q, 0);
	if (p_size == (size_t)-1 && q_size == (size_t)-1)
		return __builtin_strcpy(p, q);
	memcpy(p, q, strlen(q) + 1);
    71df:	48 83 c0 01          	add    $0x1,%rax
	return __builtin_memcpy(p, q, size);
    71e3:	83 f8 08             	cmp    $0x8,%eax
    71e6:	0f 83 bd 05 00 00    	jae    77a9 <dm_dedup_ctr+0xe39>
    71ec:	a8 04                	test   $0x4,%al
    71ee:	0f 85 3a 07 00 00    	jne    792e <dm_dedup_ctr+0xfbe>
    71f4:	85 c0                	test   %eax,%eax
    71f6:	74 17                	je     720f <dm_dedup_ctr+0x89f>
    71f8:	0f b6 8d 20 ff ff ff 	movzbl -0xe0(%rbp),%ecx
    71ff:	a8 02                	test   $0x2,%al
    7201:	41 88 8c 24 78 03 00 	mov    %cl,0x378(%r12)
    7208:	00 
    7209:	0f 85 41 07 00 00    	jne    7950 <dm_dedup_ctr+0xfe0>
	strcpy(dc->backend_str, da.backend_str);
    720f:	49 8b 84 24 b8 03 00 	mov    0x3b8(%r12),%rax
    7216:	00 
    7217:	48 8d b5 87 fe ff ff 	lea    -0x179(%rbp),%rsi
    721e:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
    7225:	48 8b 00             	mov    (%rax),%rax
    7228:	e8 00 00 00 00       	callq  722d <dm_dedup_ctr+0x8bd>

    722d:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
	strcpy(dc->backend_str, da.backend_str);
    7233:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)

    723a:	0f 87 ad 06 00 00    	ja     78ed <dm_dedup_ctr+0xf7d>
	}
    7240:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
    7247:	48 8d 78 24          	lea    0x24(%rax),%rdi
    724b:	e8 00 00 00 00       	callq  7250 <dm_dedup_ctr+0x8e0>

    7250:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
	}
    7256:	49 89 84 24 b0 01 00 	mov    %rax,0x1b0(%r12)
    725d:	00 

    725e:	0f 87 9d 06 00 00    	ja     7901 <dm_dedup_ctr+0xf91>
	}
    7264:	48 89 c7             	mov    %rax,%rdi
    7267:	e8 00 00 00 00       	callq  726c <dm_dedup_ctr+0x8fc>
	switch (da.backend) {
    726c:	45 31 c9             	xor    %r9d,%r9d
	crypto_key_size = get_hash_digestsize(dc->desc_table);
    726f:	83 bd 1c ff ff ff 02 	cmpl   $0x2,-0xe4(%rbp)
	}
    7276:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%rbp)
    727c:	89 c6                	mov    %eax,%esi
	switch (da.backend) {
    727e:	49 8b 84 24 b8 03 00 	mov    0x3b8(%r12),%rax
    7285:	00 
    7286:	41 8b 4c 24 18       	mov    0x18(%r12),%ecx
    728b:	44 0f b6 85 87 fe ff 	movzbl -0x179(%rbp),%r8d
    7292:	ff 
    7293:	48 8b 40 18          	mov    0x18(%rax),%rax
	crypto_key_size = get_hash_digestsize(dc->desc_table);
    7297:	0f 85 36 05 00 00    	jne    77d3 <dm_dedup_ctr+0xe63>
	switch (da.backend) {
    729d:	ba 10 00 00 00       	mov    $0x10,%edx
    72a2:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
    72a9:	e8 00 00 00 00       	callq  72ae <dm_dedup_ctr+0x93e>
    72ae:	49 89 c7             	mov    %rax,%r15
    72b1:	49 89 84 24 c8 03 00 	mov    %rax,0x3c8(%r12)
    72b8:	00 
				dc->pblocks, unformatted, 0);
    72b9:	48 63 85 64 ff ff ff 	movslq -0x9c(%rbp),%rax
    72c0:	41 8b 54 24 18       	mov    0x18(%r12),%edx
    72c5:	48 b9 c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rcx
    72cc:	c2 f5 28 
    72cf:	48 0f af d0          	imul   %rax,%rdx
    72d3:	48 c1 ea 02          	shr    $0x2,%rdx
    72d7:	48 89 d0             	mov    %rdx,%rax
    72da:	48 f7 e1             	mul    %rcx
    72dd:	48 c1 ea 02          	shr    $0x2,%rdx
	}
    72e1:	49 81 ff 00 f0 ff ff 	cmp    $0xfffffffffffff000,%r15
				dc->pblocks, unformatted, 0);
    72e8:	49 89 94 24 10 02 00 	mov    %rdx,0x210(%r12)
    72ef:	00 
	}
    72f0:	0f 87 66 04 00 00    	ja     775c <dm_dedup_ctr+0xdec>
	}
    72f6:	49 8b 84 24 b8 03 00 	mov    0x3b8(%r12),%rax
    72fd:	00 
    72fe:	44 0f b6 85 87 fe ff 	movzbl -0x179(%rbp),%r8d
    7305:	ff 
    7306:	ba 08 00 00 00       	mov    $0x8,%edx
    730b:	41 8b 4c 24 1c       	mov    0x1c(%r12),%ecx
    7310:	be 08 00 00 00       	mov    $0x8,%esi
    7315:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
    731c:	48 8b 40 10          	mov    0x10(%rax),%rax
    7320:	e8 00 00 00 00       	callq  7325 <dm_dedup_ctr+0x9b5>
	dc->kvs_lbn_pbn = dc->mdops->kvs_create_linear(md, 8,
    7325:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
	}
    732b:	49 89 84 24 d8 03 00 	mov    %rax,0x3d8(%r12)
    7332:	00 
	dc->kvs_lbn_pbn = dc->mdops->kvs_create_linear(md, 8,
    7333:	0f 87 d8 05 00 00    	ja     7911 <dm_dedup_ctr+0xfa1>
	}
    7339:	49 8b 84 24 b8 03 00 	mov    0x3b8(%r12),%rax
    7340:	00 
    7341:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
    7348:	48 8b 40 48          	mov    0x48(%rax),%rax
    734c:	e8 00 00 00 00       	callq  7351 <dm_dedup_ctr+0x9e1>

    7351:	85 c0                	test   %eax,%eax
	}
    7353:	41 89 c7             	mov    %eax,%r15d

    7356:	0f 88 9e 04 00 00    	js     77fa <dm_dedup_ctr+0xe8a>
	}
    735c:	80 bd 87 fe ff ff 00 	cmpb   $0x0,-0x179(%rbp)
    7363:	0f 85 9e 04 00 00    	jne    7807 <dm_dedup_ctr+0xe97>
    7369:	49 8b 84 24 b8 03 00 	mov    0x3b8(%r12),%rax
    7370:	00 
    7371:	48 8b 40 50          	mov    0x50(%rax),%rax
    7375:	48 85 c0             	test   %rax,%rax
    7378:	0f 84 89 04 00 00    	je     7807 <dm_dedup_ctr+0xe97>

    737e:	ba 10 00 00 00       	mov    $0x10,%edx
    7383:	48 8d b5 90 fe ff ff 	lea    -0x170(%rbp),%rsi
    738a:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
    7391:	e8 00 00 00 00       	callq  7396 <dm_dedup_ctr+0xa26>
		r = dc->mdops->get_private_data(md, (void **)&data,
    7396:	85 c0                	test   %eax,%eax

    7398:	41 89 c7             	mov    %eax,%r15d
		r = dc->mdops->get_private_data(md, (void **)&data,
    739b:	0f 88 80 05 00 00    	js     7921 <dm_dedup_ctr+0xfb1>
		}
    73a1:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
    73a8:	48 8b 50 08          	mov    0x8(%rax),%rdx

    73ac:	48 8b 00             	mov    (%rax),%rax
	}
    73af:	48 8b 8d f8 fe ff ff 	mov    -0x108(%rbp),%rcx
	dc->bmd = md;
    73b6:	49 89 94 24 b8 01 00 	mov    %rdx,0x1b8(%r12)
    73bd:	00 

    73be:	49 89 84 24 c0 01 00 	mov    %rax,0x1c0(%r12)
    73c5:	00 
	dc->metadata_dev = da.meta_dev;
    73c6:	4d 89 6c 24 20       	mov    %r13,0x20(%r12)
	*/
    73cb:	4d 89 b4 24 08 04 00 	mov    %r14,0x408(%r12)
    73d2:	00 
	*/
    73d3:	49 c7 84 24 30 04 00 	movq   $0x0,0x430(%r12)
    73da:	00 00 00 00 00 
	}
    73df:	49 89 0c 24          	mov    %rcx,(%r12)

    73e3:	48 8b 8d f0 fe ff ff 	mov    -0x110(%rbp),%rcx
	dc->remap_or_discard_work_pool = remap_or_discard_work_pool;
    73ea:	49 c7 84 24 38 04 00 	movq   $0x0,0x438(%r12)
    73f1:	00 00 00 00 00 
	dc->remap_work_pool_counter = 0;
    73f6:	49 c7 84 24 40 04 00 	movq   $0x0,0x440(%r12)
    73fd:	00 00 00 00 00 
	dc->physical_block_counter = physical_block_counter;
    7402:	49 c7 84 24 c8 01 00 	movq   $0x0,0x1c8(%r12)
    7409:	00 00 00 00 00 

    740e:	49 c7 84 24 d0 01 00 	movq   $0x0,0x1d0(%r12)
    7415:	00 00 00 00 00 

    741a:	49 89 4c 24 08       	mov    %rcx,0x8(%r12)
	dc->discard_workqueue = discard_wq;
    741f:	48 8b 8d 78 fe ff ff 	mov    -0x188(%rbp),%rcx
	dc->gc_counter = 0;
    7426:	49 c7 84 24 d8 01 00 	movq   $0x0,0x1d8(%r12)
    742d:	00 00 00 00 00 
	dc->writes = 0;
    7432:	49 c7 84 24 e0 01 00 	movq   $0x0,0x1e0(%r12)
    7439:	00 00 00 00 00 
	dc->dupwrites = 0;
    743e:	49 c7 84 24 e8 01 00 	movq   $0x0,0x1e8(%r12)
    7445:	00 00 00 00 00 
	dc->uniqwrites = 0;
    744a:	49 c7 84 24 f0 01 00 	movq   $0x0,0x1f0(%r12)
    7451:	00 00 00 00 00 
	dc->discard_workqueue = discard_wq;
    7456:	49 89 4c 24 38       	mov    %rcx,0x38(%r12)
	dc->remap_or_discard_workqueue = remap_or_discard_wq;
    745b:	48 8b 8d 68 fe ff ff 	mov    -0x198(%rbp),%rcx
	dc->reads_on_writes = 0;
    7462:	49 c7 84 24 f8 01 00 	movq   $0x0,0x1f8(%r12)
    7469:	00 00 00 00 00 
	dc->overwrites = 0;
    746e:	49 c7 84 24 00 02 00 	movq   $0x0,0x200(%r12)
    7475:	00 00 00 00 00 
	dc->newwrites = 0;
    747a:	49 c7 84 24 08 02 00 	movq   $0x0,0x208(%r12)
    7481:	00 00 00 00 00 
	dc->gc_count = 0;
    7486:	49 c7 84 24 30 02 00 	movq   $0x0,0x230(%r12)
    748d:	00 00 00 00 00 
	dc->remap_or_discard_workqueue = remap_or_discard_wq;
    7492:	49 89 8c 24 10 04 00 	mov    %rcx,0x410(%r12)
    7499:	00 
	dc->discard_work_pool = discard_work_pool;
    749a:	48 8b 8d 58 fe ff ff 	mov    -0x1a8(%rbp),%rcx
	dc->gc_fp_count = 0;
    74a1:	49 c7 84 24 38 02 00 	movq   $0x0,0x238(%r12)
    74a8:	00 00 00 00 00 
	dc->gc_cur_size = 0;
    74ad:	49 c7 84 24 58 02 00 	movq   $0x0,0x258(%r12)
    74b4:	00 00 00 00 00 
	dc->gc_last_fp = 0;
    74b9:	49 c7 84 24 60 02 00 	movq   $0x0,0x260(%r12)
    74c0:	00 00 00 00 00 
	dc->discard_work_pool = discard_work_pool;
    74c5:	49 89 8c 24 28 04 00 	mov    %rcx,0x428(%r12)
    74cc:	00 

    74cd:	48 8b 8d 70 fe ff ff 	mov    -0x190(%rbp),%rcx
    74d4:	49 89 8c 24 c0 03 00 	mov    %rcx,0x3c0(%r12)
    74db:	00 
	dc->hit_none_fp = 0;
    74dc:	49 c7 84 24 68 02 00 	movq   $0x0,0x268(%r12)
    74e3:	00 00 00 00 00 
	dc->inserted_fp = 0;
    74e8:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx

    74ef:	41 8b 44 24 18       	mov    0x18(%r12),%eax
    74f4:	48 0f af 85 70 ff ff 	imul   -0x90(%rbp),%rax
    74fb:	ff 
	dc->hit_right_fp = 0;
    74fc:	49 c7 84 24 70 02 00 	movq   $0x0,0x270(%r12)
    7503:	00 00 00 00 00 
	dc->hit_wrong_fp = 0;
    7508:	49 c7 84 24 40 02 00 	movq   $0x0,0x240(%r12)
    750f:	00 00 00 00 00 
	dc->inserted_fp = 0;
    7514:	49 89 94 24 98 02 00 	mov    %rdx,0x298(%r12)
    751b:	00 

    751c:	48 8d 14 92          	lea    (%rdx,%rdx,4),%rdx
	dc->hit_corrupt_fp = 0;
    7520:	49 c7 84 24 48 02 00 	movq   $0x0,0x248(%r12)
    7527:	00 00 00 00 00 
	dc->usr_total_cnt = 0;
    752c:	49 c7 84 24 50 02 00 	movq   $0x0,0x250(%r12)
    7533:	00 00 00 00 00 
	dc->usr_reads_cnt = 0;
    7538:	49 c7 84 24 18 02 00 	movq   $0x0,0x218(%r12)
    753f:	00 00 00 00 00 

    7544:	48 8d 0c 92          	lea    (%rdx,%rdx,4),%rcx
    7548:	31 d2                	xor    %edx,%edx

    754a:	49 c7 84 24 78 02 00 	movq   $0x0,0x278(%r12)
    7551:	00 00 00 00 00 
	dc->gc_type = 0;
    7556:	49 c7 84 24 80 02 00 	movq   $0x0,0x280(%r12)
    755d:	00 00 00 00 00 
	dc->gc_size = da.gc_size;
    7562:	49 c7 84 24 a0 02 00 	movq   $0x0,0x2a0(%r12)
    7569:	00 00 00 00 00 

    756e:	48 c1 e1 02          	shl    $0x2,%rcx
    7572:	48 f7 f1             	div    %rcx
    7575:	49 8d 94 24 00 03 00 	lea    0x300(%r12),%rdx
    757c:	00 
    757d:	49 89 84 24 90 02 00 	mov    %rax,0x290(%r12)
    7584:	00 
	dc->ssd_num = da.ssd_num;
    7585:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    758c:	49 89 84 24 28 02 00 	mov    %rax,0x228(%r12)
    7593:	00 
    7594:	49 8d 84 24 a8 02 00 	lea    0x2a8(%r12),%rax
    759b:	00 
	dc->enable_time_stats = 0;
    759c:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
	for(i = 0; i < PREIOD_NUM; ++i) {
    75a3:	48 c7 40 58 00 00 00 	movq   $0x0,0x58(%rax)
    75aa:	00 
    75ab:	48 83 c0 08          	add    $0x8,%rax

    75af:	48 39 c2             	cmp    %rax,%rdx
    75b2:	75 e8                	jne    759c <dm_dedup_ctr+0xc2c>
		dc->total_period_time[i] = 0;
    75b4:	0f b6 45 88          	movzbl -0x78(%rbp),%eax
	}
    75b8:	41 c6 84 24 59 03 00 	movb   $0x0,0x359(%r12)
    75bf:	00 00 
	__kernel_size_t ret = __real_strnlen(p, maxlen < p_size ? maxlen : p_size);
    75c1:	be 84 00 00 00       	mov    $0x84,%esi
	dc->check_corruption = da.corruption_flag;
    75c6:	49 c7 84 24 60 03 00 	movq   $0x0,0x360(%r12)
    75cd:	00 00 00 00 00 
	dc->fec = false;
    75d2:	49 c7 84 24 68 03 00 	movq   $0x0,0x368(%r12)
    75d9:	00 00 00 00 00 
	dc->corrupted_blocks = 0;
    75de:	4d 8d bc 24 e0 03 00 	lea    0x3e0(%r12),%r15
    75e5:	00 
		dc->total_period_time[i] = 0;
    75e6:	41 88 84 24 58 03 00 	mov    %al,0x358(%r12)
    75ed:	00 
    75ee:	48 8d 85 e8 fe ff ff 	lea    -0x118(%rbp),%rax
    75f5:	48 8d 50 24          	lea    0x24(%rax),%rdx
    75f9:	48 89 d7             	mov    %rdx,%rdi
    75fc:	48 89 95 78 fe ff ff 	mov    %rdx,-0x188(%rbp)
    7603:	e8 00 00 00 00       	callq  7608 <dm_dedup_ctr+0xc98>
	if (p_size <= ret && maxlen != ret)
    7608:	48 3d 84 00 00 00    	cmp    $0x84,%rax
    760e:	0f 87 dc 03 00 00    	ja     79f0 <dm_dedup_ctr+0x1080>
	if (p_size <= ret)
    7614:	0f 84 96 03 00 00    	je     79b0 <dm_dedup_ctr+0x1040>
	memcpy(p, q, strlen(q) + 1);
    761a:	48 83 c0 01          	add    $0x1,%rax
	return __builtin_memcpy(p, q, size);
    761e:	48 8b 95 78 fe ff ff 	mov    -0x188(%rbp),%rdx
    7625:	83 f8 08             	cmp    $0x8,%eax
    7628:	0f 83 8f 02 00 00    	jae    78bd <dm_dedup_ctr+0xf4d>
    762e:	a8 04                	test   $0x4,%al
    7630:	0f 85 30 03 00 00    	jne    7966 <dm_dedup_ctr+0xff6>
    7636:	85 c0                	test   %eax,%eax
    7638:	74 17                	je     7651 <dm_dedup_ctr+0xce1>
    763a:	0f b6 8d 0c ff ff ff 	movzbl -0xf4(%rbp),%ecx
    7641:	a8 02                	test   $0x2,%al
    7643:	41 88 8c 24 e0 03 00 	mov    %cl,0x3e0(%r12)
    764a:	00 
    764b:	0f 85 33 03 00 00    	jne    7984 <dm_dedup_ctr+0x1014>

    7651:	8b 85 60 fe ff ff    	mov    -0x1a0(%rbp),%eax

    7657:	49 c7 84 24 f8 03 00 	movq   $0x0,0x3f8(%r12)
    765e:	00 00 00 00 00 

    7663:	41 89 84 24 f0 03 00 	mov    %eax,0x3f0(%r12)
    766a:	00 
	dc->crypto_key_size = crypto_key_size;
    766b:	8b 85 60 ff ff ff    	mov    -0xa0(%rbp),%eax
    7671:	41 89 84 24 f4 03 00 	mov    %eax,0x3f4(%r12)
    7678:	00 
    asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    7679:	0f 31                	rdtsc  
	dc->time_last_flush = read_tsc();
    767b:	41 8b 74 24 14       	mov    0x14(%r12),%esi
    var = ((unsigned long long int) hi << 32) | lo;
    7680:	48 c1 e2 20          	shl    $0x20,%rdx
    7684:	89 c0                	mov    %eax,%eax
    7686:	48 09 c2             	or     %rax,%rdx
	dc->time_last_flush = read_tsc();
    7689:	48 89 df             	mov    %rbx,%rdi
    var = ((unsigned long long int) hi << 32) | lo;
    768c:	49 89 94 24 00 04 00 	mov    %rdx,0x400(%r12)
    7693:	00 
	dc->time_last_flush = read_tsc();
    7694:	e8 00 00 00 00       	callq  7699 <dm_dedup_ctr+0xd29>

    7699:	85 c0                	test   %eax,%eax
	dc->time_last_flush = read_tsc();
    769b:	41 89 c7             	mov    %eax,%r15d

    769e:	0f 85 c0 00 00 00    	jne    7764 <dm_dedup_ctr+0xdf4>
		goto bad_kvstore_init;
    76a4:	48 b8 01 00 00 00 01 	movabs $0x100000001,%rax
    76ab:	00 00 00 
	ti->num_flush_bios = 1;
    76ae:	80 4b 50 03          	orb    $0x3,0x50(%rbx)
	ti->discards_supported = true;
    76b2:	4c 89 63 40          	mov    %r12,0x40(%rbx)
		goto bad_kvstore_init;
    76b6:	48 89 43 24          	mov    %rax,0x24(%rbx)
	ti->num_discard_bios = 1;
    76ba:	31 db                	xor    %ebx,%ebx
    76bc:	49 83 bc 24 98 02 00 	cmpq   $0x0,0x298(%r12)
    76c3:	00 00 
	ti->private = dc;
    76c5:	41 bd ff ff ff ff    	mov    $0xffffffff,%r13d
	ti->num_discard_bios = 1;
    76cb:	0f 84 85 f3 ff ff    	je     6a56 <dm_dedup_ctr+0xe6>
	ti->private = dc;
    76d1:	49 8b 04 24          	mov    (%r12),%rax
    76d5:	49 8b 94 24 90 02 00 	mov    0x290(%r12),%rdx
    76dc:	00 
    76dd:	8d 34 dd 00 00 00 00 	lea    0x0(,%rbx,8),%esi
    76e4:	45 31 c0             	xor    %r8d,%r8d
	ti->num_discard_bios = 1;
    76e7:	83 c3 01             	add    $0x1,%ebx
	ti->private = dc;
    76ea:	45 89 e9             	mov    %r13d,%r9d
    76ed:	48 63 f6             	movslq %esi,%rsi
    76f0:	b9 00 00 60 00       	mov    $0x600000,%ecx
    76f5:	52                   	push   %rdx
    76f6:	48 8b 38             	mov    (%rax),%rdi
    76f9:	ba 08 00 00 00       	mov    $0x8,%edx
    76fe:	e8 00 00 00 00       	callq  7703 <dm_dedup_ctr+0xd93>
	ti->num_discard_bios = 1;
    7703:	48 63 c3             	movslq %ebx,%rax
    7706:	49 3b 84 24 98 02 00 	cmp    0x298(%r12),%rax
    770d:	00 
    770e:	5a                   	pop    %rdx
    770f:	72 c0                	jb     76d1 <dm_dedup_ctr+0xd61>
    7711:	e9 40 f3 ff ff       	jmpq   6a56 <dm_dedup_ctr+0xe6>
		ti->error = "failed to create workqueue";
    7716:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    771d:	00 
		r = -ENOMEM;
    771e:	41 bf f4 ff ff ff    	mov    $0xfffffff4,%r15d
		goto bad_bs;
    7724:	e9 cb f8 ff ff       	jmpq   6ff4 <dm_dedup_ctr+0x684>
	if (!dedup_work_pool) {
    7729:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    7730:	00 
		ti->error = "failed to create dedup mempool";
    7731:	41 bf f4 ff ff ff    	mov    $0xfffffff4,%r15d
	mempool_destroy(dedup_work_pool);
    7737:	4c 89 ef             	mov    %r13,%rdi
    773a:	e8 00 00 00 00       	callq  773f <dm_dedup_ctr+0xdcf>
    773f:	e9 b0 f8 ff ff       	jmpq   6ff4 <dm_dedup_ctr+0x684>
	if (!check_work_pool) {
    7744:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    774b:	00 
		ti->error = "failed to create fec mempool";
    774c:	41 bf f4 ff ff ff    	mov    $0xfffffff4,%r15d
	mempool_destroy(check_work_pool);
    7752:	4c 89 f7             	mov    %r14,%rdi
    7755:	e8 00 00 00 00       	callq  775a <dm_dedup_ctr+0xdea>
    775a:	eb db                	jmp    7737 <dm_dedup_ctr+0xdc7>
	dc->gc_threhold = 1ULL * dc->pblocks * da.gc_rate / 100;
    775c:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    7763:	00 

    7764:	49 8b bc 24 b0 01 00 	mov    0x1b0(%r12),%rdi
    776b:	00 
    776c:	e8 00 00 00 00       	callq  7771 <dm_dedup_ctr+0xe01>
	desc_table_deinit(dc->desc_table);
    7771:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
    7778:	48 85 ff             	test   %rdi,%rdi
    777b:	74 11                	je     778e <dm_dedup_ctr+0xe1e>
bad_metadata_init:
    777d:	49 8b 84 24 b8 03 00 	mov    0x3b8(%r12),%rax
    7784:	00 
    7785:	48 8b 40 08          	mov    0x8(%rax),%rax
    7789:	e8 00 00 00 00       	callq  778e <dm_dedup_ctr+0xe1e>
	if (md && !IS_ERR(md))
    778e:	49 8b bc 24 70 03 00 	mov    0x370(%r12),%rdi
    7795:	00 
    7796:	e8 00 00 00 00       	callq  779b <dm_dedup_ctr+0xe2b>
	dm_io_client_destroy(dc->io_client);
    779b:	48 8b bd 68 fe ff ff 	mov    -0x198(%rbp),%rdi
    77a2:	e8 00 00 00 00       	callq  77a7 <dm_dedup_ctr+0xe37>
    77a7:	eb a9                	jmp    7752 <dm_dedup_ctr+0xde2>
    77a9:	89 c1                	mov    %eax,%ecx
    77ab:	83 e8 01             	sub    $0x1,%eax
    77ae:	49 8d bc 24 78 03 00 	lea    0x378(%r12),%rdi
    77b5:	00 
    77b6:	49 8b 74 0f f8       	mov    -0x8(%r15,%rcx,1),%rsi
    77bb:	c1 e8 03             	shr    $0x3,%eax
    77be:	49 89 b4 0c 70 03 00 	mov    %rsi,0x370(%r12,%rcx,1)
    77c5:	00 
    77c6:	89 c1                	mov    %eax,%ecx
    77c8:	4c 89 fe             	mov    %r15,%rsi
    77cb:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
    77ce:	e9 3c fa ff ff       	jmpq   720f <dm_dedup_ctr+0x89f>
			break;
    77d3:	ba 08 00 00 00       	mov    $0x8,%edx
    77d8:	8b b5 60 fe ff ff    	mov    -0x1a0(%rbp),%esi
    77de:	48 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%rdi
    77e5:	e8 00 00 00 00       	callq  77ea <dm_dedup_ctr+0xe7a>
    77ea:	49 89 c7             	mov    %rax,%r15
    77ed:	49 89 84 24 c8 03 00 	mov    %rax,0x3c8(%r12)
    77f4:	00 
    77f5:	e9 bf fa ff ff       	jmpq   72b9 <dm_dedup_ctr+0x949>
	r = dc->mdops->flush_meta(md);
    77fa:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    7801:	00 
	if (r < 0) {
    7802:	e9 5d ff ff ff       	jmpq   7764 <dm_dedup_ctr+0xdf4>
	u64 physical_block_counter = 0;
    7807:	31 c0                	xor    %eax,%eax
	u64 logical_block_counter = 0;
    7809:	31 d2                	xor    %edx,%edx
    780b:	e9 9f fb ff ff       	jmpq   73af <dm_dedup_ctr+0xa3f>
	case BKND_INRAM:
    7810:	83 e0 ff             	and    $0xffffffff,%eax
	switch (da.backend) {
    7813:	49 c7 84 24 b8 03 00 	movq   $0x0,0x3b8(%r12)
    781a:	00 00 00 00 00 
	case BKND_INRAM:
    781f:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
		dc->mdops = &metadata_ops_inram;
    7826:	48 8d 85 88 fe ff ff 	lea    -0x178(%rbp),%rax
    782d:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
		iparam_inram.blocks = dc->pblocks;
    7834:	e9 6f f9 ff ff       	jmpq   71a8 <dm_dedup_ctr+0x838>
	case BKND_COWBTREE:
    7839:	83 e0 ff             	and    $0xffffffff,%eax
		break;
    783c:	49 c7 84 24 b8 03 00 	movq   $0x0,0x3b8(%r12)
    7843:	00 00 00 00 00 
	case BKND_COWBTREE:
    7848:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
		dc->mdops = &metadata_ops_cowbtree;
    784f:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    7856:	48 8b 00             	mov    (%rax),%rax
    7859:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
		iparam_cowbtree.blocks = dc->pblocks;
    7860:	48 8d 85 98 fe ff ff 	lea    -0x168(%rbp),%rax
    7867:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
		iparam_cowbtree.metadata_bdev = da.meta_dev->bdev;
    786e:	e9 35 f9 ff ff       	jmpq   71a8 <dm_dedup_ctr+0x838>
	void *iparam = NULL;
    7873:	48 c7 85 70 fe ff ff 	movq   $0x0,-0x190(%rbp)
    787a:	00 00 00 00 
    787e:	e9 25 f9 ff ff       	jmpq   71a8 <dm_dedup_ctr+0x838>
	case BKND_XREMAP:
    7883:	83 e0 ff             	and    $0xffffffff,%eax
		break;
    7886:	49 c7 84 24 b8 03 00 	movq   $0x0,0x3b8(%r12)
    788d:	00 00 00 00 00 
	case BKND_XREMAP:
    7892:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
		dc->mdops = &metadata_ops_xremap;
    7899:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
    78a0:	48 8b 00             	mov    (%rax),%rax
    78a3:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
		iparam_xremap.blocks = dc->pblocks;
    78aa:	48 8d 85 a8 fe ff ff 	lea    -0x158(%rbp),%rax
    78b1:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
		iparam_xremap.metadata_bdev = da.meta_dev->bdev;
    78b8:	e9 eb f8 ff ff       	jmpq   71a8 <dm_dedup_ctr+0x838>
    78bd:	89 c1                	mov    %eax,%ecx
    78bf:	4c 89 ff             	mov    %r15,%rdi
    78c2:	48 8b 74 0a f8       	mov    -0x8(%rdx,%rcx,1),%rsi
    78c7:	49 89 74 0f f8       	mov    %rsi,-0x8(%r15,%rcx,1)
    78cc:	8d 48 ff             	lea    -0x1(%rax),%ecx
    78cf:	48 89 d6             	mov    %rdx,%rsi
    78d2:	c1 e9 03             	shr    $0x3,%ecx
    78d5:	f3 48 a5             	rep movsq %ds:(%rsi),%es:(%rdi)
    78d8:	e9 74 fd ff ff       	jmpq   7651 <dm_dedup_ctr+0xce1>
                                sizeof(struct remap_or_discard_work));
    78dd:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    78e4:	00 

    78e5:	41 89 c7             	mov    %eax,%r15d
	dc->io_client = dm_io_client_create();
    78e8:	e9 ae fe ff ff       	jmpq   779b <dm_dedup_ctr+0xe2b>
	md = dc->mdops->init_meta(iparam, &unformatted);
    78ed:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    78f4:	00 
	if (IS_ERR(md)) {
    78f5:	44 8b bd 70 fe ff ff 	mov    -0x190(%rbp),%r15d
    78fc:	e9 8d fe ff ff       	jmpq   778e <dm_dedup_ctr+0xe1e>
	dc->desc_table = desc_table_init(da.hash_algo);
    7901:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    7908:	00 
	if (IS_ERR(dc->desc_table)) {
    7909:	41 89 c7             	mov    %eax,%r15d
		ti->error = "failed to initialize crypto API";
    790c:	e9 60 fe ff ff       	jmpq   7771 <dm_dedup_ctr+0xe01>
			sizeof(struct lbn_pbn_value), dc->lblocks, unformatted);
    7911:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    7918:	00 
	if (IS_ERR(dc->kvs_lbn_pbn)) {
    7919:	41 89 c7             	mov    %eax,%r15d
		ti->error = "failed to create linear KVS";
    791c:	e9 43 fe ff ff       	jmpq   7764 <dm_dedup_ctr+0xdf4>
				sizeof(struct on_disk_stats));
    7921:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    7928:	00 
		if (r < 0) {
    7929:	e9 36 fe ff ff       	jmpq   7764 <dm_dedup_ctr+0xdf4>
    792e:	8b 8d 20 ff ff ff    	mov    -0xe0(%rbp),%ecx
    7934:	89 c0                	mov    %eax,%eax
    7936:	41 89 8c 24 78 03 00 	mov    %ecx,0x378(%r12)
    793d:	00 
    793e:	41 8b 54 07 fc       	mov    -0x4(%r15,%rax,1),%edx
    7943:	41 89 94 04 74 03 00 	mov    %edx,0x374(%r12,%rax,1)
    794a:	00 
    794b:	e9 bf f8 ff ff       	jmpq   720f <dm_dedup_ctr+0x89f>
    7950:	89 c0                	mov    %eax,%eax
    7952:	41 0f b7 54 07 fe    	movzwl -0x2(%r15,%rax,1),%edx
    7958:	66 41 89 94 04 76 03 	mov    %dx,0x376(%r12,%rax,1)
    795f:	00 00 
    7961:	e9 a9 f8 ff ff       	jmpq   720f <dm_dedup_ctr+0x89f>
    7966:	8b 8d 0c ff ff ff    	mov    -0xf4(%rbp),%ecx
    796c:	89 c0                	mov    %eax,%eax
    796e:	41 89 8c 24 e0 03 00 	mov    %ecx,0x3e0(%r12)
    7975:	00 
    7976:	8b 54 02 fc          	mov    -0x4(%rdx,%rax,1),%edx
    797a:	41 89 54 07 fc       	mov    %edx,-0x4(%r15,%rax,1)
    797f:	e9 cd fc ff ff       	jmpq   7651 <dm_dedup_ctr+0xce1>
    7984:	89 c0                	mov    %eax,%eax
    7986:	0f b7 54 02 fe       	movzwl -0x2(%rdx,%rax,1),%edx
    798b:	66 41 89 54 07 fe    	mov    %dx,-0x2(%r15,%rax,1)
    7991:	e9 bb fc ff ff       	jmpq   7651 <dm_dedup_ctr+0xce1>
		*err = "Invalid SSD number";
    7996:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    799d:	00 
    799e:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
		return -EINVAL;
    79a5:	41 bf ea ff ff ff    	mov    $0xffffffea,%r15d
    79ab:	e9 7d f0 ff ff       	jmpq   6a2d <dm_dedup_ctr+0xbd>
		fortify_panic(__func__);
    79b0:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    79b7:	e8 00 00 00 00       	callq  79bc <dm_dedup_ctr+0x104c>
                *err = "Invalid corruption flag value";
    79bc:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    79c3:	00 
    79c4:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
                return -EINVAL;
    79cb:	41 bf ea ff ff ff    	mov    $0xffffffea,%r15d
    79d1:	e9 57 f0 ff ff       	jmpq   6a2d <dm_dedup_ctr+0xbd>
		*err = "Unsupported metadata backend";
    79d6:	48 c7 43 48 00 00 00 	movq   $0x0,0x48(%rbx)
    79dd:	00 
    79de:	48 8b b5 f0 fe ff ff 	mov    -0x110(%rbp),%rsi
		return -EINVAL;
    79e5:	41 bf ea ff ff ff    	mov    $0xffffffea,%r15d
    79eb:	e9 3d f0 ff ff       	jmpq   6a2d <dm_dedup_ctr+0xbd>
		fortify_panic(__func__);
    79f0:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    79f7:	e8 00 00 00 00       	callq  79fc <dm_dedup_ctr+0x108c>
    79fc:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000007a00 <allocate_block>:
{
    7a00:	e8 00 00 00 00       	callq  7a05 <allocate_block+0x5>
    7a05:	55                   	push   %rbp
    7a06:	48 89 e5             	mov    %rsp,%rbp
    7a09:	41 54                	push   %r12
    7a0b:	53                   	push   %rbx
    7a0c:	49 89 f4             	mov    %rsi,%r12
    7a0f:	48 89 fb             	mov    %rdi,%rbx
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    7a12:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    7a14:	48 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%rdi)
    7a1b:	00 
    7a1c:	74 10                	je     7a2e <allocate_block+0x2e>
    var = ((unsigned long long int) hi << 32) | lo;
    7a1e:	48 c1 e2 20          	shl    $0x20,%rdx
    7a22:	89 c0                	mov    %eax,%eax
    7a24:	48 09 c2             	or     %rax,%rdx
    7a27:	48 89 97 f0 02 00 00 	mov    %rdx,0x2f0(%rdi)
	r = dc->mdops->alloc_data_block(dc->bmd, pbn_new);
    7a2e:	48 8b 83 b8 03 00 00 	mov    0x3b8(%rbx),%rax
    7a35:	48 8b bb c0 03 00 00 	mov    0x3c0(%rbx),%rdi
    7a3c:	4c 89 e6             	mov    %r12,%rsi
    7a3f:	48 8b 40 20          	mov    0x20(%rax),%rax
    7a43:	e8 00 00 00 00       	callq  7a48 <allocate_block+0x48>
    7a48:	89 c1                	mov    %eax,%ecx
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    7a4a:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    7a4c:	48 83 bb a0 02 00 00 	cmpq   $0x0,0x2a0(%rbx)
    7a53:	00 
    7a54:	74 17                	je     7a6d <allocate_block+0x6d>
		if(dc->tmp_period_time[period]) {
    7a56:	48 8b b3 f0 02 00 00 	mov    0x2f0(%rbx),%rsi
    7a5d:	48 85 f6             	test   %rsi,%rsi
    7a60:	75 26                	jne    7a88 <allocate_block+0x88>
		dc->tmp_period_time[period] = 0;
    7a62:	48 c7 83 f0 02 00 00 	movq   $0x0,0x2f0(%rbx)
    7a69:	00 00 00 00 
	if (!r) {
    7a6d:	85 c9                	test   %ecx,%ecx
    7a6f:	75 36                	jne    7aa7 <allocate_block+0xa7>
		dc->logical_block_counter++;
    7a71:	48 83 83 b8 01 00 00 	addq   $0x1,0x1b8(%rbx)
    7a78:	01 
		dc->physical_block_counter++;
    7a79:	48 83 83 c0 01 00 00 	addq   $0x1,0x1c0(%rbx)
    7a80:	01 
}
    7a81:	5b                   	pop    %rbx
    7a82:	89 c8                	mov    %ecx,%eax
    7a84:	41 5c                	pop    %r12
    7a86:	5d                   	pop    %rbp
    7a87:	c3                   	retq   
    var = ((unsigned long long int) hi << 32) | lo;
    7a88:	89 c0                	mov    %eax,%eax
    7a8a:	48 c1 e2 20          	shl    $0x20,%rdx
    7a8e:	48 09 c2             	or     %rax,%rdx
			dc->total_period_time[period] += t;
    7a91:	48 8b 83 48 03 00 00 	mov    0x348(%rbx),%rax
    7a98:	48 29 f0             	sub    %rsi,%rax
    7a9b:	48 01 c2             	add    %rax,%rdx
    7a9e:	48 89 93 48 03 00 00 	mov    %rdx,0x348(%rbx)
    7aa5:	eb bb                	jmp    7a62 <allocate_block+0x62>
		r = garbage_collect(dc);
    7aa7:	48 89 df             	mov    %rbx,%rdi
    7aaa:	e8 71 db ff ff       	callq  5620 <garbage_collect>
		if(r)
    7aaf:	85 c0                	test   %eax,%eax
		r = garbage_collect(dc);
    7ab1:	89 c1                	mov    %eax,%ecx
		if(r)
    7ab3:	75 cc                	jne    7a81 <allocate_block+0x81>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    7ab5:	0f 31                	rdtsc  
    var = ((unsigned long long int) hi << 32) | lo;
    7ab7:	48 c1 e2 20          	shl    $0x20,%rdx
    7abb:	89 c0                	mov    %eax,%eax
    7abd:	48 09 d0             	or     %rdx,%rax
	if(!dc->enable_time_stats)
    7ac0:	48 83 bb a0 02 00 00 	cmpq   $0x0,0x2a0(%rbx)
    7ac7:	00 
    7ac8:	74 07                	je     7ad1 <allocate_block+0xd1>
		dc->tmp_period_time[period] = var;
    7aca:	48 89 83 e8 02 00 00 	mov    %rax,0x2e8(%rbx)
		r = dc->mdops->flush_meta(dc->bmd);
    7ad1:	48 8b 83 b8 03 00 00 	mov    0x3b8(%rbx),%rax
    7ad8:	48 8b bb c0 03 00 00 	mov    0x3c0(%rbx),%rdi
    7adf:	48 8b 40 48          	mov    0x48(%rax),%rax
    7ae3:	e8 00 00 00 00       	callq  7ae8 <allocate_block+0xe8>
    7ae8:	89 c6                	mov    %eax,%esi
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    7aea:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    7aec:	48 83 bb a0 02 00 00 	cmpq   $0x0,0x2a0(%rbx)
    7af3:	00 
    7af4:	74 34                	je     7b2a <allocate_block+0x12a>
		if(dc->tmp_period_time[period]) {
    7af6:	48 8b 8b e8 02 00 00 	mov    0x2e8(%rbx),%rcx
    7afd:	48 85 c9             	test   %rcx,%rcx
    7b00:	74 1d                	je     7b1f <allocate_block+0x11f>
    var = ((unsigned long long int) hi << 32) | lo;
    7b02:	48 c1 e2 20          	shl    $0x20,%rdx
    7b06:	89 c0                	mov    %eax,%eax
    7b08:	48 09 d0             	or     %rdx,%rax
			dc->total_period_time[period] += t;
    7b0b:	48 8b 93 40 03 00 00 	mov    0x340(%rbx),%rdx
    7b12:	48 29 ca             	sub    %rcx,%rdx
    7b15:	48 01 d0             	add    %rdx,%rax
    7b18:	48 89 83 40 03 00 00 	mov    %rax,0x340(%rbx)
		dc->tmp_period_time[period] = 0;
    7b1f:	48 c7 83 e8 02 00 00 	movq   $0x0,0x2e8(%rbx)
    7b26:	00 00 00 00 
		if (r < 0)
    7b2a:	85 f6                	test   %esi,%esi
    7b2c:	78 38                	js     7b66 <allocate_block+0x166>
		DMINFO("garbage_collect is trigged while allocating.");
    7b2e:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    7b35:	e8 00 00 00 00       	callq  7b3a <allocate_block+0x13a>
		r = dc->mdops->alloc_data_block(dc->bmd, pbn_new);
    7b3a:	48 8b 83 b8 03 00 00 	mov    0x3b8(%rbx),%rax
		dc->writes_after_flush = 0;
    7b41:	48 c7 83 f8 03 00 00 	movq   $0x0,0x3f8(%rbx)
    7b48:	00 00 00 00 
		r = dc->mdops->alloc_data_block(dc->bmd, pbn_new);
    7b4c:	4c 89 e6             	mov    %r12,%rsi
    7b4f:	48 8b bb c0 03 00 00 	mov    0x3c0(%rbx),%rdi
    7b56:	48 8b 40 20          	mov    0x20(%rax),%rax
    7b5a:	e8 00 00 00 00       	callq  7b5f <allocate_block+0x15f>
    7b5f:	89 c1                	mov    %eax,%ecx
    7b61:	e9 1b ff ff ff       	jmpq   7a81 <allocate_block+0x81>
			DMERR("Failed to flush the metadata to disk.");
    7b66:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    7b6d:	e8 00 00 00 00       	callq  7b72 <allocate_block+0x172>
    7b72:	eb ba                	jmp    7b2e <allocate_block+0x12e>
    7b74:	66 66 2e 0f 1f 84 00 	data16 nopw %cs:0x0(%rax,%rax,1)
    7b7b:	00 00 00 00 
    7b7f:	90                   	nop

0000000000007b80 <alloc_pbnblk_and_insert_lbn_pbn>:
{
    7b80:	e8 00 00 00 00       	callq  7b85 <alloc_pbnblk_and_insert_lbn_pbn+0x5>
    7b85:	55                   	push   %rbp
    7b86:	48 89 e5             	mov    %rsp,%rbp
    7b89:	41 55                	push   %r13
    7b8b:	41 54                	push   %r12
    7b8d:	53                   	push   %rbx
    7b8e:	49 89 f4             	mov    %rsi,%r12
    7b91:	48 89 fb             	mov    %rdi,%rbx
    7b94:	49 89 d5             	mov    %rdx,%r13
    7b97:	48 83 ec 18          	sub    $0x18,%rsp
    7b9b:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
    7b9f:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    7ba6:	00 00 
    7ba8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    7bac:	31 c0                	xor    %eax,%eax
	r = allocate_block(dc, pbn_new);
    7bae:	e8 00 00 00 00       	callq  7bb3 <alloc_pbnblk_and_insert_lbn_pbn+0x33>
	if (r < 0) {
    7bb3:	85 c0                	test   %eax,%eax
    7bb5:	0f 88 c4 01 00 00    	js     7d7f <alloc_pbnblk_and_insert_lbn_pbn+0x1ff>
	lbnpbn_value.pbn = *pbn_new;
    7bbb:	49 8b 34 24          	mov    (%r12),%rsi
    7bbf:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    7bc3:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    7bc5:	48 83 bb a0 02 00 00 	cmpq   $0x0,0x2a0(%rbx)
    7bcc:	00 
    7bcd:	0f 85 71 01 00 00    	jne    7d44 <alloc_pbnblk_and_insert_lbn_pbn+0x1c4>
	offset = sector_div(bio->bi_iter.bi_sector, dc->sectors_per_block);
    7bd3:	8b 4b 14             	mov    0x14(%rbx),%ecx
    7bd6:	49 8b 45 28          	mov    0x28(%r13),%rax
    7bda:	31 d2                	xor    %edx,%edx
	do_io_remap_device(dc, bio);
    7bdc:	48 89 df             	mov    %rbx,%rdi
    7bdf:	48 f7 f1             	div    %rcx
	offset = sector_div(bio->bi_iter.bi_sector, dc->sectors_per_block);
    7be2:	49 89 45 28          	mov    %rax,0x28(%r13)
	bio->bi_iter.bi_sector = (sector_t)pbn * dc->sectors_per_block + offset;
    7be6:	8b 4b 14             	mov    0x14(%rbx),%ecx
    7be9:	48 63 d2             	movslq %edx,%rdx
    7bec:	48 0f af ce          	imul   %rsi,%rcx
	do_io_remap_device(dc, bio);
    7bf0:	4c 89 ee             	mov    %r13,%rsi
	bio->bi_iter.bi_sector = (sector_t)pbn * dc->sectors_per_block + offset;
    7bf3:	48 01 ca             	add    %rcx,%rdx
    7bf6:	49 89 55 28          	mov    %rdx,0x28(%r13)
	do_io_remap_device(dc, bio);
    7bfa:	e8 51 ea ff ff       	callq  6650 <do_io_remap_device.isra.10>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    7bff:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    7c01:	48 8b 8b a0 02 00 00 	mov    0x2a0(%rbx),%rcx
    7c08:	48 85 c9             	test   %rcx,%rcx
    7c0b:	74 34                	je     7c41 <alloc_pbnblk_and_insert_lbn_pbn+0xc1>
		if(dc->tmp_period_time[period]) {
    7c0d:	48 8b b3 f0 02 00 00 	mov    0x2f0(%rbx),%rsi
    7c14:	48 85 f6             	test   %rsi,%rsi
    7c17:	74 1d                	je     7c36 <alloc_pbnblk_and_insert_lbn_pbn+0xb6>
    var = ((unsigned long long int) hi << 32) | lo;
    7c19:	89 c0                	mov    %eax,%eax
    7c1b:	48 c1 e2 20          	shl    $0x20,%rdx
    7c1f:	48 09 c2             	or     %rax,%rdx
			dc->total_period_time[period] += t;
    7c22:	48 8b 83 48 03 00 00 	mov    0x348(%rbx),%rax
    7c29:	48 29 f0             	sub    %rsi,%rax
    7c2c:	48 01 c2             	add    %rax,%rdx
    7c2f:	48 89 93 48 03 00 00 	mov    %rdx,0x348(%rbx)
		dc->tmp_period_time[period] = 0;
    7c36:	48 c7 83 f0 02 00 00 	movq   $0x0,0x2f0(%rbx)
    7c3d:	00 00 00 00 
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    7c41:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    7c43:	48 85 c9             	test   %rcx,%rcx
    7c46:	0f 85 e3 00 00 00    	jne    7d2f <alloc_pbnblk_and_insert_lbn_pbn+0x1af>
	r = dc->kvs_lbn_pbn->kvs_insert(dc->kvs_lbn_pbn, (void *)&lbn,
    7c4c:	48 8b bb d8 03 00 00 	mov    0x3d8(%rbx),%rdi
    7c53:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    7c59:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
    7c5d:	ba 08 00 00 00       	mov    $0x8,%edx
    7c62:	48 8d 75 d0          	lea    -0x30(%rbp),%rsi
    7c66:	48 8b 47 18          	mov    0x18(%rdi),%rax
    7c6a:	e8 00 00 00 00       	callq  7c6f <alloc_pbnblk_and_insert_lbn_pbn+0xef>
    7c6f:	41 89 c5             	mov    %eax,%r13d
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    7c72:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    7c74:	48 8b 8b a0 02 00 00 	mov    0x2a0(%rbx),%rcx
    7c7b:	48 85 c9             	test   %rcx,%rcx
    7c7e:	74 34                	je     7cb4 <alloc_pbnblk_and_insert_lbn_pbn+0x134>
		if(dc->tmp_period_time[period]) {
    7c80:	48 8b b3 d8 02 00 00 	mov    0x2d8(%rbx),%rsi
    7c87:	48 85 f6             	test   %rsi,%rsi
    7c8a:	74 1d                	je     7ca9 <alloc_pbnblk_and_insert_lbn_pbn+0x129>
    var = ((unsigned long long int) hi << 32) | lo;
    7c8c:	89 c0                	mov    %eax,%eax
    7c8e:	48 c1 e2 20          	shl    $0x20,%rdx
    7c92:	48 09 c2             	or     %rax,%rdx
			dc->total_period_time[period] += t;
    7c95:	48 8b 83 30 03 00 00 	mov    0x330(%rbx),%rax
    7c9c:	48 29 f0             	sub    %rsi,%rax
    7c9f:	48 01 c2             	add    %rax,%rdx
    7ca2:	48 89 93 30 03 00 00 	mov    %rdx,0x330(%rbx)
		dc->tmp_period_time[period] = 0;
    7ca9:	48 c7 83 d8 02 00 00 	movq   $0x0,0x2d8(%rbx)
    7cb0:	00 00 00 00 
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    7cb4:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    7cb6:	48 85 c9             	test   %rcx,%rcx
    7cb9:	75 62                	jne    7d1d <alloc_pbnblk_and_insert_lbn_pbn+0x19d>
	if (r < 0)
    7cbb:	45 85 ed             	test   %r13d,%r13d
    7cbe:	79 22                	jns    7ce2 <alloc_pbnblk_and_insert_lbn_pbn+0x162>
		dc->mdops->dec_refcount(dc->bmd, *pbn_new);
    7cc0:	48 8b 83 b8 03 00 00 	mov    0x3b8(%rbx),%rax
    7cc7:	48 8b bb c0 03 00 00 	mov    0x3c0(%rbx),%rdi
    7cce:	49 8b 34 24          	mov    (%r12),%rsi
    7cd2:	48 8b 40 30          	mov    0x30(%rax),%rax
    7cd6:	e8 00 00 00 00       	callq  7cdb <alloc_pbnblk_and_insert_lbn_pbn+0x15b>
    7cdb:	48 8b 8b a0 02 00 00 	mov    0x2a0(%rbx),%rcx
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    7ce2:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    7ce4:	48 85 c9             	test   %rcx,%rcx
    7ce7:	74 17                	je     7d00 <alloc_pbnblk_and_insert_lbn_pbn+0x180>
		if(dc->tmp_period_time[period]) {
    7ce9:	48 8b 8b e0 02 00 00 	mov    0x2e0(%rbx),%rcx
    7cf0:	48 85 c9             	test   %rcx,%rcx
    7cf3:	75 68                	jne    7d5d <alloc_pbnblk_and_insert_lbn_pbn+0x1dd>
		dc->tmp_period_time[period] = 0;
    7cf5:	48 c7 83 e0 02 00 00 	movq   $0x0,0x2e0(%rbx)
    7cfc:	00 00 00 00 
}
    7d00:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
    7d04:	65 48 33 3c 25 28 00 	xor    %gs:0x28,%rdi
    7d0b:	00 00 
    7d0d:	44 89 e8             	mov    %r13d,%eax
    7d10:	75 78                	jne    7d8a <alloc_pbnblk_and_insert_lbn_pbn+0x20a>
    7d12:	48 83 c4 18          	add    $0x18,%rsp
    7d16:	5b                   	pop    %rbx
    7d17:	41 5c                	pop    %r12
    7d19:	41 5d                	pop    %r13
    7d1b:	5d                   	pop    %rbp
    7d1c:	c3                   	retq   
    var = ((unsigned long long int) hi << 32) | lo;
    7d1d:	48 c1 e2 20          	shl    $0x20,%rdx
    7d21:	89 c0                	mov    %eax,%eax
    7d23:	48 09 c2             	or     %rax,%rdx
    7d26:	48 89 93 e0 02 00 00 	mov    %rdx,0x2e0(%rbx)
    7d2d:	eb 8c                	jmp    7cbb <alloc_pbnblk_and_insert_lbn_pbn+0x13b>
    7d2f:	48 c1 e2 20          	shl    $0x20,%rdx
    7d33:	89 c0                	mov    %eax,%eax
    7d35:	48 09 c2             	or     %rax,%rdx
    7d38:	48 89 93 d8 02 00 00 	mov    %rdx,0x2d8(%rbx)
    7d3f:	e9 08 ff ff ff       	jmpq   7c4c <alloc_pbnblk_and_insert_lbn_pbn+0xcc>
    7d44:	48 c1 e2 20          	shl    $0x20,%rdx
    7d48:	89 c0                	mov    %eax,%eax
    7d4a:	48 09 c2             	or     %rax,%rdx
    7d4d:	48 89 93 f0 02 00 00 	mov    %rdx,0x2f0(%rbx)
    7d54:	49 8b 34 24          	mov    (%r12),%rsi
    7d58:	e9 76 fe ff ff       	jmpq   7bd3 <alloc_pbnblk_and_insert_lbn_pbn+0x53>
    7d5d:	89 c0                	mov    %eax,%eax
    7d5f:	48 c1 e2 20          	shl    $0x20,%rdx
    7d63:	48 09 c2             	or     %rax,%rdx
			dc->total_period_time[period] += t;
    7d66:	48 8b 83 38 03 00 00 	mov    0x338(%rbx),%rax
    7d6d:	48 29 c8             	sub    %rcx,%rax
    7d70:	48 01 c2             	add    %rax,%rdx
    7d73:	48 89 93 38 03 00 00 	mov    %rdx,0x338(%rbx)
    7d7a:	e9 76 ff ff ff       	jmpq   7cf5 <alloc_pbnblk_and_insert_lbn_pbn+0x175>
		return r;
    7d7f:	41 bd fb ff ff ff    	mov    $0xfffffffb,%r13d
    7d85:	e9 76 ff ff ff       	jmpq   7d00 <alloc_pbnblk_and_insert_lbn_pbn+0x180>
}
    7d8a:	e8 00 00 00 00       	callq  7d8f <alloc_pbnblk_and_insert_lbn_pbn+0x20f>
    7d8f:	90                   	nop

0000000000007d90 <do_work>:
{
    7d90:	e8 00 00 00 00       	callq  7d95 <do_work+0x5>
    7d95:	55                   	push   %rbp
    7d96:	48 89 e5             	mov    %rsp,%rbp
    7d99:	41 57                	push   %r15
    7d9b:	41 56                	push   %r14
    7d9d:	41 55                	push   %r13
    7d9f:	41 54                	push   %r12
    7da1:	53                   	push   %rbx
    7da2:	48 81 ec c0 00 00 00 	sub    $0xc0,%rsp
	struct dedup_config *dc = (struct dedup_config *)data->config;
    7da9:	4c 8b 7f 20          	mov    0x20(%rdi),%r15
	struct bio *bio = (struct bio *)data->bio;
    7dad:	48 8b 5f 28          	mov    0x28(%rdi),%rbx
{
    7db1:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
    7db8:	00 00 
    7dba:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    7dbe:	31 c0                	xor    %eax,%eax
	mempool_free(data, dc->dedup_work_pool);
    7dc0:	49 8b b7 08 04 00 00 	mov    0x408(%r15),%rsi
    7dc7:	e8 00 00 00 00       	callq  7dcc <do_work+0x3c>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    7dcc:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    7dce:	49 8b 8f a0 02 00 00 	mov    0x2a0(%r15),%rcx
    7dd5:	48 85 c9             	test   %rcx,%rcx
    7dd8:	74 18                	je     7df2 <do_work+0x62>
		dc->usr_total_cnt += 1;
    7dda:	49 83 87 40 02 00 00 	addq   $0x1,0x240(%r15)
    7de1:	01 
    var = ((unsigned long long int) hi << 32) | lo;
    7de2:	48 c1 e2 20          	shl    $0x20,%rdx
    7de6:	89 c0                	mov    %eax,%eax
    7de8:	48 09 c2             	or     %rax,%rdx
    7deb:	49 89 97 a8 02 00 00 	mov    %rdx,0x2a8(%r15)
	if (bio->bi_opf & (REQ_PREFLUSH | REQ_FUA) && !bio_sectors(bio)) {
    7df2:	8b 43 10             	mov    0x10(%rbx),%eax
    7df5:	a9 00 00 06 00       	test   $0x60000,%eax
    7dfa:	74 0e                	je     7e0a <do_work+0x7a>
    7dfc:	8b 53 44             	mov    0x44(%rbx),%edx
    7dff:	c1 ea 09             	shr    $0x9,%edx
    7e02:	85 d2                	test   %edx,%edx
    7e04:	0f 84 b8 05 00 00    	je     83c2 <do_work+0x632>
	if (bio_op(bio) == REQ_OP_DISCARD) {
    7e0a:	3c 03                	cmp    $0x3,%al
    7e0c:	0f 84 8a 08 00 00    	je     869c <do_work+0x90c>
	switch (bio_data_dir(bio)) {
    7e12:	a8 01                	test   $0x1,%al
    7e14:	0f 84 66 04 00 00    	je     8280 <do_work+0x4f0>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    7e1a:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    7e1c:	48 85 c9             	test   %rcx,%rcx
    7e1f:	0f 85 ac 06 00 00    	jne    84d1 <do_work+0x741>
	if (dc->corrupted_blocks > dc->fec_fixed)
    7e25:	49 8b 87 60 03 00 00 	mov    0x360(%r15),%rax
    7e2c:	49 39 87 68 03 00 00 	cmp    %rax,0x368(%r15)
    7e33:	0f 87 85 12 00 00    	ja     90be <do_work+0x132e>
	dc->writes++;
    7e39:	49 83 87 d0 01 00 00 	addq   $0x1,0x1d0(%r15)
    7e40:	01 
	if (bio->bi_iter.bi_size < dc->block_size) {
    7e41:	41 8b 47 10          	mov    0x10(%r15),%eax
    7e45:	49 89 dc             	mov    %rbx,%r12
    7e48:	39 43 44             	cmp    %eax,0x44(%rbx)
    7e4b:	0f 82 6c 07 00 00    	jb     85bd <do_work+0x82d>
	lbn = bio_lbn(dc, bio);
    7e51:	49 8b 44 24 28       	mov    0x28(%r12),%rax
    7e56:	45 8b 6f 14          	mov    0x14(%r15),%r13d
    7e5a:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    7e61:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    7e63:	48 85 c9             	test   %rcx,%rcx
    7e66:	74 10                	je     7e78 <do_work+0xe8>
    var = ((unsigned long long int) hi << 32) | lo;
    7e68:	48 c1 e2 20          	shl    $0x20,%rdx
    7e6c:	89 c0                	mov    %eax,%eax
    7e6e:	48 09 c2             	or     %rax,%rdx
    7e71:	49 89 97 c0 02 00 00 	mov    %rdx,0x2c0(%r15)
	r = compute_hash_bio(dc->desc_table, bio, hash);
    7e78:	49 8b bf b0 01 00 00 	mov    0x1b0(%r15),%rdi
    7e7f:	48 8d 55 b0          	lea    -0x50(%rbp),%rdx
    7e83:	4c 89 e6             	mov    %r12,%rsi
    7e86:	e8 00 00 00 00       	callq  7e8b <do_work+0xfb>
    7e8b:	41 89 c6             	mov    %eax,%r14d
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    7e8e:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    7e90:	49 8b 8f a0 02 00 00 	mov    0x2a0(%r15),%rcx
    7e97:	48 85 c9             	test   %rcx,%rcx
    7e9a:	74 1b                	je     7eb7 <do_work+0x127>
		if(dc->tmp_period_time[period]) {
    7e9c:	49 8b b7 c0 02 00 00 	mov    0x2c0(%r15),%rsi
    7ea3:	48 85 f6             	test   %rsi,%rsi
    7ea6:	0f 85 90 09 00 00    	jne    883c <do_work+0xaac>
		dc->tmp_period_time[period] = 0;
    7eac:	49 c7 87 c0 02 00 00 	movq   $0x0,0x2c0(%r15)
    7eb3:	00 00 00 00 
	if (r)
    7eb7:	45 85 f6             	test   %r14d,%r14d
    7eba:	0f 85 93 07 00 00    	jne    8653 <do_work+0x8c3>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    7ec0:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    7ec2:	48 85 c9             	test   %rcx,%rcx
    7ec5:	74 10                	je     7ed7 <do_work+0x147>
    var = ((unsigned long long int) hi << 32) | lo;
    7ec7:	48 c1 e2 20          	shl    $0x20,%rdx
    7ecb:	89 c0                	mov    %eax,%eax
    7ecd:	48 09 c2             	or     %rax,%rdx
    7ed0:	49 89 97 d0 02 00 00 	mov    %rdx,0x2d0(%r15)
	if (!strcmp(dc->backend_str, "xremap"))
    7ed7:	49 8d b7 78 03 00 00 	lea    0x378(%r15),%rsi
    7ede:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    7ee5:	b9 07 00 00 00       	mov    $0x7,%ecx
    7eea:	41 8b 97 f0 03 00 00 	mov    0x3f0(%r15),%edx
		r = dc->kvs_hash_pbn->kvs_lookup(dc->kvs_hash_pbn, hash,
    7ef1:	4c 8d 85 54 ff ff ff 	lea    -0xac(%rbp),%r8
	if (!strcmp(dc->backend_str, "xremap"))
    7ef8:	48 89 b5 40 ff ff ff 	mov    %rsi,-0xc0(%rbp)
    7eff:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
    7f01:	49 8b bf c8 03 00 00 	mov    0x3c8(%r15),%rdi
    7f08:	0f 97 c0             	seta   %al
    7f0b:	1c 00                	sbb    $0x0,%al
    7f0d:	84 c0                	test   %al,%al
    7f0f:	4c 8b 5f 10          	mov    0x10(%rdi),%r11
    7f13:	0f 85 0b 09 00 00    	jne    8824 <do_work+0xa94>
		r = dc->kvs_hash_pbn->kvs_lookup(dc->kvs_hash_pbn, hash,
    7f19:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    7f1d:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    7f21:	e8 00 00 00 00       	callq  7f26 <do_work+0x196>
    7f26:	41 89 c3             	mov    %eax,%r11d
	sector_div(lbn, dc->sectors_per_block);
    7f29:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
    7f30:	31 d2                	xor    %edx,%edx
    7f32:	49 f7 f5             	div    %r13
    7f35:	49 89 c1             	mov    %rax,%r9
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    7f38:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    7f3a:	4d 8b 87 a0 02 00 00 	mov    0x2a0(%r15),%r8
    7f41:	4d 85 c0             	test   %r8,%r8
    7f44:	0f 84 81 08 00 00    	je     87cb <do_work+0xa3b>
		if(dc->tmp_period_time[period]) {
    7f4a:	49 8b 8f d0 02 00 00 	mov    0x2d0(%r15),%rcx
    7f51:	48 85 c9             	test   %rcx,%rcx
    7f54:	74 1d                	je     7f73 <do_work+0x1e3>
    var = ((unsigned long long int) hi << 32) | lo;
    7f56:	89 c0                	mov    %eax,%eax
    7f58:	48 c1 e2 20          	shl    $0x20,%rdx
    7f5c:	48 09 c2             	or     %rax,%rdx
			dc->total_period_time[period] += t;
    7f5f:	49 8b 87 28 03 00 00 	mov    0x328(%r15),%rax
    7f66:	48 29 c8             	sub    %rcx,%rax
    7f69:	48 01 d0             	add    %rdx,%rax
    7f6c:	49 89 87 28 03 00 00 	mov    %rax,0x328(%r15)
	if (r == -ENODATA) {
    7f73:	41 83 fb c3          	cmp    $0xffffffc3,%r11d
		dc->tmp_period_time[period] = 0;
    7f77:	49 c7 87 d0 02 00 00 	movq   $0x0,0x2d0(%r15)
    7f7e:	00 00 00 00 
	dc->gc_needed = 0;
    7f82:	49 c7 87 20 02 00 00 	movq   $0x0,0x220(%r15)
    7f89:	00 00 00 00 
	if (r == -ENODATA) {
    7f8d:	0f 84 ba 09 00 00    	je     894d <do_work+0xbbd>
	else if (r == 0) {
    7f93:	45 85 db             	test   %r11d,%r11d
    7f96:	0f 85 e0 01 00 00    	jne    817c <do_work+0x3ec>
		if (!strcmp(dc->backend_str, "xremap"))
    7f9c:	48 8b b5 40 ff ff ff 	mov    -0xc0(%rbp),%rsi
    7fa3:	b9 07 00 00 00       	mov    $0x7,%ecx
    7fa8:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    7faf:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
    7fb1:	0f 97 c0             	seta   %al
    7fb4:	1c 00                	sbb    $0x0,%al
    7fb6:	84 c0                	test   %al,%al
    7fb8:	0f 85 5e 0c 00 00    	jne    8c1c <do_work+0xe8c>
    7fbe:	0f b6 45 a8          	movzbl -0x58(%rbp),%eax
    7fc2:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
    7fc6:	4c 89 8d 48 ff ff ff 	mov    %r9,-0xb8(%rbp)
	ref = dc->mdops->get_refcount(dc->bmd, pbn_this);
    7fcd:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    7fd4:	48 89 b5 30 ff ff ff 	mov    %rsi,-0xd0(%rbp)
    7fdb:	83 e0 7f             	and    $0x7f,%eax
    7fde:	88 85 38 ff ff ff    	mov    %al,-0xc8(%rbp)
    7fe4:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    7feb:	48 8b 40 38          	mov    0x38(%rax),%rax
    7fef:	e8 00 00 00 00       	callq  7ff4 <do_work+0x264>
	ref = dc->mdops->get_refcount(dc->bmd, lbn);
    7ff4:	4c 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%r9
	ref = dc->mdops->get_refcount(dc->bmd, pbn_this);
    7ffb:	41 89 c5             	mov    %eax,%r13d
	ref = dc->mdops->get_refcount(dc->bmd, lbn);
    7ffe:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    8005:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    800c:	4c 89 ce             	mov    %r9,%rsi
    800f:	48 8b 40 38          	mov    0x38(%rax),%rax
    8013:	e8 00 00 00 00       	callq  8018 <do_work+0x288>
	if (cur_tv.type == 1 || cur_tv.ver != old_tv.ver) {//fp is invalid
    8018:	45 84 ed             	test   %r13b,%r13b
	ref = dc->mdops->get_refcount(dc->bmd, lbn);
    801b:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
	if (cur_tv.type == 1 || cur_tv.ver != old_tv.ver) {//fp is invalid
    8021:	4c 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%r9
    8028:	0f 88 30 0e 00 00    	js     8e5e <do_work+0x10ce>
    802e:	41 83 e5 7f          	and    $0x7f,%r13d
    8032:	44 3a ad 38 ff ff ff 	cmp    -0xc8(%rbp),%r13b
    8039:	0f 85 1f 0e 00 00    	jne    8e5e <do_work+0x10ce>
		if(pbn_this == lbn) {
    803f:	4c 3b 8d 30 ff ff ff 	cmp    -0xd0(%rbp),%r9
    8046:	0f 84 29 14 00 00    	je     9475 <do_work+0x16e5>
		cur_tv.ver = calculate_tarSSD(dc, pbn_this);
    804c:	49 8b 8f 98 02 00 00 	mov    0x298(%r15),%rcx
	tmp = sector_div(lpn, align_size);
    8053:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
    805a:	31 d2                	xor    %edx,%edx
	u64 len = dc->remote_len;
    805c:	49 8b b7 90 02 00 00 	mov    0x290(%r15),%rsi
	tmp = sector_div(lpn, align_size);
    8063:	48 f7 f1             	div    %rcx
	u64 len = dc->remote_len;
    8066:	49 89 f0             	mov    %rsi,%r8
		cur_tv.ver = calculate_tarSSD(dc, pbn_this);
    8069:	89 d0                	mov    %edx,%eax
    806b:	31 d2                	xor    %edx,%edx
    806d:	83 e0 7f             	and    $0x7f,%eax
		if(check_collision(dc, lbn, cur_tv.ver)){//collision happen
    8070:	0f b6 f8             	movzbl %al,%edi
		cur_tv.ver = calculate_tarSSD(dc, pbn_this);
    8073:	88 85 27 ff ff ff    	mov    %al,-0xd9(%rbp)
    8079:	4c 89 c8             	mov    %r9,%rax
    807c:	48 f7 f1             	div    %rcx
	if(len == 0) {
    807f:	48 85 f6             	test   %rsi,%rsi
		if(check_collision(dc, lbn, cur_tv.ver)){//collision happen
    8082:	89 bd 48 ff ff ff    	mov    %edi,-0xb8(%rbp)
	if(len == 0) {
    8088:	0f 84 cc 13 00 00    	je     945a <do_work+0x16ca>
	if(oldno == calculate_tarSSD(dc, lpn)) {
    808e:	39 95 48 ff ff ff    	cmp    %edx,-0xb8(%rbp)
    8094:	0f 84 c8 13 00 00    	je     9462 <do_work+0x16d2>
	offset = lpn % (dc->remote_len);
    809a:	31 d2                	xor    %edx,%edx
    809c:	4c 89 c8             	mov    %r9,%rax
	u64 num = dc->pblocks;
    809f:	41 8b 77 18          	mov    0x18(%r15),%esi
	offset = lpn % (dc->remote_len);
    80a3:	49 f7 f0             	div    %r8
    80a6:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    80ad:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
	while (base < num)
    80b4:	48 39 d6             	cmp    %rdx,%rsi
    80b7:	0f 86 bf 0e 00 00    	jbe    8f7c <do_work+0x11ec>
    80bd:	48 89 9d 38 ff ff ff 	mov    %rbx,-0xc8(%rbp)
    80c4:	44 89 b5 20 ff ff ff 	mov    %r14d,-0xe0(%rbp)
    80cb:	49 89 f5             	mov    %rsi,%r13
    80ce:	4d 89 fe             	mov    %r15,%r14
    80d1:	4c 89 a5 18 ff ff ff 	mov    %r12,-0xe8(%rbp)
    80d8:	49 89 d7             	mov    %rdx,%r15
    80db:	4d 89 c4             	mov    %r8,%r12
    80de:	4c 89 cb             	mov    %r9,%rbx
    80e1:	eb 1e                	jmp    8101 <do_work+0x371>
    80e3:	49 8b be c0 03 00 00 	mov    0x3c0(%r14),%rdi
    80ea:	49 8b 86 b8 03 00 00 	mov    0x3b8(%r14),%rax
		base += len;
    80f1:	4b 8d 0c 27          	lea    (%r15,%r12,1),%rcx
	while (base < num)
    80f5:	49 39 cd             	cmp    %rcx,%r13
    80f8:	49 89 cf             	mov    %rcx,%r15
    80fb:	0f 86 60 0e 00 00    	jbe    8f61 <do_work+0x11d1>
		if(base == lpn) {
    8101:	49 39 df             	cmp    %rbx,%r15
			base += len;
    8104:	4a 8d 0c 23          	lea    (%rbx,%r12,1),%rcx
		if(base == lpn) {
    8108:	74 eb                	je     80f5 <do_work+0x365>
		val = dc->mdops->get_refcount(dc->bmd, base);
    810a:	48 8b 40 38          	mov    0x38(%rax),%rax
    810e:	4c 89 fe             	mov    %r15,%rsi
    8111:	e8 00 00 00 00       	callq  8116 <do_work+0x386>
		if((tv.type) && (tmp != tv.ver) && (oldno == tv.ver))
    8116:	84 c0                	test   %al,%al
		tmp = calculate_tarSSD(dc, base);
    8118:	49 8b be 98 02 00 00 	mov    0x298(%r14),%rdi
		if((tv.type) && (tmp != tv.ver) && (oldno == tv.ver))
    811f:	79 c2                	jns    80e3 <do_work+0x353>
    8121:	83 e0 7f             	and    $0x7f,%eax
	tmp = sector_div(lpn, align_size);
    8124:	31 d2                	xor    %edx,%edx
    8126:	89 c6                	mov    %eax,%esi
    8128:	4c 89 f8             	mov    %r15,%rax
    812b:	48 f7 f7             	div    %rdi
		if((tv.type) && (tmp != tv.ver) && (oldno == tv.ver))
    812e:	39 d6                	cmp    %edx,%esi
    8130:	74 b1                	je     80e3 <do_work+0x353>
    8132:	39 b5 48 ff ff ff    	cmp    %esi,-0xb8(%rbp)
    8138:	75 a9                	jne    80e3 <do_work+0x353>
    813a:	4d 89 f7             	mov    %r14,%r15
    813d:	49 89 d9             	mov    %rbx,%r9
    8140:	44 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%r14d
    8147:	4c 8b a5 18 ff ff ff 	mov    -0xe8(%rbp),%r12
    814e:	48 8b 9d 38 ff ff ff 	mov    -0xc8(%rbp),%rbx
			r = handle_write_no_hash_xremap(dc, bio, lbn, final_hash);
    8155:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    8159:	4c 89 ca             	mov    %r9,%rdx
    815c:	4c 89 e6             	mov    %r12,%rsi
    815f:	4c 89 ff             	mov    %r15,%rdi
    8162:	e8 39 e5 ff ff       	callq  66a0 <handle_write_no_hash_xremap>
			if(dc->enable_time_stats)
    8167:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    816e:	00 
			r = handle_write_no_hash_xremap(dc, bio, lbn, final_hash);
    816f:	41 89 c3             	mov    %eax,%r11d
			if(dc->enable_time_stats)
    8172:	74 08                	je     817c <do_work+0x3ec>
				dc->hit_corrupt_fp++;
    8174:	49 83 87 70 02 00 00 	addq   $0x1,0x270(%r15)
    817b:	01 
	if (r < 0)
    817c:	45 85 db             	test   %r11d,%r11d
    817f:	0f 88 c1 04 00 00    	js     8646 <do_work+0x8b6>
	if (!strcmp(dc->backend_str, "xremap")) {
    8185:	48 8b b5 40 ff ff ff 	mov    -0xc0(%rbp),%rsi
    818c:	b9 07 00 00 00       	mov    $0x7,%ecx
    8191:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    8198:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
    819a:	0f 97 c0             	seta   %al
    819d:	1c 00                	sbb    $0x0,%al
    819f:	84 c0                	test   %al,%al
    81a1:	0f 85 ca 06 00 00    	jne    8871 <do_work+0xae1>
		if(dc->gc_needed || dc->inserted_fp >= dc->gc_threhold) {
    81a7:	49 83 bf 20 02 00 00 	cmpq   $0x0,0x220(%r15)
    81ae:	00 
    81af:	75 14                	jne    81c5 <do_work+0x435>
    81b1:	49 8b 87 10 02 00 00 	mov    0x210(%r15),%rax
    81b8:	49 39 87 80 02 00 00 	cmp    %rax,0x280(%r15)
    81bf:	0f 82 c0 06 00 00    	jb     8885 <do_work+0xaf5>
			r = garbage_collect(dc);
    81c5:	4c 89 ff             	mov    %r15,%rdi
    81c8:	e8 53 d4 ff ff       	callq  5620 <garbage_collect>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    81cd:	0f 31                	rdtsc  
    var = ((unsigned long long int) hi << 32) | lo;
    81cf:	48 c1 e2 20          	shl    $0x20,%rdx
    81d3:	89 c0                	mov    %eax,%eax
    81d5:	48 09 d0             	or     %rdx,%rax
	if(!dc->enable_time_stats)
    81d8:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    81df:	00 
    81e0:	74 07                	je     81e9 <do_work+0x459>
		dc->tmp_period_time[period] = var;
    81e2:	49 89 87 e8 02 00 00 	mov    %rax,0x2e8(%r15)
			r = dc->mdops->flush_meta(dc->bmd);
    81e9:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    81f0:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    81f7:	48 8b 40 48          	mov    0x48(%rax),%rax
    81fb:	e8 00 00 00 00       	callq  8200 <do_work+0x470>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8200:	0f 31                	rdtsc  
    var = ((unsigned long long int) hi << 32) | lo;
    8202:	48 c1 e2 20          	shl    $0x20,%rdx
    8206:	89 c0                	mov    %eax,%eax
    8208:	48 09 d0             	or     %rdx,%rax
	if(!dc->enable_time_stats)
    820b:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    8212:	00 
    8213:	74 28                	je     823d <do_work+0x4ad>
		if(dc->tmp_period_time[period]) {
    8215:	49 8b 97 e8 02 00 00 	mov    0x2e8(%r15),%rdx
    821c:	48 85 d2             	test   %rdx,%rdx
    821f:	74 11                	je     8232 <do_work+0x4a2>
			dc->total_period_time[period] += t;
    8221:	49 03 87 40 03 00 00 	add    0x340(%r15),%rax
    8228:	48 29 d0             	sub    %rdx,%rax
    822b:	49 89 87 40 03 00 00 	mov    %rax,0x340(%r15)
		dc->tmp_period_time[period] = 0;
    8232:	49 c7 87 e8 02 00 00 	movq   $0x0,0x2e8(%r15)
    8239:	00 00 00 00 
			DMINFO("garbage_collect is trigged.");
    823d:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    8244:	e8 00 00 00 00       	callq  8249 <do_work+0x4b9>
			dc->writes_after_flush = 0;
    8249:	49 c7 87 f8 03 00 00 	movq   $0x0,0x3f8(%r15)
    8250:	00 00 00 00 
			dc->gc_needed = 0;
    8254:	49 c7 87 20 02 00 00 	movq   $0x0,0x220(%r15)
    825b:	00 00 00 00 
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    825f:	0f 31                	rdtsc  
    var = ((unsigned long long int) hi << 32) | lo;
    8261:	48 c1 e2 20          	shl    $0x20,%rdx
    8265:	89 c0                	mov    %eax,%eax
    8267:	48 09 c2             	or     %rax,%rdx
	if(!dc->enable_time_stats)
    826a:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    8271:	00 
    8272:	0f 84 5f 06 00 00    	je     88d7 <do_work+0xb47>
			return 0;
    8278:	45 31 f6             	xor    %r14d,%r14d
    827b:	e9 e7 03 00 00       	jmpq   8667 <do_work+0x8d7>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8280:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    8282:	48 85 c9             	test   %rcx,%rcx
    8285:	0f 85 1c 02 00 00    	jne    84a7 <do_work+0x717>
		if (!strcmp(dc->backend_str, "xremap")) {
    828b:	49 8d b7 78 03 00 00 	lea    0x378(%r15),%rsi
    8292:	b9 07 00 00 00       	mov    $0x7,%ecx
    8297:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    829e:	48 8b 43 28          	mov    0x28(%rbx),%rax
    82a2:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
    82a4:	41 8b 4f 14          	mov    0x14(%r15),%ecx
    82a8:	41 0f 97 c2          	seta   %r10b
    82ac:	41 80 da 00          	sbb    $0x0,%r10b
	sector_div(lbn, dc->sectors_per_block);
    82b0:	31 d2                	xor    %edx,%edx
		if (!strcmp(dc->backend_str, "xremap")) {
    82b2:	45 0f be f2          	movsbl %r10b,%r14d
	sector_div(lbn, dc->sectors_per_block);
    82b6:	48 f7 f1             	div    %rcx
		if (!strcmp(dc->backend_str, "xremap")) {
    82b9:	45 85 f6             	test   %r14d,%r14d
    82bc:	0f 85 24 02 00 00    	jne    84e6 <do_work+0x756>
	sector_div(lbn, dc->sectors_per_block);
    82c2:	49 89 c4             	mov    %rax,%r12
	ref = dc->mdops->get_refcount(dc->bmd, lbn);
    82c5:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    82cc:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    82d3:	4c 89 e6             	mov    %r12,%rsi
    82d6:	48 8b 40 38          	mov    0x38(%rax),%rax
    82da:	e8 00 00 00 00       	callq  82df <do_work+0x54f>
	if (tv.type == 0 && tv.ver == 0) {
    82df:	84 c0                	test   %al,%al
	ref = dc->mdops->get_refcount(dc->bmd, lbn);
    82e1:	89 c1                	mov    %eax,%ecx
	t = calculate_tarSSD(dc, lbn);
    82e3:	49 8b b7 98 02 00 00 	mov    0x298(%r15),%rsi
	if (tv.type == 0 && tv.ver == 0) {
    82ea:	0f 84 1d 07 00 00    	je     8a0d <do_work+0xc7d>
	} else if (tv.type == 1 && t != tv.ver) {
    82f0:	0f 89 e8 05 00 00    	jns    88de <do_work+0xb4e>
	tmp = sector_div(lpn, align_size);
    82f6:	31 d2                	xor    %edx,%edx
    82f8:	4c 89 e0             	mov    %r12,%rax
    82fb:	83 e1 7f             	and    $0x7f,%ecx
    82fe:	48 f7 f6             	div    %rsi
	} else if (tv.type == 1 && t != tv.ver) {
    8301:	39 ca                	cmp    %ecx,%edx
    8303:	0f 84 d5 05 00 00    	je     88de <do_work+0xb4e>
	if(origin <= target) {
    8309:	0f 8f 42 0b 00 00    	jg     8e51 <do_work+0x10c1>
		lpn += (target - origin);
    830f:	29 d1                	sub    %edx,%ecx
    8311:	48 63 c1             	movslq %ecx,%rax
    8314:	49 01 c4             	add    %rax,%r12
		clone->bi_opf = (clone->bi_opf & (~REQ_OP_MASK)) | REQ_OP_REMOTEREAD | REQ_NOMERGE;
    8317:	8b 43 10             	mov    0x10(%rbx),%eax
	offset = lpn % (dc->remote_len);
    831a:	31 d2                	xor    %edx,%edx
	do_io_remap_device(dc, bio);
    831c:	48 89 de             	mov    %rbx,%rsi
    831f:	4c 89 ff             	mov    %r15,%rdi
		clone->bi_opf = (clone->bi_opf & (~REQ_OP_MASK)) | REQ_OP_REMOTEREAD | REQ_NOMERGE;
    8322:	25 00 bf ff ff       	and    $0xffffbf00,%eax
    8327:	0d 0e 40 00 00       	or     $0x400e,%eax
    832c:	89 43 10             	mov    %eax,0x10(%rbx)
	offset = lpn % (dc->remote_len);
    832f:	4c 89 e0             	mov    %r12,%rax
    8332:	49 f7 b7 90 02 00 00 	divq   0x290(%r15)
    8339:	48 8b 43 28          	mov    0x28(%rbx),%rax
		clone->bi_write_hint = calculate_entry_offset(dc, lbn);
    833d:	66 89 53 18          	mov    %dx,0x18(%rbx)
	offset = sector_div(bio->bi_iter.bi_sector, dc->sectors_per_block);
    8341:	41 8b 4f 14          	mov    0x14(%r15),%ecx
    8345:	31 d2                	xor    %edx,%edx
    8347:	48 f7 f1             	div    %rcx
    834a:	48 89 43 28          	mov    %rax,0x28(%rbx)
	bio->bi_iter.bi_sector = (sector_t)pbn * dc->sectors_per_block + offset;
    834e:	41 8b 47 14          	mov    0x14(%r15),%eax
    8352:	4c 0f af e0          	imul   %rax,%r12
    8356:	48 63 c2             	movslq %edx,%rax
    8359:	49 01 c4             	add    %rax,%r12
    835c:	4c 89 63 28          	mov    %r12,0x28(%rbx)
	do_io_remap_device(dc, bio);
    8360:	e8 eb e2 ff ff       	callq  6650 <do_io_remap_device.isra.10>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8365:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    8367:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    836e:	00 
    836f:	74 3c                	je     83ad <do_work+0x61d>
		if(dc->tmp_period_time[period]) {
    8371:	49 8b 8f b0 02 00 00 	mov    0x2b0(%r15),%rcx
    8378:	48 85 c9             	test   %rcx,%rcx
    837b:	74 1d                	je     839a <do_work+0x60a>
    var = ((unsigned long long int) hi << 32) | lo;
    837d:	89 c0                	mov    %eax,%eax
    837f:	48 c1 e2 20          	shl    $0x20,%rdx
    8383:	48 09 c2             	or     %rax,%rdx
			dc->total_period_time[period] += t;
    8386:	49 8b 87 08 03 00 00 	mov    0x308(%r15),%rax
    838d:	48 29 c8             	sub    %rcx,%rax
    8390:	48 01 d0             	add    %rdx,%rax
    8393:	49 89 87 08 03 00 00 	mov    %rax,0x308(%r15)
			dc->usr_reads_cnt += 1;
    839a:	49 83 87 50 02 00 00 	addq   $0x1,0x250(%r15)
    83a1:	01 
		dc->tmp_period_time[period] = 0;
    83a2:	49 c7 87 b0 02 00 00 	movq   $0x0,0x2b0(%r15)
    83a9:	00 00 00 00 
	if (r < 0) {
    83ad:	45 85 f6             	test   %r14d,%r14d
    83b0:	0f 88 55 02 00 00    	js     860b <do_work+0x87b>
    83b6:	49 8b 8f a0 02 00 00 	mov    0x2a0(%r15),%rcx
    83bd:	e9 85 00 00 00       	jmpq   8447 <do_work+0x6b7>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    83c2:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    83c4:	48 85 c9             	test   %rcx,%rcx
    83c7:	0f 85 ef 00 00 00    	jne    84bc <do_work+0x72c>
		r = dc->mdops->flush_meta(dc->bmd);
    83cd:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    83d4:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    83db:	48 8b 40 48          	mov    0x48(%rax),%rax
    83df:	e8 00 00 00 00       	callq  83e4 <do_work+0x654>
    83e4:	89 c1                	mov    %eax,%ecx
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    83e6:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    83e8:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    83ef:	00 
    83f0:	74 34                	je     8426 <do_work+0x696>
		if(dc->tmp_period_time[period]) {
    83f2:	49 8b b7 e8 02 00 00 	mov    0x2e8(%r15),%rsi
    83f9:	48 85 f6             	test   %rsi,%rsi
    83fc:	74 1d                	je     841b <do_work+0x68b>
    var = ((unsigned long long int) hi << 32) | lo;
    83fe:	89 c0                	mov    %eax,%eax
    8400:	48 c1 e2 20          	shl    $0x20,%rdx
    8404:	48 09 c2             	or     %rax,%rdx
			dc->total_period_time[period] += t;
    8407:	49 8b 87 40 03 00 00 	mov    0x340(%r15),%rax
    840e:	48 29 f0             	sub    %rsi,%rax
    8411:	48 01 d0             	add    %rdx,%rax
    8414:	49 89 87 40 03 00 00 	mov    %rax,0x340(%r15)
		dc->tmp_period_time[period] = 0;
    841b:	49 c7 87 e8 02 00 00 	movq   $0x0,0x2e8(%r15)
    8422:	00 00 00 00 
		if (r == 0)
    8426:	85 c9                	test   %ecx,%ecx
    8428:	75 0b                	jne    8435 <do_work+0x6a5>
			dc->writes_after_flush = 0;
    842a:	49 c7 87 f8 03 00 00 	movq   $0x0,0x3f8(%r15)
    8431:	00 00 00 00 
		do_io_remap_device(dc, bio);
    8435:	48 89 de             	mov    %rbx,%rsi
    8438:	4c 89 ff             	mov    %r15,%rdi
    843b:	e8 10 e2 ff ff       	callq  6650 <do_io_remap_device.isra.10>
    8440:	49 8b 8f a0 02 00 00 	mov    0x2a0(%r15),%rcx
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8447:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    8449:	48 85 c9             	test   %rcx,%rcx
    844c:	74 34                	je     8482 <do_work+0x6f2>
		if(dc->tmp_period_time[period]) {
    844e:	49 8b 8f a8 02 00 00 	mov    0x2a8(%r15),%rcx
    8455:	48 85 c9             	test   %rcx,%rcx
    8458:	74 1d                	je     8477 <do_work+0x6e7>
    var = ((unsigned long long int) hi << 32) | lo;
    845a:	89 c0                	mov    %eax,%eax
    845c:	48 c1 e2 20          	shl    $0x20,%rdx
    8460:	48 09 c2             	or     %rax,%rdx
			dc->total_period_time[period] += t;
    8463:	49 8b 87 00 03 00 00 	mov    0x300(%r15),%rax
    846a:	48 29 c8             	sub    %rcx,%rax
    846d:	48 01 c2             	add    %rax,%rdx
    8470:	49 89 97 00 03 00 00 	mov    %rdx,0x300(%r15)
		dc->tmp_period_time[period] = 0;
    8477:	49 c7 87 a8 02 00 00 	movq   $0x0,0x2a8(%r15)
    847e:	00 00 00 00 
}
    8482:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
    8486:	65 48 33 04 25 28 00 	xor    %gs:0x28,%rax
    848d:	00 00 
    848f:	0f 85 cf 12 00 00    	jne    9764 <do_work+0x19d4>
    8495:	48 81 c4 c0 00 00 00 	add    $0xc0,%rsp
    849c:	5b                   	pop    %rbx
    849d:	41 5c                	pop    %r12
    849f:	41 5d                	pop    %r13
    84a1:	41 5e                	pop    %r14
    84a3:	41 5f                	pop    %r15
    84a5:	5d                   	pop    %rbp
    84a6:	c3                   	retq   
    var = ((unsigned long long int) hi << 32) | lo;
    84a7:	48 c1 e2 20          	shl    $0x20,%rdx
    84ab:	89 c0                	mov    %eax,%eax
    84ad:	48 09 c2             	or     %rax,%rdx
    84b0:	49 89 97 b0 02 00 00 	mov    %rdx,0x2b0(%r15)
    84b7:	e9 cf fd ff ff       	jmpq   828b <do_work+0x4fb>
    84bc:	48 c1 e2 20          	shl    $0x20,%rdx
    84c0:	89 c0                	mov    %eax,%eax
    84c2:	48 09 c2             	or     %rax,%rdx
    84c5:	49 89 97 e8 02 00 00 	mov    %rdx,0x2e8(%r15)
    84cc:	e9 fc fe ff ff       	jmpq   83cd <do_work+0x63d>
    84d1:	48 c1 e2 20          	shl    $0x20,%rdx
    84d5:	89 c0                	mov    %eax,%eax
    84d7:	48 09 c2             	or     %rax,%rdx
    84da:	49 89 97 b8 02 00 00 	mov    %rdx,0x2b8(%r15)
    84e1:	e9 3f f9 ff ff       	jmpq   7e25 <do_work+0x95>
	lbn = bio_lbn(dc, bio);
    84e6:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	r = dc->kvs_lbn_pbn->kvs_lookup(dc->kvs_lbn_pbn, (void *)&lbn,
    84ea:	49 8b bf d8 03 00 00 	mov    0x3d8(%r15),%rdi
    84f1:	4c 8d 45 90          	lea    -0x70(%rbp),%r8
    84f5:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    84f9:	ba 08 00 00 00       	mov    $0x8,%edx
    84fe:	48 8d 75 98          	lea    -0x68(%rbp),%rsi
    8502:	48 8b 47 10          	mov    0x10(%rdi),%rax
    8506:	e8 00 00 00 00       	callq  850b <do_work+0x77b>
	if (r == -ENODATA) {
    850b:	83 f8 c3             	cmp    $0xffffffc3,%eax
	r = dc->kvs_lbn_pbn->kvs_lookup(dc->kvs_lbn_pbn, (void *)&lbn,
    850e:	41 89 c6             	mov    %eax,%r14d
	if (r == -ENODATA) {
    8511:	0f 84 13 05 00 00    	je     8a2a <do_work+0xc9a>
	} else if (r == 0) {
    8517:	85 c0                	test   %eax,%eax
    8519:	0f 85 46 fe ff ff    	jne    8365 <do_work+0x5d5>
		if (!dc->check_corruption) {
    851f:	41 80 bf 58 03 00 00 	cmpb   $0x0,0x358(%r15)
    8526:	00 
    8527:	0f 84 ed 04 00 00    	je     8a1a <do_work+0xc8a>
    852d:	48 8b 3d 00 00 00 00 	mov    0x0(%rip),%rdi        # 8534 <do_work+0x7a4>
    8534:	ba 20 00 00 00       	mov    $0x20,%edx
    8539:	be 00 00 60 00       	mov    $0x600000,%esi
    853e:	e8 00 00 00 00       	callq  8543 <do_work+0x7b3>
		io->dc = dc;
    8543:	4c 89 38             	mov    %r15,(%rax)
    8546:	49 89 c4             	mov    %rax,%r12
		io->pbn = lbnpbn_value.pbn;
    8549:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
		clone = bio_clone_fast(bio, GFP_NOIO, &dc->bs);
    854d:	49 8d 57 40          	lea    0x40(%r15),%rdx
    8551:	be 00 00 60 00       	mov    $0x600000,%esi
		io->base_bio = bio;
    8556:	49 89 5c 24 18       	mov    %rbx,0x18(%r12)
		clone = bio_clone_fast(bio, GFP_NOIO, &dc->bs);
    855b:	48 89 df             	mov    %rbx,%rdi
		io->pbn = lbnpbn_value.pbn;
    855e:	49 89 44 24 08       	mov    %rax,0x8(%r12)
		io->lbn = lbn;
    8563:	48 8b 45 98          	mov    -0x68(%rbp),%rax
    8567:	49 89 44 24 10       	mov    %rax,0x10(%r12)
		clone = bio_clone_fast(bio, GFP_NOIO, &dc->bs);
    856c:	e8 00 00 00 00       	callq  8571 <do_work+0x7e1>
		if (!clone) {
    8571:	48 85 c0             	test   %rax,%rax
		clone = bio_clone_fast(bio, GFP_NOIO, &dc->bs);
    8574:	48 89 c6             	mov    %rax,%rsi
		if (!clone) {
    8577:	0f 84 3e 12 00 00    	je     97bb <do_work+0x1a2b>
		clone->bi_end_io = dedup_check_endio;
    857d:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
    8584:	00 
		clone->bi_private = io;
    8585:	4c 89 60 68          	mov    %r12,0x68(%rax)
	offset = sector_div(bio->bi_iter.bi_sector, dc->sectors_per_block);
    8589:	41 8b 4f 14          	mov    0x14(%r15),%ecx
    858d:	48 8b 46 28          	mov    0x28(%rsi),%rax
    8591:	31 d2                	xor    %edx,%edx
		do_io(dc, clone, lbnpbn_value.pbn);
    8593:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
    8597:	48 f7 f1             	div    %rcx
	offset = sector_div(bio->bi_iter.bi_sector, dc->sectors_per_block);
    859a:	48 89 46 28          	mov    %rax,0x28(%rsi)
	bio->bi_iter.bi_sector = (sector_t)pbn * dc->sectors_per_block + offset;
    859e:	41 8b 47 14          	mov    0x14(%r15),%eax
    85a2:	48 63 d2             	movslq %edx,%rdx
    85a5:	48 0f af c7          	imul   %rdi,%rax
	do_io_remap_device(dc, bio);
    85a9:	4c 89 ff             	mov    %r15,%rdi
	bio->bi_iter.bi_sector = (sector_t)pbn * dc->sectors_per_block + offset;
    85ac:	48 01 d0             	add    %rdx,%rax
    85af:	48 89 46 28          	mov    %rax,0x28(%rsi)
	do_io_remap_device(dc, bio);
    85b3:	e8 98 e0 ff ff       	callq  6650 <do_io_remap_device.isra.10>
    85b8:	e9 a8 fd ff ff       	jmpq   8365 <do_work+0x5d5>
		dc->reads_on_writes++;
    85bd:	49 83 87 e8 01 00 00 	addq   $0x1,0x1e8(%r15)
    85c4:	01 
		new_bio = prepare_bio_on_write(dc, bio);
    85c5:	48 89 de             	mov    %rbx,%rsi
    85c8:	4c 89 ff             	mov    %r15,%rdi
    85cb:	e8 00 00 00 00       	callq  85d0 <do_work+0x840>
		if (!new_bio || IS_ERR(new_bio))
    85d0:	48 85 c0             	test   %rax,%rax
		new_bio = prepare_bio_on_write(dc, bio);
    85d3:	49 89 c4             	mov    %rax,%r12
		if (!new_bio || IS_ERR(new_bio))
    85d6:	0f 84 18 04 00 00    	je     89f4 <do_work+0xc64>
    85dc:	48 3d 00 f0 ff ff    	cmp    $0xfffffffffffff000,%rax
    85e2:	49 8b 8f a0 02 00 00 	mov    0x2a0(%r15),%rcx
    85e9:	0f 86 62 f8 ff ff    	jbe    7e51 <do_work+0xc1>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    85ef:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    85f1:	48 85 c9             	test   %rcx,%rcx
    85f4:	0f 84 0a 04 00 00    	je     8a04 <do_work+0xc74>
    var = ((unsigned long long int) hi << 32) | lo;
    85fa:	48 c1 e2 20          	shl    $0x20,%rdx
    85fe:	89 c0                	mov    %eax,%eax
			return -ENOMEM;
    8600:	41 be f4 ff ff ff    	mov    $0xfffffff4,%r14d
    var = ((unsigned long long int) hi << 32) | lo;
    8606:	48 09 c2             	or     %rax,%rdx
    8609:	eb 5c                	jmp    8667 <do_work+0x8d7>
		switch (r) {
    860b:	41 83 fe f4          	cmp    $0xfffffff4,%r14d
    860f:	0f 84 ef 03 00 00    	je     8a04 <do_work+0xc74>
    8615:	0f 8e 61 01 00 00    	jle    877c <do_work+0x9ec>
    861b:	41 83 fe fb          	cmp    $0xfffffffb,%r14d
    861f:	0f 84 43 02 00 00    	je     8868 <do_work+0xad8>
    8625:	41 83 fe ff          	cmp    $0xffffffff,%r14d
    8629:	0f 84 bc 03 00 00    	je     89eb <do_work+0xc5b>
    862f:	41 83 fe f5          	cmp    $0xfffffff5,%r14d
    8633:	0f 84 d8 02 00 00    	je     8911 <do_work+0xb81>
		bio_endio(bio);
    8639:	48 89 df             	mov    %rbx,%rdi
    863c:	e8 00 00 00 00       	callq  8641 <do_work+0x8b1>
    8641:	e9 70 fd ff ff       	jmpq   83b6 <do_work+0x626>
    8646:	4d 8b 87 a0 02 00 00 	mov    0x2a0(%r15),%r8
    864d:	4c 89 c1             	mov    %r8,%rcx
	if (r < 0)
    8650:	45 89 de             	mov    %r11d,%r14d
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8653:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    8655:	48 85 c9             	test   %rcx,%rcx
    8658:	0f 84 4f fd ff ff    	je     83ad <do_work+0x61d>
    var = ((unsigned long long int) hi << 32) | lo;
    865e:	48 c1 e2 20          	shl    $0x20,%rdx
    8662:	89 c0                	mov    %eax,%eax
    8664:	48 09 c2             	or     %rax,%rdx
		if(dc->tmp_period_time[period]) {
    8667:	49 8b 87 b8 02 00 00 	mov    0x2b8(%r15),%rax
    866e:	48 85 c0             	test   %rax,%rax
    8671:	74 11                	je     8684 <do_work+0x8f4>
			dc->total_period_time[period] += t;
    8673:	49 03 97 10 03 00 00 	add    0x310(%r15),%rdx
    867a:	48 29 c2             	sub    %rax,%rdx
    867d:	49 89 97 10 03 00 00 	mov    %rdx,0x310(%r15)
		dc->tmp_period_time[period] = 0;
    8684:	49 c7 87 b8 02 00 00 	movq   $0x0,0x2b8(%r15)
    868b:	00 00 00 00 
			dc->usr_write_cnt += 1;
    868f:	49 83 87 48 02 00 00 	addq   $0x1,0x248(%r15)
    8696:	01 
    8697:	e9 11 fd ff ff       	jmpq   83ad <do_work+0x61d>
	sector_div(lbn, dc->sectors_per_block);
    869c:	41 8b 4f 14          	mov    0x14(%r15),%ecx
    86a0:	48 8b 43 28          	mov    0x28(%rbx),%rax
    86a4:	31 d2                	xor    %edx,%edx
	DMWARN("Discard request received for LBN :%llu", lbn);
    86a6:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
	sector_div(lbn, dc->sectors_per_block);
    86ad:	48 f7 f1             	div    %rcx
	DMWARN("Discard request received for LBN :%llu", lbn);
    86b0:	48 89 c6             	mov    %rax,%rsi
	lbn = bio_lbn(dc, bio);
    86b3:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	DMWARN("Discard request received for LBN :%llu", lbn);
    86b7:	e8 00 00 00 00       	callq  86bc <do_work+0x92c>
	r = dc->kvs_lbn_pbn->kvs_lookup(dc->kvs_lbn_pbn, (void *)&lbn,
    86bc:	49 8b bf d8 03 00 00 	mov    0x3d8(%r15),%rdi
    86c3:	4c 8d 45 90          	lea    -0x70(%rbp),%r8
    86c7:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    86cb:	ba 08 00 00 00       	mov    $0x8,%edx
    86d0:	48 8d 75 98          	lea    -0x68(%rbp),%rsi
    86d4:	48 8b 47 10          	mov    0x10(%rdi),%rax
    86d8:	e8 00 00 00 00       	callq  86dd <do_work+0x94d>
	if (r == -ENODATA) {
    86dd:	83 f8 c3             	cmp    $0xffffffc3,%eax
    86e0:	0f 84 e8 10 00 00    	je     97ce <do_work+0x1a3e>
	if (r < 0)
    86e6:	85 c0                	test   %eax,%eax
    86e8:	0f 88 c8 fc ff ff    	js     83b6 <do_work+0x626>
	pbn_val = lbnpbn_value.pbn;
    86ee:	4c 8b 65 a0          	mov    -0x60(%rbp),%r12
	if (dc->mdops->get_refcount(dc->bmd, pbn_val) > 1) {
    86f2:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    86f9:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    8700:	48 8b 40 38          	mov    0x38(%rax),%rax
    8704:	4c 89 e6             	mov    %r12,%rsi
    8707:	e8 00 00 00 00       	callq  870c <do_work+0x97c>
    870c:	83 f8 01             	cmp    $0x1,%eax
    870f:	0f 8e 82 00 00 00    	jle    8797 <do_work+0xa07>
		r = dc->kvs_lbn_pbn->kvs_delete(dc->kvs_lbn_pbn,
    8715:	49 8b bf d8 03 00 00 	mov    0x3d8(%r15),%rdi
    871c:	ba 08 00 00 00       	mov    $0x8,%edx
    8721:	48 8d 75 98          	lea    -0x68(%rbp),%rsi
    8725:	48 8b 47 08          	mov    0x8(%rdi),%rax
    8729:	e8 00 00 00 00       	callq  872e <do_work+0x99e>
		if (r < 0) {
    872e:	85 c0                	test   %eax,%eax
    8730:	0f 88 72 11 00 00    	js     98a8 <do_work+0x1b18>
		r = dc->mdops->dec_refcount(dc->bmd, pbn_val);
    8736:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    873d:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    8744:	4c 89 e6             	mov    %r12,%rsi
    8747:	48 8b 40 30          	mov    0x30(%rax),%rax
    874b:	e8 00 00 00 00       	callq  8750 <do_work+0x9c0>
		if (r < 0) {
    8750:	85 c0                	test   %eax,%eax
    8752:	79 3b                	jns    878f <do_work+0x9ff>
			ret = dc->kvs_lbn_pbn->kvs_insert(dc->kvs_lbn_pbn,
    8754:	49 8b bf d8 03 00 00 	mov    0x3d8(%r15),%rdi
    875b:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    8761:	48 8d 4d a0          	lea    -0x60(%rbp),%rcx
    8765:	ba 08 00 00 00       	mov    $0x8,%edx
    876a:	48 8d 75 98          	lea    -0x68(%rbp),%rsi
    876e:	48 8b 47 18          	mov    0x18(%rdi),%rax
    8772:	e8 00 00 00 00       	callq  8777 <do_work+0x9e7>
    8777:	e9 3a fc ff ff       	jmpq   83b6 <do_work+0x626>
		switch (r) {
    877c:	41 83 fe c3          	cmp    $0xffffffc3,%r14d
    8780:	0f 85 d8 00 00 00    	jne    885e <do_work+0xace>
			bio->bi_status = BLK_STS_MEDIUM;
    8786:	c6 43 1a 07          	movb   $0x7,0x1a(%rbx)
    878a:	e9 aa fe ff ff       	jmpq   8639 <do_work+0x8a9>
		dc->physical_block_counter -= 1;
    878f:	49 83 af c0 01 00 00 	subq   $0x1,0x1c0(%r15)
    8796:	01 
	if (dc->mdops->get_refcount(dc->bmd, pbn_val) == 1) {
    8797:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    879e:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    87a5:	4c 89 e6             	mov    %r12,%rsi
    87a8:	48 8b 40 38          	mov    0x38(%rax),%rax
    87ac:	e8 00 00 00 00       	callq  87b1 <do_work+0xa21>
    87b1:	83 f8 01             	cmp    $0x1,%eax
    87b4:	0f 84 60 01 00 00    	je     891a <do_work+0xb8a>
		bio->bi_status = BLK_STS_OK;
    87ba:	c6 43 1a 00          	movb   $0x0,0x1a(%rbx)
		bio_endio(bio);
    87be:	48 89 df             	mov    %rbx,%rdi
    87c1:	e8 00 00 00 00       	callq  87c6 <do_work+0xa36>
    87c6:	e9 eb fb ff ff       	jmpq   83b6 <do_work+0x626>
	if (r == -ENODATA) {
    87cb:	41 83 fb c3          	cmp    $0xffffffc3,%r11d
	dc->gc_needed = 0;
    87cf:	49 c7 87 20 02 00 00 	movq   $0x0,0x220(%r15)
    87d6:	00 00 00 00 
	if (r == -ENODATA) {
    87da:	0f 85 b3 f7 ff ff    	jne    7f93 <do_work+0x203>
		dc->inserted_fp++;
    87e0:	49 83 87 80 02 00 00 	addq   $0x1,0x280(%r15)
    87e7:	01 
		if (!strcmp(dc->backend_str, "xremap"))
    87e8:	48 8b b5 40 ff ff ff 	mov    -0xc0(%rbp),%rsi
    87ef:	b9 07 00 00 00       	mov    $0x7,%ecx
    87f4:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    87fb:	f3 a6                	repz cmpsb %es:(%rdi),%ds:(%rsi)
    87fd:	0f 97 c0             	seta   %al
    8800:	1c 00                	sbb    $0x0,%al
    8802:	84 c0                	test   %al,%al
    8804:	0f 85 30 02 00 00    	jne    8a3a <do_work+0xcaa>
			r = handle_write_no_hash_xremap(dc, bio, lbn, hash);
    880a:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    880e:	4c 89 ca             	mov    %r9,%rdx
    8811:	4c 89 e6             	mov    %r12,%rsi
    8814:	4c 89 ff             	mov    %r15,%rdi
    8817:	e8 84 de ff ff       	callq  66a0 <handle_write_no_hash_xremap>
    881c:	41 89 c3             	mov    %eax,%r11d
    881f:	e9 58 f9 ff ff       	jmpq   817c <do_work+0x3ec>
		r = dc->kvs_hash_pbn->kvs_lookup(dc->kvs_hash_pbn, hash,
    8824:	48 8d 8d 58 ff ff ff 	lea    -0xa8(%rbp),%rcx
    882b:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    882f:	e8 00 00 00 00       	callq  8834 <do_work+0xaa4>
    8834:	41 89 c3             	mov    %eax,%r11d
    8837:	e9 ed f6 ff ff       	jmpq   7f29 <do_work+0x199>
    var = ((unsigned long long int) hi << 32) | lo;
    883c:	89 c0                	mov    %eax,%eax
    883e:	48 c1 e2 20          	shl    $0x20,%rdx
    8842:	48 09 c2             	or     %rax,%rdx
			dc->total_period_time[period] += t;
    8845:	49 8b 87 18 03 00 00 	mov    0x318(%r15),%rax
    884c:	48 29 f0             	sub    %rsi,%rax
    884f:	48 01 d0             	add    %rdx,%rax
    8852:	49 89 87 18 03 00 00 	mov    %rax,0x318(%r15)
    8859:	e9 4e f6 ff ff       	jmpq   7eac <do_work+0x11c>
		switch (r) {
    885e:	41 83 fe ea          	cmp    $0xffffffea,%r14d
    8862:	0f 85 d1 fd ff ff    	jne    8639 <do_work+0x8a9>
			bio->bi_status = BLK_STS_IOERR;
    8868:	c6 43 1a 0a          	movb   $0xa,0x1a(%rbx)
    886c:	e9 c8 fd ff ff       	jmpq   8639 <do_work+0x8a9>
		if(dc->invalid_fp >= dc->gc_threhold) {
    8871:	49 8b 87 10 02 00 00 	mov    0x210(%r15),%rax
    8878:	49 39 87 78 02 00 00 	cmp    %rax,0x278(%r15)
    887f:	0f 83 76 0f 00 00    	jae    97fb <do_work+0x1a6b>
	dc->writes_after_flush++;
    8885:	49 8b 87 f8 03 00 00 	mov    0x3f8(%r15),%rax
	if ((dc->flushrq > 0 && dc->writes_after_flush >= dc->flushrq) ||
    888c:	41 8b 8f f4 03 00 00 	mov    0x3f4(%r15),%ecx
    8893:	49 8b b7 a0 02 00 00 	mov    0x2a0(%r15),%rsi
	dc->writes_after_flush++;
    889a:	48 83 c0 01          	add    $0x1,%rax
	if ((dc->flushrq > 0 && dc->writes_after_flush >= dc->flushrq) ||
    889e:	85 c9                	test   %ecx,%ecx
	dc->writes_after_flush++;
    88a0:	49 89 87 f8 03 00 00 	mov    %rax,0x3f8(%r15)
	if ((dc->flushrq > 0 && dc->writes_after_flush >= dc->flushrq) ||
    88a7:	7e 0c                	jle    88b5 <do_work+0xb25>
    88a9:	48 63 d1             	movslq %ecx,%rdx
    88ac:	48 39 d0             	cmp    %rdx,%rax
    88af:	0f 83 a5 00 00 00    	jae    895a <do_work+0xbca>
    88b5:	41 f7 44 24 10 00 00 	testl  $0x60000,0x10(%r12)
    88bc:	06 00 
    88be:	0f 85 96 00 00 00    	jne    895a <do_work+0xbca>
	} else if(dc->flushrq < 0) {
    88c4:	85 c9                	test   %ecx,%ecx
    88c6:	0f 88 c2 05 00 00    	js     8e8e <do_work+0x10fe>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    88cc:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    88ce:	48 85 f6             	test   %rsi,%rsi
    88d1:	0f 85 87 fd ff ff    	jne    865e <do_work+0x8ce>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    88d7:	0f 31                	rdtsc  
    88d9:	e9 a4 fb ff ff       	jmpq   8482 <do_work+0x6f2>
	offset = sector_div(bio->bi_iter.bi_sector, dc->sectors_per_block);
    88de:	41 8b 4f 14          	mov    0x14(%r15),%ecx
    88e2:	48 8b 43 28          	mov    0x28(%rbx),%rax
    88e6:	31 d2                	xor    %edx,%edx
	do_io_remap_device(dc, bio);
    88e8:	48 89 de             	mov    %rbx,%rsi
    88eb:	4c 89 ff             	mov    %r15,%rdi
    88ee:	48 f7 f1             	div    %rcx
	offset = sector_div(bio->bi_iter.bi_sector, dc->sectors_per_block);
    88f1:	48 89 43 28          	mov    %rax,0x28(%rbx)
	bio->bi_iter.bi_sector = (sector_t)pbn * dc->sectors_per_block + offset;
    88f5:	41 8b 47 14          	mov    0x14(%r15),%eax
    88f9:	48 63 d2             	movslq %edx,%rdx
    88fc:	49 0f af c4          	imul   %r12,%rax
    8900:	48 01 d0             	add    %rdx,%rax
    8903:	48 89 43 28          	mov    %rax,0x28(%rbx)
	do_io_remap_device(dc, bio);
    8907:	e8 44 dd ff ff       	callq  6650 <do_io_remap_device.isra.10>
    890c:	e9 54 fa ff ff       	jmpq   8365 <do_work+0x5d5>
			bio->bi_status = BLK_STS_AGAIN;
    8911:	c6 43 1a 0c          	movb   $0xc,0x1a(%rbx)
    8915:	e9 1f fd ff ff       	jmpq   8639 <do_work+0x8a9>
	offset = sector_div(bio->bi_iter.bi_sector, dc->sectors_per_block);
    891a:	41 8b 4f 14          	mov    0x14(%r15),%ecx
    891e:	48 8b 43 28          	mov    0x28(%rbx),%rax
    8922:	31 d2                	xor    %edx,%edx
	do_io_remap_device(dc, bio);
    8924:	48 89 de             	mov    %rbx,%rsi
    8927:	4c 89 ff             	mov    %r15,%rdi
    892a:	48 f7 f1             	div    %rcx
	offset = sector_div(bio->bi_iter.bi_sector, dc->sectors_per_block);
    892d:	48 89 43 28          	mov    %rax,0x28(%rbx)
	bio->bi_iter.bi_sector = (sector_t)pbn * dc->sectors_per_block + offset;
    8931:	41 8b 47 14          	mov    0x14(%r15),%eax
    8935:	4c 0f af e0          	imul   %rax,%r12
    8939:	48 63 c2             	movslq %edx,%rax
    893c:	49 01 c4             	add    %rax,%r12
    893f:	4c 89 63 28          	mov    %r12,0x28(%rbx)
	do_io_remap_device(dc, bio);
    8943:	e8 08 dd ff ff       	callq  6650 <do_io_remap_device.isra.10>
    8948:	e9 69 fa ff ff       	jmpq   83b6 <do_work+0x626>
			dc->hit_none_fp++;
    894d:	49 83 87 58 02 00 00 	addq   $0x1,0x258(%r15)
    8954:	01 
    8955:	e9 86 fe ff ff       	jmpq   87e0 <do_work+0xa50>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    895a:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    895c:	48 85 f6             	test   %rsi,%rsi
    895f:	74 10                	je     8971 <do_work+0xbe1>
    var = ((unsigned long long int) hi << 32) | lo;
    8961:	48 c1 e2 20          	shl    $0x20,%rdx
    8965:	89 c0                	mov    %eax,%eax
    8967:	48 09 c2             	or     %rax,%rdx
    896a:	49 89 97 e8 02 00 00 	mov    %rdx,0x2e8(%r15)
		r = dc->mdops->flush_meta(dc->bmd);
    8971:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    8978:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    897f:	48 8b 40 48          	mov    0x48(%rax),%rax
    8983:	e8 00 00 00 00       	callq  8988 <do_work+0xbf8>
    8988:	89 c6                	mov    %eax,%esi
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    898a:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    898c:	49 8b 8f a0 02 00 00 	mov    0x2a0(%r15),%rcx
    8993:	48 85 c9             	test   %rcx,%rcx
    8996:	74 34                	je     89cc <do_work+0xc3c>
		if(dc->tmp_period_time[period]) {
    8998:	49 8b bf e8 02 00 00 	mov    0x2e8(%r15),%rdi
    899f:	48 85 ff             	test   %rdi,%rdi
    89a2:	74 1d                	je     89c1 <do_work+0xc31>
    var = ((unsigned long long int) hi << 32) | lo;
    89a4:	89 c0                	mov    %eax,%eax
    89a6:	48 c1 e2 20          	shl    $0x20,%rdx
    89aa:	48 09 c2             	or     %rax,%rdx
			dc->total_period_time[period] += t;
    89ad:	49 8b 87 40 03 00 00 	mov    0x340(%r15),%rax
    89b4:	48 29 f8             	sub    %rdi,%rax
    89b7:	48 01 d0             	add    %rdx,%rax
    89ba:	49 89 87 40 03 00 00 	mov    %rax,0x340(%r15)
		dc->tmp_period_time[period] = 0;
    89c1:	49 c7 87 e8 02 00 00 	movq   $0x0,0x2e8(%r15)
    89c8:	00 00 00 00 
		if (r < 0)
    89cc:	85 f6                	test   %esi,%esi
    89ce:	78 52                	js     8a22 <do_work+0xc92>
		dc->writes_after_flush = 0;
    89d0:	49 c7 87 f8 03 00 00 	movq   $0x0,0x3f8(%r15)
    89d7:	00 00 00 00 
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    89db:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    89dd:	48 85 c9             	test   %rcx,%rcx
    89e0:	0f 85 78 fc ff ff    	jne    865e <do_work+0x8ce>
    89e6:	e9 ec fe ff ff       	jmpq   88d7 <do_work+0xb47>
			bio->bi_status = BLK_STS_PROTECTION;
    89eb:	c6 43 1a 08          	movb   $0x8,0x1a(%rbx)
    89ef:	e9 45 fc ff ff       	jmpq   8639 <do_work+0x8a9>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    89f4:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    89f6:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    89fd:	00 
    89fe:	0f 85 f6 fb ff ff    	jne    85fa <do_work+0x86a>
			bio->bi_status = BLK_STS_RESOURCE;
    8a04:	c6 43 1a 09          	movb   $0x9,0x1a(%rbx)
    8a08:	e9 2c fc ff ff       	jmpq   8639 <do_work+0x8a9>
		bio_zero_endio(bio);
    8a0d:	48 89 df             	mov    %rbx,%rdi
    8a10:	e8 6b d1 ff ff       	callq  5b80 <bio_zero_endio>
    8a15:	e9 4b f9 ff ff       	jmpq   8365 <do_work+0x5d5>
			clone = bio;
    8a1a:	48 89 de             	mov    %rbx,%rsi
    8a1d:	e9 67 fb ff ff       	jmpq   8589 <do_work+0x7f9>
			if (r < 0)
    8a22:	41 89 f6             	mov    %esi,%r14d
    8a25:	e9 29 fc ff ff       	jmpq   8653 <do_work+0x8c3>
		bio_zero_endio(bio);
    8a2a:	48 89 df             	mov    %rbx,%rdi
	r = 0;
    8a2d:	45 31 f6             	xor    %r14d,%r14d
		bio_zero_endio(bio);
    8a30:	e8 4b d1 ff ff       	callq  5b80 <bio_zero_endio>
    8a35:	e9 2b f9 ff ff       	jmpq   8365 <do_work+0x5d5>
    8a3a:	4c 89 8d 60 ff ff ff 	mov    %r9,-0xa0(%rbp)
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8a41:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    8a43:	4d 85 c0             	test   %r8,%r8
    8a46:	74 10                	je     8a58 <do_work+0xcc8>
    var = ((unsigned long long int) hi << 32) | lo;
    8a48:	48 c1 e2 20          	shl    $0x20,%rdx
    8a4c:	89 c0                	mov    %eax,%eax
    8a4e:	48 09 c2             	or     %rax,%rdx
    8a51:	49 89 97 d8 02 00 00 	mov    %rdx,0x2d8(%r15)
	r = dc->kvs_lbn_pbn->kvs_lookup(dc->kvs_lbn_pbn, (void *)&lbn,
    8a58:	49 8b bf d8 03 00 00 	mov    0x3d8(%r15),%rdi
    8a5f:	4c 8d 45 80          	lea    -0x80(%rbp),%r8
    8a63:	48 8d 4d 88          	lea    -0x78(%rbp),%rcx
    8a67:	ba 08 00 00 00       	mov    $0x8,%edx
    8a6c:	48 8d b5 60 ff ff ff 	lea    -0xa0(%rbp),%rsi
    8a73:	48 8b 47 10          	mov    0x10(%rdi),%rax
    8a77:	e8 00 00 00 00       	callq  8a7c <do_work+0xcec>
    8a7c:	41 89 c3             	mov    %eax,%r11d
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8a7f:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    8a81:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    8a88:	00 
    8a89:	74 34                	je     8abf <do_work+0xd2f>
		if(dc->tmp_period_time[period]) {
    8a8b:	49 8b 8f d8 02 00 00 	mov    0x2d8(%r15),%rcx
    8a92:	48 85 c9             	test   %rcx,%rcx
    8a95:	74 1d                	je     8ab4 <do_work+0xd24>
    var = ((unsigned long long int) hi << 32) | lo;
    8a97:	89 c0                	mov    %eax,%eax
    8a99:	48 c1 e2 20          	shl    $0x20,%rdx
    8a9d:	48 09 c2             	or     %rax,%rdx
			dc->total_period_time[period] += t;
    8aa0:	49 8b 87 30 03 00 00 	mov    0x330(%r15),%rax
    8aa7:	48 29 c8             	sub    %rcx,%rax
    8aaa:	48 01 d0             	add    %rdx,%rax
    8aad:	49 89 87 30 03 00 00 	mov    %rax,0x330(%r15)
		dc->tmp_period_time[period] = 0;
    8ab4:	49 c7 87 d8 02 00 00 	movq   $0x0,0x2d8(%r15)
    8abb:	00 00 00 00 
	if (r == -ENODATA) {
    8abf:	41 83 fb c3          	cmp    $0xffffffc3,%r11d
    8ac3:	0f 84 14 06 00 00    	je     90dd <do_work+0x134d>
	} else if (r == 0) {
    8ac9:	45 85 db             	test   %r11d,%r11d
    8acc:	0f 85 aa f6 ff ff    	jne    817c <do_work+0x3ec>
		r = __handle_has_lbn_pbn(dc, bio, lbn, hash, lbnpbn_value.pbn);
    8ad2:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
	r = alloc_pbnblk_and_insert_lbn_pbn(dc, &pbn_new, bio, lbn);
    8ad9:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
    8add:	4c 89 e2             	mov    %r12,%rdx
    8ae0:	4c 89 ff             	mov    %r15,%rdi
		r = __handle_has_lbn_pbn(dc, bio, lbn, hash, lbnpbn_value.pbn);
    8ae3:	4c 8b 6d 88          	mov    -0x78(%rbp),%r13
    8ae7:	48 89 8d 78 ff ff ff 	mov    %rcx,-0x88(%rbp)
	r = alloc_pbnblk_and_insert_lbn_pbn(dc, &pbn_new, bio, lbn);
    8aee:	e8 8d f0 ff ff       	callq  7b80 <alloc_pbnblk_and_insert_lbn_pbn>
	if (r < 0)
    8af3:	85 c0                	test   %eax,%eax
	r = alloc_pbnblk_and_insert_lbn_pbn(dc, &pbn_new, bio, lbn);
    8af5:	41 89 c3             	mov    %eax,%r11d
	if (r < 0)
    8af8:	0f 88 fa 00 00 00    	js     8bf8 <do_work+0xe68>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8afe:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    8b00:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    8b07:	00 
    8b08:	74 10                	je     8b1a <do_work+0xd8a>
    var = ((unsigned long long int) hi << 32) | lo;
    8b0a:	48 c1 e2 20          	shl    $0x20,%rdx
    8b0e:	89 c0                	mov    %eax,%eax
    8b10:	48 09 d0             	or     %rdx,%rax
    8b13:	49 89 87 d0 02 00 00 	mov    %rax,0x2d0(%r15)
	hashpbn_value.pbn = pbn_new;
    8b1a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
	r = dc->kvs_hash_pbn->kvs_insert(dc->kvs_hash_pbn, (void *)hash,
    8b1e:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    8b24:	48 8d 4d 98          	lea    -0x68(%rbp),%rcx
    8b28:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
	hashpbn_value.pbn = pbn_new;
    8b2c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	r = dc->kvs_hash_pbn->kvs_insert(dc->kvs_hash_pbn, (void *)hash,
    8b30:	49 8b bf c8 03 00 00 	mov    0x3c8(%r15),%rdi
    8b37:	41 8b 97 f0 03 00 00 	mov    0x3f0(%r15),%edx
    8b3e:	48 8b 47 18          	mov    0x18(%rdi),%rax
    8b42:	e8 00 00 00 00       	callq  8b47 <do_work+0xdb7>
    8b47:	41 89 c3             	mov    %eax,%r11d
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8b4a:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    8b4c:	49 8b 8f a0 02 00 00 	mov    0x2a0(%r15),%rcx
    8b53:	48 85 c9             	test   %rcx,%rcx
    8b56:	74 34                	je     8b8c <do_work+0xdfc>
		if(dc->tmp_period_time[period]) {
    8b58:	49 8b b7 d0 02 00 00 	mov    0x2d0(%r15),%rsi
    8b5f:	48 85 f6             	test   %rsi,%rsi
    8b62:	74 1d                	je     8b81 <do_work+0xdf1>
    var = ((unsigned long long int) hi << 32) | lo;
    8b64:	48 c1 e2 20          	shl    $0x20,%rdx
    8b68:	89 c0                	mov    %eax,%eax
    8b6a:	48 09 d0             	or     %rdx,%rax
			dc->total_period_time[period] += t;
    8b6d:	49 8b 97 28 03 00 00 	mov    0x328(%r15),%rdx
    8b74:	48 29 f2             	sub    %rsi,%rdx
    8b77:	48 01 d0             	add    %rdx,%rax
    8b7a:	49 89 87 28 03 00 00 	mov    %rax,0x328(%r15)
		dc->tmp_period_time[period] = 0;
    8b81:	49 c7 87 d0 02 00 00 	movq   $0x0,0x2d0(%r15)
    8b88:	00 00 00 00 
	if (r < 0)
    8b8c:	45 85 db             	test   %r11d,%r11d
    8b8f:	0f 89 8b 09 00 00    	jns    9520 <do_work+0x1790>
	ret = dc->kvs_lbn_pbn->kvs_delete(dc->kvs_lbn_pbn, (void *)&lbn,
    8b95:	49 8b bf d8 03 00 00 	mov    0x3d8(%r15),%rdi
    8b9c:	44 89 9d 48 ff ff ff 	mov    %r11d,-0xb8(%rbp)
    8ba3:	ba 08 00 00 00       	mov    $0x8,%edx
    8ba8:	48 8d b5 78 ff ff ff 	lea    -0x88(%rbp),%rsi
    8baf:	48 8b 47 08          	mov    0x8(%rdi),%rax
    8bb3:	e8 00 00 00 00       	callq  8bb8 <do_work+0xe28>
	if (ret < 0)
    8bb8:	85 c0                	test   %eax,%eax
    8bba:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
    8bc1:	0f 88 f5 0c 00 00    	js     98bc <do_work+0x1b2c>
	ret = dc->mdops->dec_refcount(dc->bmd, pbn_new);
    8bc7:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    8bce:	44 89 9d 48 ff ff ff 	mov    %r11d,-0xb8(%rbp)
    8bd5:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    8bdc:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    8be0:	48 8b 40 30          	mov    0x30(%rax),%rax
    8be4:	e8 00 00 00 00       	callq  8be9 <do_work+0xe59>
	if (ret < 0)
    8be9:	85 c0                	test   %eax,%eax
    8beb:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
    8bf2:	0f 88 dc 0c 00 00    	js     98d4 <do_work+0x1b44>
	if (r == 0 && dc->enable_time_stats)
    8bf8:	45 85 db             	test   %r11d,%r11d
    8bfb:	0f 85 7b f5 ff ff    	jne    817c <do_work+0x3ec>
    8c01:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    8c08:	00 
    8c09:	0f 84 76 f5 ff ff    	je     8185 <do_work+0x3f5>
		dc->uniqwrites++;
    8c0f:	49 83 87 e0 01 00 00 	addq   $0x1,0x1e0(%r15)
    8c16:	01 
    8c17:	e9 69 f5 ff ff       	jmpq   8185 <do_work+0x3f5>
    8c1c:	4c 89 8d 70 ff ff ff 	mov    %r9,-0x90(%rbp)
    8c23:	4c 8b ad 58 ff ff ff 	mov    -0xa8(%rbp),%r13
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8c2a:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    8c2c:	4d 85 c0             	test   %r8,%r8
    8c2f:	74 10                	je     8c41 <do_work+0xeb1>
    var = ((unsigned long long int) hi << 32) | lo;
    8c31:	48 c1 e2 20          	shl    $0x20,%rdx
    8c35:	89 c0                	mov    %eax,%eax
    8c37:	48 09 c2             	or     %rax,%rdx
    8c3a:	49 89 97 d8 02 00 00 	mov    %rdx,0x2d8(%r15)
	r = dc->kvs_lbn_pbn->kvs_lookup(dc->kvs_lbn_pbn, (void *)&lbn,
    8c41:	49 8b bf d8 03 00 00 	mov    0x3d8(%r15),%rdi
    8c48:	4c 8d 85 68 ff ff ff 	lea    -0x98(%rbp),%r8
    8c4f:	48 8d 8d 78 ff ff ff 	lea    -0x88(%rbp),%rcx
    8c56:	ba 08 00 00 00       	mov    $0x8,%edx
    8c5b:	48 8d b5 70 ff ff ff 	lea    -0x90(%rbp),%rsi
    8c62:	48 8b 47 10          	mov    0x10(%rdi),%rax
    8c66:	e8 00 00 00 00       	callq  8c6b <do_work+0xedb>
    8c6b:	41 89 c3             	mov    %eax,%r11d
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8c6e:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    8c70:	4d 8b 87 a0 02 00 00 	mov    0x2a0(%r15),%r8
    8c77:	4d 85 c0             	test   %r8,%r8
    8c7a:	74 34                	je     8cb0 <do_work+0xf20>
		if(dc->tmp_period_time[period]) {
    8c7c:	49 8b 8f d8 02 00 00 	mov    0x2d8(%r15),%rcx
    8c83:	48 85 c9             	test   %rcx,%rcx
    8c86:	74 1d                	je     8ca5 <do_work+0xf15>
    var = ((unsigned long long int) hi << 32) | lo;
    8c88:	89 c0                	mov    %eax,%eax
    8c8a:	48 c1 e2 20          	shl    $0x20,%rdx
    8c8e:	48 09 c2             	or     %rax,%rdx
			dc->total_period_time[period] += t;
    8c91:	49 8b 87 30 03 00 00 	mov    0x330(%r15),%rax
    8c98:	48 29 c8             	sub    %rcx,%rax
    8c9b:	48 01 d0             	add    %rdx,%rax
    8c9e:	49 89 87 30 03 00 00 	mov    %rax,0x330(%r15)
		dc->tmp_period_time[period] = 0;
    8ca5:	49 c7 87 d8 02 00 00 	movq   $0x0,0x2d8(%r15)
    8cac:	00 00 00 00 
	if (r == -ENODATA) {
    8cb0:	41 83 fb c3          	cmp    $0xffffffc3,%r11d
    8cb4:	0f 84 2c 05 00 00    	je     91e6 <do_work+0x1456>
	} else if (r == 0) {
    8cba:	45 85 db             	test   %r11d,%r11d
    8cbd:	0f 85 b9 f4 ff ff    	jne    817c <do_work+0x3ec>
    8cc3:	4c 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%r9
    8cca:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
	if (pbn_this == pbn_old)
    8cd1:	4d 39 e9             	cmp    %r13,%r9
    8cd4:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    8cd8:	4c 89 4d 90          	mov    %r9,-0x70(%rbp)
    8cdc:	0f 84 5d 07 00 00    	je     943f <do_work+0x16af>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8ce2:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    8ce4:	4d 85 c0             	test   %r8,%r8
    8ce7:	74 10                	je     8cf9 <do_work+0xf69>
    var = ((unsigned long long int) hi << 32) | lo;
    8ce9:	48 c1 e2 20          	shl    $0x20,%rdx
    8ced:	89 c0                	mov    %eax,%eax
    8cef:	48 09 d0             	or     %rdx,%rax
    8cf2:	49 89 87 e0 02 00 00 	mov    %rax,0x2e0(%r15)
	r = dc->mdops->inc_refcount(dc->bmd, pbn_this);
    8cf9:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    8d00:	4c 89 8d 48 ff ff ff 	mov    %r9,-0xb8(%rbp)
    8d07:	4c 89 ee             	mov    %r13,%rsi
    8d0a:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    8d11:	48 8b 40 28          	mov    0x28(%rax),%rax
    8d15:	e8 00 00 00 00       	callq  8d1a <do_work+0xf8a>
    8d1a:	41 89 c3             	mov    %eax,%r11d
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8d1d:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    8d1f:	4d 8b 87 a0 02 00 00 	mov    0x2a0(%r15),%r8
    8d26:	4c 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%r9
    8d2d:	4d 85 c0             	test   %r8,%r8
    8d30:	74 34                	je     8d66 <do_work+0xfd6>
		if(dc->tmp_period_time[period]) {
    8d32:	49 8b 8f e0 02 00 00 	mov    0x2e0(%r15),%rcx
    8d39:	48 85 c9             	test   %rcx,%rcx
    8d3c:	74 1d                	je     8d5b <do_work+0xfcb>
    var = ((unsigned long long int) hi << 32) | lo;
    8d3e:	48 c1 e2 20          	shl    $0x20,%rdx
    8d42:	89 c0                	mov    %eax,%eax
    8d44:	48 09 d0             	or     %rdx,%rax
			dc->total_period_time[period] += t;
    8d47:	49 8b 97 38 03 00 00 	mov    0x338(%r15),%rdx
    8d4e:	48 29 ca             	sub    %rcx,%rdx
    8d51:	48 01 d0             	add    %rdx,%rax
    8d54:	49 89 87 38 03 00 00 	mov    %rax,0x338(%r15)
		dc->tmp_period_time[period] = 0;
    8d5b:	49 c7 87 e0 02 00 00 	movq   $0x0,0x2e0(%r15)
    8d62:	00 00 00 00 
	if (r < 0)
    8d66:	45 85 db             	test   %r11d,%r11d
    8d69:	0f 88 de f8 ff ff    	js     864d <do_work+0x8bd>
	this_lbnpbn_value.pbn = pbn_this;
    8d6f:	4c 89 6d 98          	mov    %r13,-0x68(%rbp)
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8d73:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    8d75:	4d 85 c0             	test   %r8,%r8
    8d78:	74 10                	je     8d8a <do_work+0xffa>
    var = ((unsigned long long int) hi << 32) | lo;
    8d7a:	48 c1 e2 20          	shl    $0x20,%rdx
    8d7e:	89 c0                	mov    %eax,%eax
    8d80:	48 09 d0             	or     %rdx,%rax
    8d83:	49 89 87 d8 02 00 00 	mov    %rax,0x2d8(%r15)
	r = dc->kvs_lbn_pbn->kvs_insert(dc->kvs_lbn_pbn, (void *)&lbn,
    8d8a:	49 8b bf d8 03 00 00 	mov    0x3d8(%r15),%rdi
    8d91:	4c 89 8d 48 ff ff ff 	mov    %r9,-0xb8(%rbp)
    8d98:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    8d9e:	48 8d 4d 98          	lea    -0x68(%rbp),%rcx
    8da2:	ba 08 00 00 00       	mov    $0x8,%edx
    8da7:	48 8d 75 88          	lea    -0x78(%rbp),%rsi
    8dab:	48 8b 47 18          	mov    0x18(%rdi),%rax
    8daf:	e8 00 00 00 00       	callq  8db4 <do_work+0x1024>
    8db4:	41 89 c3             	mov    %eax,%r11d
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8db7:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    8db9:	49 8b 8f a0 02 00 00 	mov    0x2a0(%r15),%rcx
    8dc0:	4c 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%r9
    8dc7:	48 85 c9             	test   %rcx,%rcx
    8dca:	74 34                	je     8e00 <do_work+0x1070>
		if(dc->tmp_period_time[period]) {
    8dcc:	49 8b b7 d8 02 00 00 	mov    0x2d8(%r15),%rsi
    8dd3:	48 85 f6             	test   %rsi,%rsi
    8dd6:	74 1d                	je     8df5 <do_work+0x1065>
    var = ((unsigned long long int) hi << 32) | lo;
    8dd8:	48 c1 e2 20          	shl    $0x20,%rdx
    8ddc:	89 c0                	mov    %eax,%eax
    8dde:	48 09 d0             	or     %rdx,%rax
			dc->total_period_time[period] += t;
    8de1:	49 8b 97 30 03 00 00 	mov    0x330(%r15),%rdx
    8de8:	48 29 f2             	sub    %rsi,%rdx
    8deb:	48 01 d0             	add    %rdx,%rax
    8dee:	49 89 87 30 03 00 00 	mov    %rax,0x330(%r15)
		dc->tmp_period_time[period] = 0;
    8df5:	49 c7 87 d8 02 00 00 	movq   $0x0,0x2d8(%r15)
    8dfc:	00 00 00 00 
	if (r < 0)
    8e00:	45 85 db             	test   %r11d,%r11d
    8e03:	0f 89 72 05 00 00    	jns    937b <do_work+0x15eb>
    8e09:	44 89 9d 48 ff ff ff 	mov    %r11d,-0xb8(%rbp)
	ret = dc->mdops->dec_refcount(dc->bmd, pbn_this);
    8e10:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    8e17:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    8e1e:	4c 89 ee             	mov    %r13,%rsi
    8e21:	48 8b 40 30          	mov    0x30(%rax),%rax
    8e25:	e8 00 00 00 00       	callq  8e2a <do_work+0x109a>
	if (ret < 0)
    8e2a:	85 c0                	test   %eax,%eax
    8e2c:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
    8e33:	0f 89 43 f3 ff ff    	jns    817c <do_work+0x3ec>
		DMERR("Error in decrementing previously incremented refcount.");
    8e39:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    8e40:	e8 00 00 00 00       	callq  8e45 <do_work+0x10b5>
    8e45:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
    8e4c:	e9 2b f3 ff ff       	jmpq   817c <do_work+0x3ec>
		lpn -= (origin - target);
    8e51:	29 ca                	sub    %ecx,%edx
    8e53:	48 63 c2             	movslq %edx,%rax
    8e56:	49 29 c4             	sub    %rax,%r12
    8e59:	e9 b9 f4 ff ff       	jmpq   8317 <do_work+0x587>
		r = handle_write_no_hash_xremap(dc, bio, lbn, final_hash);
    8e5e:	48 8d 4d b0          	lea    -0x50(%rbp),%rcx
    8e62:	4c 89 ca             	mov    %r9,%rdx
    8e65:	4c 89 e6             	mov    %r12,%rsi
    8e68:	4c 89 ff             	mov    %r15,%rdi
    8e6b:	e8 30 d8 ff ff       	callq  66a0 <handle_write_no_hash_xremap>
		if(dc->enable_time_stats)
    8e70:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    8e77:	00 
		r = handle_write_no_hash_xremap(dc, bio, lbn, final_hash);
    8e78:	41 89 c3             	mov    %eax,%r11d
		if(dc->enable_time_stats)
    8e7b:	0f 84 fb f2 ff ff    	je     817c <do_work+0x3ec>
			dc->hit_wrong_fp++;
    8e81:	49 83 87 68 02 00 00 	addq   $0x1,0x268(%r15)
    8e88:	01 
    8e89:	e9 ee f2 ff ff       	jmpq   817c <do_work+0x3ec>
    asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8e8e:	0f 31                	rdtsc  
    var = ((unsigned long long int) hi << 32) | lo;
    8e90:	48 c1 e2 20          	shl    $0x20,%rdx
    8e94:	89 c0                	mov    %eax,%eax
		x = (t - dc->time_last_flush) / 1900000;
    8e96:	48 bf 7d e5 4a 2b a9 	movabs $0x11a904a92b4ae57d,%rdi
    8e9d:	04 a9 11 
    var = ((unsigned long long int) hi << 32) | lo;
    8ea0:	48 09 c2             	or     %rax,%rdx
		int flushrq = - dc->flushrq;
    8ea3:	f7 d9                	neg    %ecx
    var = ((unsigned long long int) hi << 32) | lo;
    8ea5:	49 89 d4             	mov    %rdx,%r12
		x = (t - dc->time_last_flush) / 1900000;
    8ea8:	49 2b 97 00 04 00 00 	sub    0x400(%r15),%rdx
    8eaf:	48 89 d0             	mov    %rdx,%rax
    8eb2:	48 f7 e7             	mul    %rdi
		if(x >= flushrq) {
    8eb5:	48 63 c1             	movslq %ecx,%rax
		x = (t - dc->time_last_flush) / 1900000;
    8eb8:	48 c1 ea 11          	shr    $0x11,%rdx
		if(x >= flushrq) {
    8ebc:	48 39 c2             	cmp    %rax,%rdx
    8ebf:	0f 82 07 fa ff ff    	jb     88cc <do_work+0xb3c>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8ec5:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    8ec7:	48 85 f6             	test   %rsi,%rsi
    8eca:	74 10                	je     8edc <do_work+0x114c>
    var = ((unsigned long long int) hi << 32) | lo;
    8ecc:	48 c1 e2 20          	shl    $0x20,%rdx
    8ed0:	89 c0                	mov    %eax,%eax
    8ed2:	48 09 c2             	or     %rax,%rdx
    8ed5:	49 89 97 e8 02 00 00 	mov    %rdx,0x2e8(%r15)
			r = dc->mdops->flush_meta(dc->bmd);
    8edc:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    8ee3:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    8eea:	48 8b 40 48          	mov    0x48(%rax),%rax
    8eee:	e8 00 00 00 00       	callq  8ef3 <do_work+0x1163>
    8ef3:	89 c6                	mov    %eax,%esi
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8ef5:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    8ef7:	49 8b 8f a0 02 00 00 	mov    0x2a0(%r15),%rcx
    8efe:	48 85 c9             	test   %rcx,%rcx
    8f01:	74 34                	je     8f37 <do_work+0x11a7>
		if(dc->tmp_period_time[period]) {
    8f03:	49 8b bf e8 02 00 00 	mov    0x2e8(%r15),%rdi
    8f0a:	48 85 ff             	test   %rdi,%rdi
    8f0d:	74 1d                	je     8f2c <do_work+0x119c>
    var = ((unsigned long long int) hi << 32) | lo;
    8f0f:	48 c1 e2 20          	shl    $0x20,%rdx
    8f13:	89 c0                	mov    %eax,%eax
    8f15:	48 09 d0             	or     %rdx,%rax
			dc->total_period_time[period] += t;
    8f18:	49 8b 97 40 03 00 00 	mov    0x340(%r15),%rdx
    8f1f:	48 29 fa             	sub    %rdi,%rdx
    8f22:	48 01 d0             	add    %rdx,%rax
    8f25:	49 89 87 40 03 00 00 	mov    %rax,0x340(%r15)
		dc->tmp_period_time[period] = 0;
    8f2c:	49 c7 87 e8 02 00 00 	movq   $0x0,0x2e8(%r15)
    8f33:	00 00 00 00 
			if (r < 0)
    8f37:	85 f6                	test   %esi,%esi
    8f39:	0f 88 e3 fa ff ff    	js     8a22 <do_work+0xc92>
			dc->writes_after_flush = 0;
    8f3f:	49 c7 87 f8 03 00 00 	movq   $0x0,0x3f8(%r15)
    8f46:	00 00 00 00 
			dc->time_last_flush = t;
    8f4a:	4d 89 a7 00 04 00 00 	mov    %r12,0x400(%r15)
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8f51:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    8f53:	48 85 c9             	test   %rcx,%rcx
    8f56:	0f 85 02 f7 ff ff    	jne    865e <do_work+0x8ce>
    8f5c:	e9 76 f9 ff ff       	jmpq   88d7 <do_work+0xb47>
    8f61:	4d 89 f7             	mov    %r14,%r15
    8f64:	49 89 d9             	mov    %rbx,%r9
    8f67:	44 8b b5 20 ff ff ff 	mov    -0xe0(%rbp),%r14d
    8f6e:	4c 8b a5 18 ff ff ff 	mov    -0xe8(%rbp),%r12
    8f75:	48 8b 9d 38 ff ff ff 	mov    -0xc8(%rbp),%rbx
		val = (cur_tv.type << TV_BIT) | cur_tv.ver;
    8f7c:	8b 95 48 ff ff ff    	mov    -0xb8(%rbp),%edx
		r = dc->mdops->set_refcount(dc->bmd, lbn, val);
    8f82:	4c 89 ce             	mov    %r9,%rsi
    8f85:	4c 89 8d 38 ff ff ff 	mov    %r9,-0xc8(%rbp)
    8f8c:	48 8b 40 40          	mov    0x40(%rax),%rax
		val = (cur_tv.type << TV_BIT) | cur_tv.ver;
    8f90:	80 ca 80             	or     $0x80,%dl
		r = dc->mdops->set_refcount(dc->bmd, lbn, val);
    8f93:	e8 00 00 00 00       	callq  8f98 <do_work+0x1208>
	tmp = sector_div(lpn, align_size);
    8f98:	4c 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%r9
		r = dc->mdops->set_refcount(dc->bmd, lbn, val);
    8f9f:	41 89 c3             	mov    %eax,%r11d
	tmp = sector_div(lpn, align_size);
    8fa2:	31 d2                	xor    %edx,%edx
    8fa4:	4c 89 c8             	mov    %r9,%rax
    8fa7:	49 f7 b7 98 02 00 00 	divq   0x298(%r15)
    8fae:	49 89 d5             	mov    %rdx,%r13
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    8fb1:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    8fb3:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    8fba:	00 
    8fbb:	74 10                	je     8fcd <do_work+0x123d>
    var = ((unsigned long long int) hi << 32) | lo;
    8fbd:	48 c1 e2 20          	shl    $0x20,%rdx
    8fc1:	89 c0                	mov    %eax,%eax
    8fc3:	48 09 c2             	or     %rax,%rdx
    8fc6:	49 89 97 f0 02 00 00 	mov    %rdx,0x2f0(%r15)
		if(lbn_tv.type == 0) { //the lbn writed an unique data
    8fcd:	0f b6 85 28 ff ff ff 	movzbl -0xd8(%rbp),%eax
    8fd4:	84 c0                	test   %al,%al
    8fd6:	0f 88 ca 04 00 00    	js     94a6 <do_work+0x1716>
			if(lbn_tv.ver > 0 &&  tmp != cur_tv.ver){// had data & updated to a different device
    8fdc:	74 38                	je     9016 <do_work+0x1286>
    8fde:	44 39 ad 48 ff ff ff 	cmp    %r13d,-0xb8(%rbp)
    8fe5:	74 2f                	je     9016 <do_work+0x1286>
				enqueue_remap_or_discard_work(dc, 0, lbn, tmp, 0);
    8fe7:	4c 89 ca             	mov    %r9,%rdx
    8fea:	45 31 c0             	xor    %r8d,%r8d
    8fed:	44 89 e9             	mov    %r13d,%ecx
    8ff0:	31 f6                	xor    %esi,%esi
    8ff2:	4c 89 ff             	mov    %r15,%rdi
    8ff5:	44 89 9d 38 ff ff ff 	mov    %r11d,-0xc8(%rbp)
    8ffc:	4c 89 8d 48 ff ff ff 	mov    %r9,-0xb8(%rbp)
    9003:	e8 38 cc ff ff       	callq  5c40 <enqueue_remap_or_discard_work>
    9008:	44 8b 9d 38 ff ff ff 	mov    -0xc8(%rbp),%r11d
    900f:	4c 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%r9
    9016:	44 89 9d 48 ff ff ff 	mov    %r11d,-0xb8(%rbp)
			enqueue_remap_or_discard_work(dc, pbn_this, lbn, tmp, 1);
    901d:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    9023:	44 89 e9             	mov    %r13d,%ecx
			enqueue_remap_or_discard_work(dc, pbn_this, lbn, lbn_tv.ver, 1);
    9026:	48 8b b5 30 ff ff ff 	mov    -0xd0(%rbp),%rsi
    902d:	4c 89 ca             	mov    %r9,%rdx
    9030:	4c 89 ff             	mov    %r15,%rdi
    9033:	e8 08 cc ff ff       	callq  5c40 <enqueue_remap_or_discard_work>
    9038:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    903f:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    9041:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    9048:	00 
    9049:	74 34                	je     907f <do_work+0x12ef>
		if(dc->tmp_period_time[period]) {
    904b:	49 8b 8f f0 02 00 00 	mov    0x2f0(%r15),%rcx
    9052:	48 85 c9             	test   %rcx,%rcx
    9055:	74 1d                	je     9074 <do_work+0x12e4>
    var = ((unsigned long long int) hi << 32) | lo;
    9057:	48 c1 e2 20          	shl    $0x20,%rdx
    905b:	89 c0                	mov    %eax,%eax
    905d:	48 09 d0             	or     %rdx,%rax
			dc->total_period_time[period] += t;
    9060:	49 8b 97 48 03 00 00 	mov    0x348(%r15),%rdx
    9067:	48 29 ca             	sub    %rcx,%rdx
    906a:	48 01 d0             	add    %rdx,%rax
    906d:	49 89 87 48 03 00 00 	mov    %rax,0x348(%r15)
		dc->tmp_period_time[period] = 0;
    9074:	49 c7 87 f0 02 00 00 	movq   $0x0,0x2f0(%r15)
    907b:	00 00 00 00 
		bio->bi_status = BLK_STS_OK;
    907f:	41 c6 44 24 1a 00    	movb   $0x0,0x1a(%r12)
		bio_endio(bio);
    9085:	4c 89 e7             	mov    %r12,%rdi
    9088:	44 89 9d 48 ff ff ff 	mov    %r11d,-0xb8(%rbp)
    908f:	e8 00 00 00 00       	callq  9094 <do_work+0x1304>
		if (dc->enable_time_stats)
    9094:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    909b:	00 
    909c:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
    90a3:	0f 84 d3 f0 ff ff    	je     817c <do_work+0x3ec>
			dc->dupwrites++;
    90a9:	49 83 87 d8 01 00 00 	addq   $0x1,0x1d8(%r15)
    90b0:	01 
			dc->hit_right_fp++;
    90b1:	49 83 87 60 02 00 00 	addq   $0x1,0x260(%r15)
    90b8:	01 
    90b9:	e9 be f0 ff ff       	jmpq   817c <do_work+0x3ec>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    90be:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    90c0:	48 85 c9             	test   %rcx,%rcx
    90c3:	0f 84 9f f7 ff ff    	je     8868 <do_work+0xad8>
    var = ((unsigned long long int) hi << 32) | lo;
    90c9:	48 c1 e2 20          	shl    $0x20,%rdx
    90cd:	89 c0                	mov    %eax,%eax
		return -EIO;
    90cf:	41 be fb ff ff ff    	mov    $0xfffffffb,%r14d
    var = ((unsigned long long int) hi << 32) | lo;
    90d5:	48 09 c2             	or     %rax,%rdx
    90d8:	e9 8a f5 ff ff       	jmpq   8667 <do_work+0x8d7>
		r = __handle_no_lbn_pbn(dc, bio, lbn, hash);
    90dd:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
	r = alloc_pbnblk_and_insert_lbn_pbn(dc, &pbn_new, bio, lbn);
    90e4:	48 8d 75 90          	lea    -0x70(%rbp),%rsi
    90e8:	4c 89 e2             	mov    %r12,%rdx
    90eb:	4c 89 ff             	mov    %r15,%rdi
    90ee:	48 89 8d 68 ff ff ff 	mov    %rcx,-0x98(%rbp)
    90f5:	e8 86 ea ff ff       	callq  7b80 <alloc_pbnblk_and_insert_lbn_pbn>
	if (r < 0)
    90fa:	85 c0                	test   %eax,%eax
	r = alloc_pbnblk_and_insert_lbn_pbn(dc, &pbn_new, bio, lbn);
    90fc:	41 89 c3             	mov    %eax,%r11d
	if (r < 0)
    90ff:	0f 88 f3 fa ff ff    	js     8bf8 <do_work+0xe68>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    9105:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    9107:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    910e:	00 
    910f:	74 10                	je     9121 <do_work+0x1391>
    var = ((unsigned long long int) hi << 32) | lo;
    9111:	48 c1 e2 20          	shl    $0x20,%rdx
    9115:	89 c0                	mov    %eax,%eax
    9117:	48 09 d0             	or     %rdx,%rax
    911a:	49 89 87 d0 02 00 00 	mov    %rax,0x2d0(%r15)
	hashpbn_value.pbn = pbn_new;
    9121:	48 8b 45 90          	mov    -0x70(%rbp),%rax
	r = dc->kvs_hash_pbn->kvs_insert(dc->kvs_hash_pbn, (void *)hash,
    9125:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    912b:	48 8d 4d 98          	lea    -0x68(%rbp),%rcx
    912f:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
	hashpbn_value.pbn = pbn_new;
    9133:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	r = dc->kvs_hash_pbn->kvs_insert(dc->kvs_hash_pbn, (void *)hash,
    9137:	49 8b bf c8 03 00 00 	mov    0x3c8(%r15),%rdi
    913e:	41 8b 97 f0 03 00 00 	mov    0x3f0(%r15),%edx
    9145:	48 8b 47 18          	mov    0x18(%rdi),%rax
    9149:	e8 00 00 00 00       	callq  914e <do_work+0x13be>
    914e:	41 89 c3             	mov    %eax,%r11d
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    9151:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    9153:	49 8b 8f a0 02 00 00 	mov    0x2a0(%r15),%rcx
    915a:	48 85 c9             	test   %rcx,%rcx
    915d:	74 34                	je     9193 <do_work+0x1403>
		if(dc->tmp_period_time[period]) {
    915f:	49 8b b7 d0 02 00 00 	mov    0x2d0(%r15),%rsi
    9166:	48 85 f6             	test   %rsi,%rsi
    9169:	74 1d                	je     9188 <do_work+0x13f8>
    var = ((unsigned long long int) hi << 32) | lo;
    916b:	48 c1 e2 20          	shl    $0x20,%rdx
    916f:	89 c0                	mov    %eax,%eax
    9171:	48 09 d0             	or     %rdx,%rax
			dc->total_period_time[period] += t;
    9174:	49 8b 97 28 03 00 00 	mov    0x328(%r15),%rdx
    917b:	48 29 f2             	sub    %rsi,%rdx
    917e:	48 01 d0             	add    %rdx,%rax
    9181:	49 89 87 28 03 00 00 	mov    %rax,0x328(%r15)
		dc->tmp_period_time[period] = 0;
    9188:	49 c7 87 d0 02 00 00 	movq   $0x0,0x2d0(%r15)
    918f:	00 00 00 00 
	if (r < 0)
    9193:	45 85 db             	test   %r11d,%r11d
    9196:	0f 89 6c 04 00 00    	jns    9608 <do_work+0x1878>
	ret = dc->kvs_lbn_pbn->kvs_delete(dc->kvs_lbn_pbn,
    919c:	49 8b bf d8 03 00 00 	mov    0x3d8(%r15),%rdi
    91a3:	44 89 9d 48 ff ff ff 	mov    %r11d,-0xb8(%rbp)
    91aa:	ba 08 00 00 00       	mov    $0x8,%edx
    91af:	48 8d b5 68 ff ff ff 	lea    -0x98(%rbp),%rsi
    91b6:	48 8b 47 08          	mov    0x8(%rdi),%rax
    91ba:	e8 00 00 00 00       	callq  91bf <do_work+0x142f>
	if (ret < 0)
    91bf:	85 c0                	test   %eax,%eax
    91c1:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
    91c8:	0f 89 f9 f9 ff ff    	jns    8bc7 <do_work+0xe37>
		DMERR("Error in deleting previously created lbn pbn entry.");
    91ce:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    91d5:	e8 00 00 00 00       	callq  91da <do_work+0x144a>
    91da:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
    91e1:	e9 e1 f9 ff ff       	jmpq   8bc7 <do_work+0xe37>
    91e6:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
    91ed:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    91f1:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
    91f8:	48 89 45 98          	mov    %rax,-0x68(%rbp)
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    91fc:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    91fe:	4d 85 c0             	test   %r8,%r8
    9201:	74 10                	je     9213 <do_work+0x1483>
    var = ((unsigned long long int) hi << 32) | lo;
    9203:	48 c1 e2 20          	shl    $0x20,%rdx
    9207:	89 c0                	mov    %eax,%eax
    9209:	48 09 d0             	or     %rdx,%rax
    920c:	49 89 87 e0 02 00 00 	mov    %rax,0x2e0(%r15)
	r = dc->mdops->inc_refcount(dc->bmd, pbn_this);
    9213:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    921a:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    9221:	4c 89 ee             	mov    %r13,%rsi
    9224:	48 8b 40 28          	mov    0x28(%rax),%rax
    9228:	e8 00 00 00 00       	callq  922d <do_work+0x149d>
	if (r < 0)
    922d:	85 c0                	test   %eax,%eax
	r = dc->mdops->inc_refcount(dc->bmd, pbn_this);
    922f:	41 89 c3             	mov    %eax,%r11d
	if (r < 0)
    9232:	0f 88 0e f4 ff ff    	js     8646 <do_work+0x8b6>
	if(2 == dc->mdops->get_refcount(dc->bmd, pbn_this)){
    9238:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    923f:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    9246:	4c 89 ee             	mov    %r13,%rsi
    9249:	48 8b 40 38          	mov    0x38(%rax),%rax
    924d:	e8 00 00 00 00       	callq  9252 <do_work+0x14c2>
    9252:	83 f8 02             	cmp    $0x2,%eax
    9255:	75 08                	jne    925f <do_work+0x14cf>
		dc->invalid_fp--;
    9257:	49 83 af 78 02 00 00 	subq   $0x1,0x278(%r15)
    925e:	01 
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    925f:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    9261:	49 8b 8f a0 02 00 00 	mov    0x2a0(%r15),%rcx
    9268:	48 85 c9             	test   %rcx,%rcx
    926b:	74 34                	je     92a1 <do_work+0x1511>
		if(dc->tmp_period_time[period]) {
    926d:	49 8b b7 e0 02 00 00 	mov    0x2e0(%r15),%rsi
    9274:	48 85 f6             	test   %rsi,%rsi
    9277:	74 1d                	je     9296 <do_work+0x1506>
    var = ((unsigned long long int) hi << 32) | lo;
    9279:	48 c1 e2 20          	shl    $0x20,%rdx
    927d:	89 c0                	mov    %eax,%eax
    927f:	48 09 d0             	or     %rdx,%rax
			dc->total_period_time[period] += t;
    9282:	49 8b 97 38 03 00 00 	mov    0x338(%r15),%rdx
    9289:	48 29 f2             	sub    %rsi,%rdx
    928c:	48 01 d0             	add    %rdx,%rax
    928f:	49 89 87 38 03 00 00 	mov    %rax,0x338(%r15)
		dc->tmp_period_time[period] = 0;
    9296:	49 c7 87 e0 02 00 00 	movq   $0x0,0x2e0(%r15)
    929d:	00 00 00 00 
	lbnpbn_value.pbn = pbn_this;
    92a1:	4c 89 6d 98          	mov    %r13,-0x68(%rbp)
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    92a5:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    92a7:	48 85 c9             	test   %rcx,%rcx
    92aa:	74 10                	je     92bc <do_work+0x152c>
    var = ((unsigned long long int) hi << 32) | lo;
    92ac:	48 c1 e2 20          	shl    $0x20,%rdx
    92b0:	89 c0                	mov    %eax,%eax
    92b2:	48 09 d0             	or     %rdx,%rax
    92b5:	49 89 87 d8 02 00 00 	mov    %rax,0x2d8(%r15)
	r = dc->kvs_lbn_pbn->kvs_insert(dc->kvs_lbn_pbn, (void *)&lbn,
    92bc:	49 8b bf d8 03 00 00 	mov    0x3d8(%r15),%rdi
    92c3:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    92c9:	48 8d 4d 98          	lea    -0x68(%rbp),%rcx
    92cd:	ba 08 00 00 00       	mov    $0x8,%edx
    92d2:	48 8d 75 80          	lea    -0x80(%rbp),%rsi
    92d6:	48 8b 47 18          	mov    0x18(%rdi),%rax
    92da:	e8 00 00 00 00       	callq  92df <do_work+0x154f>
    92df:	41 89 c3             	mov    %eax,%r11d
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    92e2:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    92e4:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    92eb:	00 
    92ec:	74 34                	je     9322 <do_work+0x1592>
		if(dc->tmp_period_time[period]) {
    92ee:	49 8b 8f d8 02 00 00 	mov    0x2d8(%r15),%rcx
    92f5:	48 85 c9             	test   %rcx,%rcx
    92f8:	74 1d                	je     9317 <do_work+0x1587>
    var = ((unsigned long long int) hi << 32) | lo;
    92fa:	48 c1 e2 20          	shl    $0x20,%rdx
    92fe:	89 c0                	mov    %eax,%eax
    9300:	48 09 d0             	or     %rdx,%rax
			dc->total_period_time[period] += t;
    9303:	49 8b 97 30 03 00 00 	mov    0x330(%r15),%rdx
    930a:	48 29 ca             	sub    %rcx,%rdx
    930d:	48 01 d0             	add    %rdx,%rax
    9310:	49 89 87 30 03 00 00 	mov    %rax,0x330(%r15)
		dc->tmp_period_time[period] = 0;
    9317:	49 c7 87 d8 02 00 00 	movq   $0x0,0x2d8(%r15)
    931e:	00 00 00 00 
	if (r < 0)
    9322:	45 85 db             	test   %r11d,%r11d
    9325:	44 89 9d 48 ff ff ff 	mov    %r11d,-0xb8(%rbp)
    932c:	0f 88 de fa ff ff    	js     8e10 <do_work+0x1080>
	dc->logical_block_counter++;
    9332:	49 83 87 b8 01 00 00 	addq   $0x1,0x1b8(%r15)
    9339:	01 
	bio_endio(bio);
    933a:	4c 89 e7             	mov    %r12,%rdi
	bio->bi_status = BLK_STS_OK;
    933d:	41 c6 44 24 1a 00    	movb   $0x0,0x1a(%r12)
	bio_endio(bio);
    9343:	e8 00 00 00 00       	callq  9348 <do_work+0x15b8>
	if (r == 0 && dc->enable_time_stats)
    9348:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
	dc->newwrites++;
    934f:	49 83 87 f8 01 00 00 	addq   $0x1,0x1f8(%r15)
    9356:	01 
	if (r == 0 && dc->enable_time_stats)
    9357:	45 85 db             	test   %r11d,%r11d
    935a:	0f 85 1c ee ff ff    	jne    817c <do_work+0x3ec>
    9360:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    9367:	00 
    9368:	0f 84 17 ee ff ff    	je     8185 <do_work+0x3f5>
		dc->dupwrites++;
    936e:	49 83 87 d8 01 00 00 	addq   $0x1,0x1d8(%r15)
    9375:	01 
    9376:	e9 0a ee ff ff       	jmpq   8185 <do_work+0x3f5>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    937b:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    937d:	48 85 c9             	test   %rcx,%rcx
    9380:	74 10                	je     9392 <do_work+0x1602>
    var = ((unsigned long long int) hi << 32) | lo;
    9382:	48 c1 e2 20          	shl    $0x20,%rdx
    9386:	89 c0                	mov    %eax,%eax
    9388:	48 09 d0             	or     %rdx,%rax
    938b:	49 89 87 e0 02 00 00 	mov    %rax,0x2e0(%r15)
	r = dc->mdops->dec_refcount(dc->bmd, pbn_old);
    9392:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    9399:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    93a0:	4c 89 ce             	mov    %r9,%rsi
    93a3:	4c 89 8d 38 ff ff ff 	mov    %r9,-0xc8(%rbp)
    93aa:	48 8b 40 30          	mov    0x30(%rax),%rax
    93ae:	e8 00 00 00 00       	callq  93b3 <do_work+0x1623>
	if (r < 0)
    93b3:	85 c0                	test   %eax,%eax
    93b5:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
    93bb:	0f 88 a8 03 00 00    	js     9769 <do_work+0x19d9>
	if(1 == dc->mdops->get_refcount(dc->bmd, pbn_old))
    93c1:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    93c8:	4c 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%r9
    93cf:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    93d6:	48 8b 40 38          	mov    0x38(%rax),%rax
    93da:	4c 89 ce             	mov    %r9,%rsi
    93dd:	e8 00 00 00 00       	callq  93e2 <do_work+0x1652>
    93e2:	83 e8 01             	sub    $0x1,%eax
    93e5:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
    93ec:	75 08                	jne    93f6 <do_work+0x1666>
		dc->invalid_fp++;
    93ee:	49 83 87 78 02 00 00 	addq   $0x1,0x278(%r15)
    93f5:	01 
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    93f6:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    93f8:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    93ff:	00 
    9400:	74 34                	je     9436 <do_work+0x16a6>
		if(dc->tmp_period_time[period]) {
    9402:	49 8b 8f e0 02 00 00 	mov    0x2e0(%r15),%rcx
    9409:	48 85 c9             	test   %rcx,%rcx
    940c:	74 1d                	je     942b <do_work+0x169b>
    var = ((unsigned long long int) hi << 32) | lo;
    940e:	48 c1 e2 20          	shl    $0x20,%rdx
    9412:	89 c0                	mov    %eax,%eax
    9414:	48 09 d0             	or     %rdx,%rax
			dc->total_period_time[period] += t;
    9417:	49 8b 97 38 03 00 00 	mov    0x338(%r15),%rdx
    941e:	48 29 ca             	sub    %rcx,%rdx
    9421:	48 01 d0             	add    %rdx,%rax
    9424:	49 89 87 38 03 00 00 	mov    %rax,0x338(%r15)
		dc->tmp_period_time[period] = 0;
    942b:	49 c7 87 e0 02 00 00 	movq   $0x0,0x2e0(%r15)
    9432:	00 00 00 00 
	if (r == 0) {
    9436:	45 85 db             	test   %r11d,%r11d
    9439:	0f 85 3d ed ff ff    	jne    817c <do_work+0x3ec>
		bio->bi_status = BLK_STS_OK;
    943f:	41 c6 44 24 1a 00    	movb   $0x0,0x1a(%r12)
		bio_endio(bio);
    9445:	4c 89 e7             	mov    %r12,%rdi
    9448:	e8 00 00 00 00       	callq  944d <do_work+0x16bd>
		dc->overwrites++;
    944d:	49 83 87 f0 01 00 00 	addq   $0x1,0x1f0(%r15)
    9454:	01 
    9455:	e9 06 ff ff ff       	jmpq   9360 <do_work+0x15d0>
		if(check_collision(dc, lbn, cur_tv.ver)){//collision happen
    945a:	39 d7                	cmp    %edx,%edi
    945c:	0f 85 f3 ec ff ff    	jne    8155 <do_work+0x3c5>
    9462:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    9469:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    9470:	e9 07 fb ff ff       	jmpq   8f7c <do_work+0x11ec>
			bio->bi_status = BLK_STS_OK;
    9475:	41 c6 44 24 1a 00    	movb   $0x0,0x1a(%r12)
			bio_endio(bio);
    947b:	4c 89 e7             	mov    %r12,%rdi
    947e:	e8 00 00 00 00       	callq  9483 <do_work+0x16f3>
			if (dc->enable_time_stats) {
    9483:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    948a:	00 
    948b:	0f 84 f4 ec ff ff    	je     8185 <do_work+0x3f5>
				dc->dupwrites++;
    9491:	49 83 87 d8 01 00 00 	addq   $0x1,0x1d8(%r15)
    9498:	01 
				dc->hit_right_fp++;
    9499:	49 83 87 60 02 00 00 	addq   $0x1,0x260(%r15)
    94a0:	01 
    94a1:	e9 df ec ff ff       	jmpq   8185 <do_work+0x3f5>
    94a6:	44 8b 95 28 ff ff ff 	mov    -0xd8(%rbp),%r10d
			if(cur_tv.ver != lbn_tv.ver){ // updated to a different device
    94ad:	83 e0 7f             	and    $0x7f,%eax
    94b0:	41 83 e2 7f          	and    $0x7f,%r10d
    94b4:	3a 85 27 ff ff ff    	cmp    -0xd9(%rbp),%al
    94ba:	74 4f                	je     950b <do_work+0x177b>
	if(origin <= target) {
    94bc:	45 39 d5             	cmp    %r10d,%r13d
    94bf:	0f 8f 8c 02 00 00    	jg     9751 <do_work+0x19c1>
		lpn += (target - origin);
    94c5:	44 89 d2             	mov    %r10d,%edx
    94c8:	44 29 ea             	sub    %r13d,%edx
    94cb:	48 63 d2             	movslq %edx,%rdx
    94ce:	4c 01 ca             	add    %r9,%rdx
				enqueue_remap_or_discard_work(dc, 0, lbn2, tmp, 0);
    94d1:	45 31 c0             	xor    %r8d,%r8d
    94d4:	44 89 e9             	mov    %r13d,%ecx
    94d7:	31 f6                	xor    %esi,%esi
    94d9:	4c 89 ff             	mov    %r15,%rdi
    94dc:	4c 89 8d 28 ff ff ff 	mov    %r9,-0xd8(%rbp)
    94e3:	44 89 95 38 ff ff ff 	mov    %r10d,-0xc8(%rbp)
    94ea:	44 89 9d 48 ff ff ff 	mov    %r11d,-0xb8(%rbp)
    94f1:	e8 4a c7 ff ff       	callq  5c40 <enqueue_remap_or_discard_work>
    94f6:	4c 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%r9
    94fd:	44 8b 95 38 ff ff ff 	mov    -0xc8(%rbp),%r10d
    9504:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
    950b:	44 89 9d 48 ff ff ff 	mov    %r11d,-0xb8(%rbp)
			enqueue_remap_or_discard_work(dc, pbn_this, lbn, lbn_tv.ver, 1);
    9512:	41 b8 01 00 00 00    	mov    $0x1,%r8d
    9518:	44 89 d1             	mov    %r10d,%ecx
    951b:	e9 06 fb ff ff       	jmpq   9026 <do_work+0x1296>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    9520:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    9522:	48 85 c9             	test   %rcx,%rcx
    9525:	74 10                	je     9537 <do_work+0x17a7>
    var = ((unsigned long long int) hi << 32) | lo;
    9527:	48 c1 e2 20          	shl    $0x20,%rdx
    952b:	89 c0                	mov    %eax,%eax
    952d:	48 09 d0             	or     %rdx,%rax
    9530:	49 89 87 e0 02 00 00 	mov    %rax,0x2e0(%r15)
	r = dc->mdops->inc_refcount(dc->bmd, pbn_new);
    9537:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    953e:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    9545:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    9549:	48 8b 40 28          	mov    0x28(%rax),%rax
    954d:	e8 00 00 00 00       	callq  9552 <do_work+0x17c2>
	if (r < 0)
    9552:	85 c0                	test   %eax,%eax
	r = dc->mdops->inc_refcount(dc->bmd, pbn_new);
    9554:	41 89 c3             	mov    %eax,%r11d
	if (r < 0)
    9557:	0f 88 ab 01 00 00    	js     9708 <do_work+0x1978>
	r = dc->mdops->dec_refcount(dc->bmd, pbn_old);
    955d:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    9564:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    956b:	4c 89 ee             	mov    %r13,%rsi
    956e:	48 8b 40 30          	mov    0x30(%rax),%rax
    9572:	e8 00 00 00 00       	callq  9577 <do_work+0x17e7>
	if (r < 0)
    9577:	85 c0                	test   %eax,%eax
    9579:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
    957f:	0f 88 4a 01 00 00    	js     96cf <do_work+0x193f>
	if(1 == dc->mdops->get_refcount(dc->bmd, pbn_old))
    9585:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
	dc->logical_block_counter--;
    958c:	49 83 af b8 01 00 00 	subq   $0x1,0x1b8(%r15)
    9593:	01 
	if(1 == dc->mdops->get_refcount(dc->bmd, pbn_old))
    9594:	4c 89 ee             	mov    %r13,%rsi
    9597:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    959e:	48 8b 40 38          	mov    0x38(%rax),%rax
    95a2:	e8 00 00 00 00       	callq  95a7 <do_work+0x1817>
    95a7:	83 e8 01             	sub    $0x1,%eax
    95aa:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
    95b1:	75 08                	jne    95bb <do_work+0x182b>
		dc->invalid_fp++;
    95b3:	49 83 87 78 02 00 00 	addq   $0x1,0x278(%r15)
    95ba:	01 
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    95bb:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    95bd:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    95c4:	00 
    95c5:	74 34                	je     95fb <do_work+0x186b>
		if(dc->tmp_period_time[period]) {
    95c7:	49 8b 8f e0 02 00 00 	mov    0x2e0(%r15),%rcx
    95ce:	48 85 c9             	test   %rcx,%rcx
    95d1:	74 1d                	je     95f0 <do_work+0x1860>
    var = ((unsigned long long int) hi << 32) | lo;
    95d3:	48 c1 e2 20          	shl    $0x20,%rdx
    95d7:	89 c0                	mov    %eax,%eax
    95d9:	48 09 d0             	or     %rdx,%rax
			dc->total_period_time[period] += t;
    95dc:	49 8b 97 38 03 00 00 	mov    0x338(%r15),%rdx
    95e3:	48 29 ca             	sub    %rcx,%rdx
    95e6:	48 01 d0             	add    %rdx,%rax
    95e9:	49 89 87 38 03 00 00 	mov    %rax,0x338(%r15)
		dc->tmp_period_time[period] = 0;
    95f0:	49 c7 87 e0 02 00 00 	movq   $0x0,0x2e0(%r15)
    95f7:	00 00 00 00 
	dc->overwrites++;
    95fb:	49 83 87 f0 01 00 00 	addq   $0x1,0x1f0(%r15)
    9602:	01 
    9603:	e9 f0 f5 ff ff       	jmpq   8bf8 <do_work+0xe68>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    9608:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    960a:	48 85 c9             	test   %rcx,%rcx
    960d:	74 10                	je     961f <do_work+0x188f>
    var = ((unsigned long long int) hi << 32) | lo;
    960f:	48 c1 e2 20          	shl    $0x20,%rdx
    9613:	89 c0                	mov    %eax,%eax
    9615:	48 09 d0             	or     %rdx,%rax
    9618:	49 89 87 e0 02 00 00 	mov    %rax,0x2e0(%r15)
	r = dc->mdops->inc_refcount(dc->bmd, pbn_new);
    961f:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    9626:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    962d:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    9631:	48 8b 40 28          	mov    0x28(%rax),%rax
    9635:	e8 00 00 00 00       	callq  963a <do_work+0x18aa>
    963a:	41 89 c3             	mov    %eax,%r11d
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    963d:	0f 31                	rdtsc  
	if(!dc->enable_time_stats)
    963f:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    9646:	00 
    9647:	74 34                	je     967d <do_work+0x18ed>
		if(dc->tmp_period_time[period]) {
    9649:	49 8b 8f e0 02 00 00 	mov    0x2e0(%r15),%rcx
    9650:	48 85 c9             	test   %rcx,%rcx
    9653:	74 1d                	je     9672 <do_work+0x18e2>
			dc->total_period_time[period] += t;
    9655:	49 8b b7 38 03 00 00 	mov    0x338(%r15),%rsi
    var = ((unsigned long long int) hi << 32) | lo;
    965c:	48 c1 e2 20          	shl    $0x20,%rdx
    9660:	89 c0                	mov    %eax,%eax
    9662:	48 09 d0             	or     %rdx,%rax
			dc->total_period_time[period] += t;
    9665:	48 29 ce             	sub    %rcx,%rsi
    9668:	48 01 f0             	add    %rsi,%rax
    966b:	49 89 87 38 03 00 00 	mov    %rax,0x338(%r15)
		dc->tmp_period_time[period] = 0;
    9672:	49 c7 87 e0 02 00 00 	movq   $0x0,0x2e0(%r15)
    9679:	00 00 00 00 
	if (r < 0)
    967d:	45 85 db             	test   %r11d,%r11d
    9680:	0f 89 68 01 00 00    	jns    97ee <do_work+0x1a5e>
	ret = dc->kvs_hash_pbn->kvs_delete(dc->kvs_hash_pbn,
    9686:	49 8b bf c8 03 00 00 	mov    0x3c8(%r15),%rdi
    968d:	44 89 9d 48 ff ff ff 	mov    %r11d,-0xb8(%rbp)
    9694:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    9698:	41 8b 97 f0 03 00 00 	mov    0x3f0(%r15),%edx
    969f:	48 8b 47 08          	mov    0x8(%rdi),%rax
    96a3:	e8 00 00 00 00       	callq  96a8 <do_work+0x1918>
	if (ret < 0)
    96a8:	85 c0                	test   %eax,%eax
    96aa:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
    96b1:	0f 89 e5 fa ff ff    	jns    919c <do_work+0x140c>
		DMERR("Error in deleting previously created hash pbn entry.");
    96b7:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    96be:	e8 00 00 00 00       	callq  96c3 <do_work+0x1933>
    96c3:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
    96ca:	e9 cd fa ff ff       	jmpq   919c <do_work+0x140c>
	ret = dc->mdops->dec_refcount(dc->bmd, pbn_new);
    96cf:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    96d6:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    96dd:	48 8b 75 90          	mov    -0x70(%rbp),%rsi
    96e1:	48 8b 40 30          	mov    0x30(%rax),%rax
    96e5:	e8 00 00 00 00       	callq  96ea <do_work+0x195a>
	if (ret < 0)
    96ea:	85 c0                	test   %eax,%eax
    96ec:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
    96f3:	79 13                	jns    9708 <do_work+0x1978>
		DMERR("Error in decrementing previously incremented refcount.");
    96f5:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    96fc:	e8 00 00 00 00       	callq  9701 <do_work+0x1971>
    9701:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
	ret = dc->kvs_hash_pbn->kvs_delete(dc->kvs_hash_pbn, (void *)hash,
    9708:	49 8b bf c8 03 00 00 	mov    0x3c8(%r15),%rdi
    970f:	44 89 9d 48 ff ff ff 	mov    %r11d,-0xb8(%rbp)
    9716:	48 8d 75 b0          	lea    -0x50(%rbp),%rsi
    971a:	41 8b 97 f0 03 00 00 	mov    0x3f0(%r15),%edx
    9721:	48 8b 47 08          	mov    0x8(%rdi),%rax
    9725:	e8 00 00 00 00       	callq  972a <do_work+0x199a>
	if (ret < 0)
    972a:	85 c0                	test   %eax,%eax
    972c:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
    9733:	0f 89 5c f4 ff ff    	jns    8b95 <do_work+0xe05>
		DMERR("Error in deleting previously inserted hash pbn entry");
    9739:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    9740:	e8 00 00 00 00       	callq  9745 <do_work+0x19b5>
    9745:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
    974c:	e9 44 f4 ff ff       	jmpq   8b95 <do_work+0xe05>
		lpn -= (origin - target);
    9751:	44 89 e8             	mov    %r13d,%eax
    9754:	4c 89 ca             	mov    %r9,%rdx
    9757:	44 29 d0             	sub    %r10d,%eax
    975a:	48 98                	cltq   
    975c:	48 29 c2             	sub    %rax,%rdx
    975f:	e9 6d fd ff ff       	jmpq   94d1 <do_work+0x1741>
}
    9764:	e8 00 00 00 00       	callq  9769 <do_work+0x19d9>
	ret = dc->kvs_lbn_pbn->kvs_insert(dc->kvs_lbn_pbn, (void *)&lbn,
    9769:	49 8b bf d8 03 00 00 	mov    0x3d8(%r15),%rdi
    9770:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    9776:	48 8d 4d 90          	lea    -0x70(%rbp),%rcx
    977a:	ba 08 00 00 00       	mov    $0x8,%edx
    977f:	48 8d 75 88          	lea    -0x78(%rbp),%rsi
    9783:	48 8b 47 18          	mov    0x18(%rdi),%rax
    9787:	e8 00 00 00 00       	callq  978c <do_work+0x19fc>
	if (ret < 0)
    978c:	85 c0                	test   %eax,%eax
    978e:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
    9795:	0f 89 6e f6 ff ff    	jns    8e09 <do_work+0x1079>
		DMERR("Error in overwriting lbn->pbn_this [%llu] with"
    979b:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
    979f:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
    97a3:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    97aa:	e8 00 00 00 00       	callq  97af <do_work+0x1a1f>
    97af:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
    97b6:	e9 4e f6 ff ff       	jmpq   8e09 <do_work+0x1079>
	kfree(io);
    97bb:	4c 89 e7             	mov    %r12,%rdi
			r = -ENOMEM;
    97be:	41 be f4 ff ff ff    	mov    $0xfffffff4,%r14d
	kfree(io);
    97c4:	e8 00 00 00 00       	callq  97c9 <do_work+0x1a39>
    97c9:	e9 97 eb ff ff       	jmpq   8365 <do_work+0x5d5>
		DMWARN("Discard request received for lbn [%llu] whose LBN-PBN entry"
    97ce:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
    97d2:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    97d9:	e8 00 00 00 00       	callq  97de <do_work+0x1a4e>
		do_io_remap_device(dc, bio);
    97de:	48 89 de             	mov    %rbx,%rsi
    97e1:	4c 89 ff             	mov    %r15,%rdi
    97e4:	e8 67 ce ff ff       	callq  6650 <do_io_remap_device.isra.10>
    97e9:	e9 c8 eb ff ff       	jmpq   83b6 <do_work+0x626>
	dc->newwrites++;
    97ee:	49 83 87 f8 01 00 00 	addq   $0x1,0x1f8(%r15)
    97f5:	01 
    97f6:	e9 fd f3 ff ff       	jmpq   8bf8 <do_work+0xe68>
			r = garbage_collect(dc);
    97fb:	4c 89 ff             	mov    %r15,%rdi
    97fe:	e8 1d be ff ff       	callq  5620 <garbage_collect>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    9803:	0f 31                	rdtsc  
    var = ((unsigned long long int) hi << 32) | lo;
    9805:	48 c1 e2 20          	shl    $0x20,%rdx
    9809:	89 c0                	mov    %eax,%eax
    980b:	48 09 d0             	or     %rdx,%rax
	if(!dc->enable_time_stats)
    980e:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    9815:	00 
    9816:	74 07                	je     981f <do_work+0x1a8f>
		dc->tmp_period_time[period] = var;
    9818:	49 89 87 e8 02 00 00 	mov    %rax,0x2e8(%r15)
			r = dc->mdops->flush_meta(dc->bmd);
    981f:	49 8b 87 b8 03 00 00 	mov    0x3b8(%r15),%rax
    9826:	49 8b bf c0 03 00 00 	mov    0x3c0(%r15),%rdi
    982d:	48 8b 40 48          	mov    0x48(%rax),%rax
    9831:	e8 00 00 00 00       	callq  9836 <do_work+0x1aa6>
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    9836:	0f 31                	rdtsc  
    var = ((unsigned long long int) hi << 32) | lo;
    9838:	48 c1 e2 20          	shl    $0x20,%rdx
    983c:	89 c0                	mov    %eax,%eax
    983e:	48 09 d0             	or     %rdx,%rax
	if(!dc->enable_time_stats)
    9841:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    9848:	00 
    9849:	74 28                	je     9873 <do_work+0x1ae3>
		if(dc->tmp_period_time[period]) {
    984b:	49 8b 97 e8 02 00 00 	mov    0x2e8(%r15),%rdx
    9852:	48 85 d2             	test   %rdx,%rdx
    9855:	74 11                	je     9868 <do_work+0x1ad8>
			dc->total_period_time[period] += t;
    9857:	49 03 87 40 03 00 00 	add    0x340(%r15),%rax
    985e:	48 29 d0             	sub    %rdx,%rax
    9861:	49 89 87 40 03 00 00 	mov    %rax,0x340(%r15)
		dc->tmp_period_time[period] = 0;
    9868:	49 c7 87 e8 02 00 00 	movq   $0x0,0x2e8(%r15)
    986f:	00 00 00 00 
			DMINFO("garbage_collect is trigged.");
    9873:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    987a:	e8 00 00 00 00       	callq  987f <do_work+0x1aef>
			dc->writes_after_flush = 0;
    987f:	49 c7 87 f8 03 00 00 	movq   $0x0,0x3f8(%r15)
    9886:	00 00 00 00 
	asm volatile ("rdtsc" : "=a" (lo), "=d" (hi));
    988a:	0f 31                	rdtsc  
    var = ((unsigned long long int) hi << 32) | lo;
    988c:	48 c1 e2 20          	shl    $0x20,%rdx
    9890:	89 c0                	mov    %eax,%eax
    9892:	48 09 c2             	or     %rax,%rdx
	if(!dc->enable_time_stats)
    9895:	49 83 bf a0 02 00 00 	cmpq   $0x0,0x2a0(%r15)
    989c:	00 
    989d:	0f 85 c4 ed ff ff    	jne    8667 <do_work+0x8d7>
    98a3:	e9 2f f0 ff ff       	jmpq   88d7 <do_work+0xb47>
			DMERR("Failed to delete LBN-PBN entry for pbn_val :%llu",
    98a8:	4c 89 e6             	mov    %r12,%rsi
    98ab:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    98b2:	e8 00 00 00 00       	callq  98b7 <do_work+0x1b27>
    98b7:	e9 fa ea ff ff       	jmpq   83b6 <do_work+0x626>
		DMERR("Error in deleting previously created lbn pbn entry");
    98bc:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    98c3:	e8 00 00 00 00       	callq  98c8 <do_work+0x1b38>
    98c8:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
    98cf:	e9 f3 f2 ff ff       	jmpq   8bc7 <do_work+0xe37>
		DMERR("ERROR in decrementing previously incremented refcount.");
    98d4:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi
    98db:	e8 00 00 00 00       	callq  98e0 <do_work+0x1b50>
    98e0:	44 8b 9d 48 ff ff ff 	mov    -0xb8(%rbp),%r11d
    98e7:	e9 0c f3 ff ff       	jmpq   8bf8 <do_work+0xe68>
    98ec:	0f 1f 40 00          	nopl   0x0(%rax)

00000000000098f0 <set_wq_priority>:
void set_wq_priority(char *wq_name, int nice_val) {
    98f0:	e8 00 00 00 00       	callq  98f5 <set_wq_priority+0x5>
    98f5:	55                   	push   %rbp
    98f6:	48 89 e5             	mov    %rsp,%rbp
    98f9:	41 56                	push   %r14
    98fb:	41 55                	push   %r13
    98fd:	41 89 f6             	mov    %esi,%r14d
    9900:	41 54                	push   %r12
    9902:	49 89 fd             	mov    %rdi,%r13
    9905:	53                   	push   %rbx
    for_each_process(task) {
    9906:	48 c7 c3 00 00 00 00 	mov    $0x0,%rbx
    990d:	eb 15                	jmp    9924 <set_wq_priority+0x34>
        if (strstr(task->comm, wq_name)) { // 查找工作队列的内核线程
    990f:	49 8d bc 24 a8 02 00 	lea    0x2a8(%r12),%rdi
    9916:	00 
    9917:	4c 89 ee             	mov    %r13,%rsi
    991a:	e8 00 00 00 00       	callq  991f <set_wq_priority+0x2f>
    991f:	48 85 c0             	test   %rax,%rax
    9922:	75 21                	jne    9945 <set_wq_priority+0x55>
	__READ_ONCE_SIZE;
    9924:	4c 8b a3 a8 07 00 00 	mov    0x7a8(%rbx),%r12
    for_each_process(task) {
    992b:	49 8d 9c 24 58 f8 ff 	lea    -0x7a8(%r12),%rbx
    9932:	ff 
    9933:	48 81 fb 00 00 00 00 	cmp    $0x0,%rbx
    993a:	75 d3                	jne    990f <set_wq_priority+0x1f>
}
    993c:	5b                   	pop    %rbx
    993d:	41 5c                	pop    %r12
    993f:	41 5d                	pop    %r13
    9941:	41 5e                	pop    %r14
    9943:	5d                   	pop    %rbp
    9944:	c3                   	retq   
            pid = task->pid;
    9945:	41 8b bc 24 00 01 00 	mov    0x100(%r12),%edi
    994c:	00 
    if (pid) {
    994d:	85 ff                	test   %edi,%edi
    994f:	74 eb                	je     993c <set_wq_priority+0x4c>
        kp = find_get_pid(pid);
    9951:	e8 00 00 00 00       	callq  9956 <set_wq_priority+0x66>
        task = pid_task(kp, PIDTYPE_PID);
    9956:	31 f6                	xor    %esi,%esi
    9958:	48 89 c7             	mov    %rax,%rdi
        kp = find_get_pid(pid);
    995b:	48 89 c3             	mov    %rax,%rbx
        task = pid_task(kp, PIDTYPE_PID);
    995e:	e8 00 00 00 00       	callq  9963 <set_wq_priority+0x73>
        if (task) {
    9963:	48 85 c0             	test   %rax,%rax
    9966:	74 0b                	je     9973 <set_wq_priority+0x83>
            set_user_nice(task, nice_val);
    9968:	49 63 f6             	movslq %r14d,%rsi
    996b:	48 89 c7             	mov    %rax,%rdi
    996e:	e8 00 00 00 00       	callq  9973 <set_wq_priority+0x83>
        put_pid(kp);
    9973:	48 89 df             	mov    %rbx,%rdi
    9976:	e8 00 00 00 00       	callq  997b <set_wq_priority+0x8b>
}
    997b:	5b                   	pop    %rbx
    997c:	41 5c                	pop    %r12
    997e:	41 5d                	pop    %r13
    9980:	41 5e                	pop    %r14
    9982:	5d                   	pop    %rbp
    9983:	c3                   	retq   

Disassembly of section .text.unlikely:

0000000000000000 <parse_collision_rate.isra.13>:
static int parse_collision_rate(struct dedup_args *da, struct dm_arg_set *as,
   0:	e8 00 00 00 00       	callq  5 <parse_collision_rate.isra.13+0x5>
   5:	55                   	push   %rbp
   6:	48 89 e5             	mov    %rsp,%rbp
   9:	41 54                	push   %r12
   b:	53                   	push   %rbx
   c:	48 89 fb             	mov    %rdi,%rbx
	if (kstrtou32(dm_shift_arg(as), 10, &collision_rate)) {
   f:	48 89 f7             	mov    %rsi,%rdi
static int parse_collision_rate(struct dedup_args *da, struct dm_arg_set *as,
  12:	49 89 d4             	mov    %rdx,%r12
  15:	48 83 ec 10          	sub    $0x10,%rsp
  19:	65 48 8b 04 25 28 00 	mov    %gs:0x28,%rax
  20:	00 00 
  22:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  26:	31 c0                	xor    %eax,%eax
	if (kstrtou32(dm_shift_arg(as), 10, &collision_rate)) {
  28:	e8 00 00 00 00       	callq  2d <parse_collision_rate.isra.13+0x2d>
  2d:	48 8d 55 e4          	lea    -0x1c(%rbp),%rdx
  31:	be 0a 00 00 00       	mov    $0xa,%esi
  36:	48 89 c7             	mov    %rax,%rdi
  39:	e8 00 00 00 00       	callq  3e <parse_collision_rate.isra.13+0x3e>
  3e:	85 c0                	test   %eax,%eax
  40:	74 0f                	je     51 <parse_collision_rate.isra.13+0x51>
		*err = "Invalid collision rate";
  42:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
  49:	00 
		return -EINVAL;
  4a:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
  4f:	eb 06                	jmp    57 <parse_collision_rate.isra.13+0x57>
	da->collision_rate = collision_rate;
  51:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
  54:	48 89 0b             	mov    %rcx,(%rbx)
}
  57:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
  5b:	65 48 33 0c 25 28 00 	xor    %gs:0x28,%rcx
  62:	00 00 
  64:	74 05                	je     6b <parse_collision_rate.isra.13+0x6b>
  66:	e8 00 00 00 00       	callq  6b <parse_collision_rate.isra.13+0x6b>
  6b:	5a                   	pop    %rdx
  6c:	59                   	pop    %rcx
  6d:	5b                   	pop    %rbx
  6e:	41 5c                	pop    %r12
  70:	5d                   	pop    %rbp
  71:	c3                   	retq   

Disassembly of section .init.text:

0000000000000000 <init_module>:
	.dtr = dm_dedup_dtr,
	.map = dm_dedup_map,
	.message = dm_dedup_message,
	.status = dm_dedup_status,
};

   0:	e8 00 00 00 00       	callq  5 <init_module+0x5>
   5:	55                   	push   %rbp
static int __init dm_dedup_init(void)
   6:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi

   d:	48 89 e5             	mov    %rsp,%rbp
static int __init dm_dedup_init(void)
  10:	e8 00 00 00 00       	callq  15 <init_module+0x15>
{
  15:	5d                   	pop    %rbp
  16:	c3                   	retq   

Disassembly of section .exit.text:

0000000000000000 <cleanup_module>:
	return dm_register_target(&dm_dedup_target);
}

   0:	55                   	push   %rbp
static void __exit dm_dedup_exit(void)
   1:	48 c7 c7 00 00 00 00 	mov    $0x0,%rdi

   8:	48 89 e5             	mov    %rsp,%rbp
static void __exit dm_dedup_exit(void)
   b:	e8 00 00 00 00       	callq  10 <cleanup_module+0x10>
{
  10:	5d                   	pop    %rbp
  11:	c3                   	retq   
